{
    "Abs": {
        "category": "Math/Base",
        "description": "Apply an absolute function to every values.",
        "label": "Abs",
        "parameters": {
            "vshift": {
                "description": "Reference value for the zero-equivalent value of the absolute value.",
                "key": "vshift",
                "label": "vshift",
                "type": "Float"
            }
        },
        "ports": {
            "input": {
                "caption": "input",
                "data_type": "Heightmap",
                "description": "Input heightmap.",
                "type": "input"
            },
            "output": {
                "caption": "output",
                "data_type": "Heightmap",
                "description": "Output heightmap.",
                "type": "output"
            }
        }
    },
    "AbsSmooth": {
        "category": "Math/Base",
        "description": "Apply a smooth absolute value function to every values. The smooth absolute operator computes the absolute value of an input while providing a smooth transition around zero, ensuring continuity and smoothness in the output.",
        "label": "AbsSmooth",
        "parameters": {
            "inverse": {
                "description": "Toggle inversion of the output values.",
                "key": "inverse",
                "label": "inverse",
                "type": "Bool"
            },
            "mu": {
                "description": "Smoothing intensity.",
                "key": "mu",
                "label": "mu",
                "type": "Float"
            },
            "remap": {
                "description": "Remap the operator's output to a specified range, defaulting to [0, 1].",
                "key": "remap",
                "label": "remap",
                "type": "Value range"
            },
            "vshift": {
                "description": "Reference value for the zero-equivalent value of the absolute value.",
                "key": "vshift",
                "label": "vshift",
                "type": "Float"
            }
        },
        "ports": {
            "input": {
                "caption": "input",
                "data_type": "Heightmap",
                "description": "Input heightmap.",
                "type": "input"
            },
            "output": {
                "caption": "output",
                "data_type": "Heightmap",
                "description": "Output heightmap.",
                "type": "output"
            }
        }
    },
    "AccumulationCurvature": {
        "category": "Features/Landform",
        "description": "Computes the accumulation curvature of a heightmap, indicating how terrain shape influences water flow. Positive values suggest converging flow (e.g., channels or valleys), while negative values indicate diverging flow (e.g., ridges or hilltops).",
        "label": "AccumulationCurvature",
        "parameters": {
            "post_gain": {
                "description": "Set the gain. Gain is a power law transformation altering the distribution of signal values, compressing or expanding certain regions of the signal depending on the exponent of the power law.",
                "key": "post_gain",
                "label": "post_gain",
                "type": "Float"
            },
            "post_inverse": {
                "description": "Inverts the output values after processing, flipping low and high values across the midrange.",
                "key": "post_inverse",
                "label": "post_inverse",
                "type": "Bool"
            },
            "post_remap": {
                "description": "Linearly remaps the output values to a specified target range (default is [0, 1]).",
                "key": "post_remap",
                "label": "post_remap",
                "type": "Value range"
            },
            "post_smoothing_radius": {
                "description": "Defines the radius for post-processing smoothing, determining the size of the neighborhood used to average local values and reduce high-frequency detail. A radius of 0 disables smoothing.",
                "key": "post_smoothing_radius",
                "label": "post_smoothing_radius",
                "type": "Float"
            },
            "radius": {
                "description": "Defines the filter radius relative to the domain size, controlling the scale of curvature analysis.",
                "key": "radius",
                "label": "radius",
                "type": "Float"
            }
        },
        "ports": {
            "input": {
                "caption": "input",
                "data_type": "Heightmap",
                "description": "Input heightmap used for accumulation curvature analysis.",
                "type": "input"
            },
            "output": {
                "caption": "output",
                "data_type": "Heightmap",
                "description": "Computed accumulation curvature of the input heightmap.",
                "type": "output"
            }
        }
    },
    "Badlands": {
        "category": "Primitive/Geological",
        "description": "No description available",
        "label": "Badlands",
        "parameters": {
            "angle": {
                "description": "No description",
                "key": "angle",
                "label": "angle",
                "type": "Float"
            },
            "base_noise_amp": {
                "description": "No description",
                "key": "base_noise_amp",
                "label": "base_noise_amp",
                "type": "Float"
            },
            "elevation": {
                "description": "No description",
                "key": "elevation",
                "label": "elevation",
                "type": "Float"
            },
            "k_smoothing": {
                "description": "No description",
                "key": "k_smoothing",
                "label": "k_smoothing",
                "type": "Float"
            },
            "kw": {
                "description": "No description",
                "key": "kw",
                "label": "kw",
                "type": "Wavenumber"
            },
            "octaves": {
                "description": "No description",
                "key": "octaves",
                "label": "octaves",
                "type": "Integer"
            },
            "post_gain": {
                "description": "No description",
                "key": "post_gain",
                "label": "post_gain",
                "type": "Float"
            },
            "post_inverse": {
                "description": "No description",
                "key": "post_inverse",
                "label": "post_inverse",
                "type": "Bool"
            },
            "post_remap": {
                "description": "No description",
                "key": "post_remap",
                "label": "post_remap",
                "type": "Value range"
            },
            "post_smoothing_radius": {
                "description": "No description",
                "key": "post_smoothing_radius",
                "label": "post_smoothing_radius",
                "type": "Float"
            },
            "rugosity": {
                "description": "No description",
                "key": "rugosity",
                "label": "rugosity",
                "type": "Float"
            },
            "seed": {
                "description": "No description",
                "key": "seed",
                "label": "seed",
                "type": "Random seed number"
            }
        },
        "ports": {
            "dx": {
                "caption": "dx",
                "data_type": "Heightmap",
                "description": "No description",
                "type": "input"
            },
            "dy": {
                "caption": "dy",
                "data_type": "Heightmap",
                "description": "No description",
                "type": "input"
            },
            "envelope": {
                "caption": "envelope",
                "data_type": "Heightmap",
                "description": "No description",
                "type": "input"
            },
            "out": {
                "caption": "out",
                "data_type": "Heightmap",
                "description": "No description",
                "type": "output"
            }
        }
    },
    "BasaltField": {
        "category": "Primitive/Geological",
        "description": "Generates a synthetic procedural terrain inspired by basaltic landforms. Credit: Ian Fontova.",
        "label": "BasaltField",
        "parameters": {
            "flatten_activate": {
                "description": "No description",
                "key": "flatten_activate",
                "label": "flatten_activate",
                "type": "Bool"
            },
            "flatten_amp": {
                "description": "No description",
                "key": "flatten_amp",
                "label": "flatten_amp",
                "type": "Float"
            },
            "flatten_kw_ratio": {
                "description": "No description",
                "key": "flatten_kw_ratio",
                "label": "flatten_kw_ratio",
                "type": "Float"
            },
            "kw": {
                "description": "Noise wavenumbers (kx, ky) for each directions.",
                "key": "kw",
                "label": "kw",
                "type": "Wavenumber"
            },
            "large_scale_amp": {
                "description": "No description",
                "key": "large_scale_amp",
                "label": "large_scale_amp",
                "type": "Float"
            },
            "large_scale_gain": {
                "description": "No description",
                "key": "large_scale_gain",
                "label": "large_scale_gain",
                "type": "Float"
            },
            "large_scale_warp_amp": {
                "description": "No description",
                "key": "large_scale_warp_amp",
                "label": "large_scale_warp_amp",
                "type": "Float"
            },
            "medium_scale_amp": {
                "description": "No description",
                "key": "medium_scale_amp",
                "label": "medium_scale_amp",
                "type": "Float"
            },
            "medium_scale_gain": {
                "description": "No description",
                "key": "medium_scale_gain",
                "label": "medium_scale_gain",
                "type": "Float"
            },
            "medium_scale_kw_ratio": {
                "description": "No description",
                "key": "medium_scale_kw_ratio",
                "label": "medium_scale_kw_ratio",
                "type": "Float"
            },
            "medium_scale_warp_amp": {
                "description": "No description",
                "key": "medium_scale_warp_amp",
                "label": "medium_scale_warp_amp",
                "type": "Float"
            },
            "post_gain": {
                "description": "Set the gain. Gain is a power law transformation altering the distribution of signal values, compressing or expanding certain regions of the signal depending on the exponent of the power law.",
                "key": "post_gain",
                "label": "post_gain",
                "type": "Float"
            },
            "post_inverse": {
                "description": "Inverts the output values after processing, flipping low and high values across the midrange.",
                "key": "post_inverse",
                "label": "post_inverse",
                "type": "Bool"
            },
            "post_remap": {
                "description": "Linearly remaps the output values to a specified target range (default is [0, 1]).",
                "key": "post_remap",
                "label": "post_remap",
                "type": "Value range"
            },
            "post_smoothing_radius": {
                "description": "Defines the radius for post-processing smoothing, determining the size of the neighborhood used to average local values and reduce high-frequency detail. A radius of 0 disables smoothing.",
                "key": "post_smoothing_radius",
                "label": "post_smoothing_radius",
                "type": "Float"
            },
            "rugosity_amp": {
                "description": "No description",
                "key": "rugosity_amp",
                "label": "rugosity_amp",
                "type": "Float"
            },
            "rugosity_kw_ratio": {
                "description": "No description",
                "key": "rugosity_kw_ratio",
                "label": "rugosity_kw_ratio",
                "type": "Float"
            },
            "seed": {
                "description": "Random seed number.",
                "key": "seed",
                "label": "seed",
                "type": "Random seed number"
            },
            "small_scale_amp": {
                "description": "No description",
                "key": "small_scale_amp",
                "label": "small_scale_amp",
                "type": "Float"
            },
            "small_scale_kw_ratio": {
                "description": "No description",
                "key": "small_scale_kw_ratio",
                "label": "small_scale_kw_ratio",
                "type": "Float"
            },
            "small_scale_overlay_amp": {
                "description": "No description",
                "key": "small_scale_overlay_amp",
                "label": "small_scale_overlay_amp",
                "type": "Float"
            },
            "warp_kw": {
                "description": "No description",
                "key": "warp_kw",
                "label": "warp_kw",
                "type": "Float"
            }
        },
        "ports": {
            "dx": {
                "caption": "dx",
                "data_type": "Heightmap",
                "description": "Displacement with respect to the domain size (x-direction).",
                "type": "input"
            },
            "dy": {
                "caption": "dy",
                "data_type": "Heightmap",
                "description": "Displacement with respect to the domain size (y-direction).",
                "type": "input"
            },
            "envelope": {
                "caption": "envelope",
                "data_type": "Heightmap",
                "description": "Output noise amplitude envelope.",
                "type": "input"
            },
            "out": {
                "caption": "out",
                "data_type": "Heightmap",
                "description": "The generated heightmap from brush strokes.",
                "type": "output"
            }
        }
    },
    "Blend": {
        "category": "Operator/Blend",
        "description": "The Blend operator takes two input heightmaps.",
        "label": "Blend",
        "parameters": {
            "blending_method": {
                "description": "Blending method. Available values: add, exclusion, gradients, maximum, maximum_smooth, minimum, minimum_smooth, multiply, multiply_add, negate, overlay, soft, substract.",
                "key": "blending_method",
                "label": "blending_method",
                "type": "Enumeration"
            },
            "inverse": {
                "description": "Toggle inversion of the output values.",
                "key": "inverse",
                "label": "inverse",
                "type": "Bool"
            },
            "k": {
                "description": "Smoothing intensity (if any).",
                "key": "k",
                "label": "k",
                "type": "Float"
            },
            "radius": {
                "description": "Filter radius with respect to the domain size (if any).",
                "key": "radius",
                "label": "radius",
                "type": "Float"
            },
            "remap": {
                "description": "Remap the operator's output to a specified range, defaulting to [0, 1].",
                "key": "remap",
                "label": "remap",
                "type": "Value range"
            }
        },
        "ports": {
            "input 1": {
                "caption": "input 1",
                "data_type": "Heightmap",
                "description": "Input heightmap.",
                "type": "input"
            },
            "input 2": {
                "caption": "input 2",
                "data_type": "Heightmap",
                "description": "Input heightmap.",
                "type": "input"
            },
            "output": {
                "caption": "output",
                "data_type": "Heightmap",
                "description": "Output heightmap.",
                "type": "output"
            }
        }
    },
    "BlendPoissonBf": {
        "category": "Operator/Blend",
        "description": "TODO",
        "label": "BlendPoissonBf",
        "parameters": {
            "inverse": {
                "description": "Toggle inversion of the output values.",
                "key": "inverse",
                "label": "inverse",
                "type": "Bool"
            },
            "iterations": {
                "description": "Number of solver iterations for the Poisson blending process.",
                "key": "iterations",
                "label": "iterations",
                "type": "Integer"
            },
            "remap": {
                "description": "Remap the operator's output to a specified range, defaulting to [0, 1].",
                "key": "remap",
                "label": "remap",
                "type": "Value range"
            }
        },
        "ports": {
            "input 1": {
                "caption": "input 1",
                "data_type": "Heightmap",
                "description": "Primary heightmap input.",
                "type": "input"
            },
            "input 2": {
                "caption": "input 2",
                "data_type": "Heightmap",
                "description": "Secondary heightmap input for blending.",
                "type": "input"
            },
            "mask": {
                "caption": "mask",
                "data_type": "Heightmap",
                "description": "Mask heightmap controlling blending regions.",
                "type": "input"
            },
            "output": {
                "caption": "output",
                "data_type": "Heightmap",
                "description": "Resulting heightmap after Poisson blending.",
                "type": "output"
            }
        }
    },
    "Border": {
        "category": "Operator/Morphology",
        "description": "Highlights terrain boundaries by subtracting the eroded version of a DEM from the original. Useful for detecting ridges, valleys, and sharp elevation transitions in terrain analysis.",
        "label": "Border",
        "parameters": {
            "GPU": {
                "description": "Toogle GPU acceleration on or off.",
                "key": "GPU",
                "label": "GPU",
                "type": "Bool"
            },
            "radius": {
                "description": "Filter radius with respect to the domain size.",
                "key": "radius",
                "label": "radius",
                "type": "Float"
            },
            "remap": {
                "description": "Remap the operator's output to a specified range, defaulting to [0, 1].",
                "key": "remap",
                "label": "remap",
                "type": "Value range"
            }
        },
        "ports": {
            "input": {
                "caption": "input",
                "data_type": "Heightmap",
                "description": "Heightmap input on which the morphological border operation is applied.",
                "type": "input"
            },
            "output": {
                "caption": "output",
                "data_type": "Heightmap",
                "description": "Resulting heightmap after computing the morphological border.",
                "type": "output"
            }
        }
    },
    "Broadcast": {
        "category": "Routing",
        "description": "Makes the input heightmap available to other graph nodes using a shared tag.",
        "label": "Broadcast",
        "parameters": {
            "tag": {
                "description": "Identifier used to reference this heightmap in other graph nodes.",
                "key": "tag",
                "label": "tag",
                "type": "String"
            }
        },
        "ports": {
            "input": {
                "caption": "input",
                "data_type": "Heightmap",
                "description": "Heightmap data to be shared with other graph nodes.",
                "type": "input"
            },
            "thru": {
                "caption": "thru",
                "data_type": "Heightmap",
                "description": "Pass-through of the input heightmap, unchanged.",
                "type": "output"
            }
        }
    },
    "Brush": {
        "category": "Primitive/Authoring",
        "description": "A manual brush tool for directly painting heightmaps, allowing interactive terrain editing.",
        "label": "Brush",
        "parameters": {
            "hmap": {
                "description": "The heightmap data representing the painted terrain.",
                "key": "hmap",
                "label": "Heightmap",
                "type": "Array"
            },
            "post_gain": {
                "description": "Set the gain. Gain is a power law transformation altering the distribution of signal values, compressing or expanding certain regions of the signal depending on the exponent of the power law.",
                "key": "post_gain",
                "label": "post_gain",
                "type": "Float"
            },
            "post_inverse": {
                "description": "Inverts the output values after processing, flipping low and high values across the midrange.",
                "key": "post_inverse",
                "label": "post_inverse",
                "type": "Bool"
            },
            "post_remap": {
                "description": "Linearly remaps the output values to a specified target range (default is [0, 1]).",
                "key": "post_remap",
                "label": "post_remap",
                "type": "Value range"
            },
            "post_smoothing_radius": {
                "description": "Defines the radius for post-processing smoothing, determining the size of the neighborhood used to average local values and reduce high-frequency detail. A radius of 0 disables smoothing.",
                "key": "post_smoothing_radius",
                "label": "post_smoothing_radius",
                "type": "Float"
            }
        },
        "ports": {
            "out": {
                "caption": "out",
                "data_type": "Heightmap",
                "description": "The generated heightmap from brush strokes.",
                "type": "output"
            }
        }
    },
    "Bump": {
        "category": "Primitive/Function",
        "description": "Bump generates a smooth transitions between zero-valued boundaries and the center of the domain.",
        "label": "Bump",
        "parameters": {
            "center": {
                "description": "Reference center within the heightmap.",
                "key": "center",
                "label": "center",
                "type": "Vec2Float"
            },
            "gain": {
                "description": "Shape control parameter.",
                "key": "gain",
                "label": "gain",
                "type": "Float"
            },
            "post_gain": {
                "description": "Set the gain. Gain is a power law transformation altering the distribution of signal values, compressing or expanding certain regions of the signal depending on the exponent of the power law.",
                "key": "post_gain",
                "label": "post_gain",
                "type": "Float"
            },
            "post_inverse": {
                "description": "Inverts the output values after processing, flipping low and high values across the midrange.",
                "key": "post_inverse",
                "label": "post_inverse",
                "type": "Bool"
            },
            "post_remap": {
                "description": "Linearly remaps the output values to a specified target range (default is [0, 1]).",
                "key": "post_remap",
                "label": "post_remap",
                "type": "Value range"
            },
            "post_smoothing_radius": {
                "description": "Defines the radius for post-processing smoothing, determining the size of the neighborhood used to average local values and reduce high-frequency detail. A radius of 0 disables smoothing.",
                "key": "post_smoothing_radius",
                "label": "post_smoothing_radius",
                "type": "Float"
            }
        },
        "ports": {
            "control": {
                "caption": "control",
                "data_type": "Heightmap",
                "description": "Control parameter, acts as a multiplier for the weight parameter.",
                "type": "input"
            },
            "dx": {
                "caption": "dx",
                "data_type": "Heightmap",
                "description": "Displacement with respect to the domain size (x-direction).",
                "type": "input"
            },
            "dy": {
                "caption": "dy",
                "data_type": "Heightmap",
                "description": "Displacement with respect to the domain size (y-direction).",
                "type": "input"
            },
            "envelope": {
                "caption": "envelope",
                "data_type": "Heightmap",
                "description": "Output noise amplitude envelope.",
                "type": "input"
            },
            "output": {
                "caption": "output",
                "data_type": "Heightmap",
                "description": "Bump heightmap.",
                "type": "output"
            }
        }
    },
    "BumpLorentzian": {
        "category": "Primitive/Function",
        "description": "No description available",
        "label": "BumpLorentzian",
        "parameters": {
            "center": {
                "description": "Reference center within the heightmap.",
                "key": "center",
                "label": "center",
                "type": "Vec2Float"
            },
            "post_gain": {
                "description": "Set the gain. Gain is a power law transformation altering the distribution of signal values, compressing or expanding certain regions of the signal depending on the exponent of the power law.",
                "key": "post_gain",
                "label": "post_gain",
                "type": "Float"
            },
            "post_inverse": {
                "description": "Inverts the output values after processing, flipping low and high values across the midrange.",
                "key": "post_inverse",
                "label": "post_inverse",
                "type": "Bool"
            },
            "post_remap": {
                "description": "Linearly remaps the output values to a specified target range (default is [0, 1]).",
                "key": "post_remap",
                "label": "post_remap",
                "type": "Value range"
            },
            "post_smoothing_radius": {
                "description": "Defines the radius for post-processing smoothing, determining the size of the neighborhood used to average local values and reduce high-frequency detail. A radius of 0 disables smoothing.",
                "key": "post_smoothing_radius",
                "label": "post_smoothing_radius",
                "type": "Float"
            },
            "radius": {
                "description": "Filter radius with respect to the domain size.",
                "key": "radius",
                "label": "radius",
                "type": "Float"
            },
            "width_factor": {
                "description": "No description",
                "key": "width_factor",
                "label": "width_factor",
                "type": "Float"
            }
        },
        "ports": {
            "control": {
                "caption": "control",
                "data_type": "Heightmap",
                "description": "Control parameter, acts as a multiplier for the weight parameter.",
                "type": "input"
            },
            "dx": {
                "caption": "dx",
                "data_type": "Heightmap",
                "description": "Displacement with respect to the domain size (x-direction).",
                "type": "input"
            },
            "dy": {
                "caption": "dy",
                "data_type": "Heightmap",
                "description": "Displacement with respect to the domain size (y-direction).",
                "type": "input"
            },
            "envelope": {
                "caption": "envelope",
                "data_type": "Heightmap",
                "description": "Output noise amplitude envelope.",
                "type": "input"
            },
            "output": {
                "caption": "output",
                "data_type": "Heightmap",
                "description": "Filtered heightmap.",
                "type": "output"
            }
        }
    },
    "Caldera": {
        "category": "Primitive/Geological",
        "description": "Caldera generates a volcanic caldera landscape.",
        "label": "Caldera",
        "parameters": {
            "center": {
                "description": "Reference center within the heightmap.",
                "key": "center",
                "label": "center",
                "type": "Vec2Float"
            },
            "inverse": {
                "description": "Toggle inversion of the output values.",
                "key": "inverse",
                "label": "inverse",
                "type": "Bool"
            },
            "noise_r_amp": {
                "description": "Noise amplitude for the radial displacement.",
                "key": "noise_r_amp",
                "label": "noise_r_amp",
                "type": "Float"
            },
            "noise_ratio_z": {
                "description": "Noise amplitude for the vertical displacement.",
                "key": "noise_ratio_z",
                "label": "noise_ratio_z",
                "type": "Float"
            },
            "radius": {
                "description": "Crater radius.",
                "key": "radius",
                "label": "radius",
                "type": "Float"
            },
            "remap": {
                "description": "Remap the operator's output to a specified range, defaulting to [0, 1].",
                "key": "remap",
                "label": "remap",
                "type": "Value range"
            },
            "sigma_inner": {
                "description": "Crater inner lip half-width.",
                "key": "sigma_inner",
                "label": "sigma_inner",
                "type": "Float"
            },
            "sigma_outer": {
                "description": "Crater outer lip half-width.",
                "key": "sigma_outer",
                "label": "sigma_outer",
                "type": "Float"
            },
            "z_bottom": {
                "description": "Crater bottom elevation.",
                "key": "z_bottom",
                "label": "z_bottom",
                "type": "Float"
            }
        },
        "ports": {
            "dr": {
                "caption": "dr",
                "data_type": "Heightmap",
                "description": "Displacement with respect to the domain size (normal direction).",
                "type": "input"
            },
            "output": {
                "caption": "output",
                "data_type": "Heightmap",
                "description": "Caldera heightmap.",
                "type": "output"
            }
        }
    },
    "Clamp": {
        "category": "Filter/Range",
        "description": "Clamp restrict a value within a specified range. Essentially, it ensures that a value does not exceed a defined upper limit or fall below a defined lower limit.",
        "label": "Clamp",
        "parameters": {
            "clamp": {
                "description": "Clamping range.",
                "key": "clamp",
                "label": "clamp",
                "type": "Value range"
            },
            "k_max": {
                "description": "Upper bound smoothing intensity.",
                "key": "k_max",
                "label": "k_max",
                "type": "Float"
            },
            "k_min": {
                "description": "Lower bound smoothing intensity.",
                "key": "k_min",
                "label": "k_min",
                "type": "Float"
            },
            "post_gain": {
                "description": "Set the gain. Gain is a power law transformation altering the distribution of signal values, compressing or expanding certain regions of the signal depending on the exponent of the power law.",
                "key": "post_gain",
                "label": "post_gain",
                "type": "Float"
            },
            "post_inverse": {
                "description": "Inverts the output values after processing, flipping low and high values across the midrange.",
                "key": "post_inverse",
                "label": "post_inverse",
                "type": "Bool"
            },
            "post_mix": {
                "description": "Mixing factor for blending input and output values. A value of 0 uses only the input, 1 uses only the output, and intermediate values perform a linear interpolation.",
                "key": "post_mix",
                "label": "post_mix",
                "type": "Float"
            },
            "post_mix_method": {
                "description": "Method used to combine input and output values. Options include linear interpolation (default), min, max, smooth min, smooth max, add, and subtract.",
                "key": "post_mix_method",
                "label": "post_mix_method",
                "type": "Enumeration"
            },
            "post_remap": {
                "description": "Linearly remaps the output values to a specified target range (default is [0, 1]).",
                "key": "post_remap",
                "label": "post_remap",
                "type": "Value range"
            },
            "post_smoothing_radius": {
                "description": "Defines the radius for post-processing smoothing, determining the size of the neighborhood used to average local values and reduce high-frequency detail. A radius of 0 disables smoothing.",
                "key": "post_smoothing_radius",
                "label": "post_smoothing_radius",
                "type": "Float"
            },
            "remap": {
                "description": "Remap the operator's output to a specified range, defaulting to [0, 1].",
                "key": "remap",
                "label": "remap",
                "type": "Bool"
            },
            "smooth_max": {
                "description": "Activate smooth clamping for the upper bound.",
                "key": "smooth_max",
                "label": "smooth_max",
                "type": "Bool"
            },
            "smooth_min": {
                "description": "Activate smooth clamping for the lower bound.",
                "key": "smooth_min",
                "label": "smooth_min",
                "type": "Bool"
            }
        },
        "ports": {
            "input": {
                "caption": "input",
                "data_type": "Heightmap",
                "description": "Input heightmap.",
                "type": "input"
            },
            "output": {
                "caption": "output",
                "data_type": "Heightmap",
                "description": "Clamped heightmap.",
                "type": "output"
            }
        }
    },
    "Closing": {
        "category": "Operator/Morphology",
        "description": "Closing is a combination of dilation followed by erosion. It is primarily used for closing small holes or gaps in mask.",
        "label": "Closing",
        "parameters": {
            "GPU": {
                "description": "Toogle GPU acceleration on or off.",
                "key": "GPU",
                "label": "GPU",
                "type": "Bool"
            },
            "radius": {
                "description": "Filter radius with respect to the domain size.",
                "key": "radius",
                "label": "radius",
                "type": "Float"
            }
        },
        "ports": {
            "input": {
                "caption": "input",
                "data_type": "Heightmap",
                "description": "Input heightmap.",
                "type": "input"
            },
            "output": {
                "caption": "output",
                "data_type": "Heightmap",
                "description": "Dilated heightmap.",
                "type": "output"
            }
        }
    },
    "Cloud": {
        "category": "Geometry/Cloud",
        "description": "Set of points.",
        "label": "Cloud",
        "parameters": {
            "cloud": {
                "description": "Cloud data.",
                "key": "cloud",
                "label": "cloud",
                "type": "Cloud"
            }
        },
        "ports": {
            "background": {
                "caption": "background",
                "data_type": "Heightmap",
                "description": "Input heightmap.",
                "type": "input"
            },
            "cloud": {
                "caption": "cloud",
                "data_type": "Cloud",
                "description": "Set of points (x, y) and elevations z.",
                "type": "output"
            }
        }
    },
    "CloudFromCsv": {
        "category": "Geometry/Cloud",
        "description": "No description available",
        "label": "CloudFromCsv",
        "parameters": {
            "fname": {
                "description": "Export file name.",
                "key": "fname",
                "label": "fname",
                "type": "Filename"
            }
        },
        "ports": {
            "cloud": {
                "caption": "cloud",
                "data_type": "Cloud",
                "description": "Set of points (x, y) and elevations z.",
                "type": "output"
            }
        }
    },
    "CloudLattice": {
        "category": "Geometry/Cloud",
        "description": "Generate a grid lattice set of points.",
        "label": "CloudLattice",
        "parameters": {
            "jitter_ratio": {
                "description": "Point jittering (noise) in x and y directions.",
                "key": "jitter_ratio",
                "label": "jitter_ratio",
                "type": "Wavenumber"
            },
            "npoints": {
                "description": "Number of points.",
                "key": "npoints",
                "label": "npoints",
                "type": "Integer"
            },
            "remap": {
                "description": "Remap the operator's output to a specified range, defaulting to [0, 1].",
                "key": "remap",
                "label": "remap",
                "type": "Value range"
            },
            "seed": {
                "description": "Random seed number",
                "key": "seed",
                "label": "seed",
                "type": "Random seed number"
            },
            "stagger_ratio": {
                "description": "Point offset in x and y directions for every two lines or columns.",
                "key": "stagger_ratio",
                "label": "stagger_ratio",
                "type": "Wavenumber"
            }
        },
        "ports": {
            "cloud": {
                "caption": "cloud",
                "data_type": "Cloud",
                "description": "Set of points (x, y) and elevations z.",
                "type": "output"
            }
        }
    },
    "CloudMerge": {
        "category": "Geometry/Cloud",
        "description": "CloudMerge merges two clouds into a single one.",
        "label": "CloudMerge",
        "parameters": null,
        "ports": {
            "cloud": {
                "caption": "cloud",
                "data_type": "Cloud",
                "description": "Merged cloud.",
                "type": "output"
            },
            "cloud1": {
                "caption": "cloud1",
                "data_type": "Cloud",
                "description": "Input cloud.",
                "type": "input"
            },
            "cloud2": {
                "caption": "cloud2",
                "data_type": "Cloud",
                "description": "Input cloud.",
                "type": "input"
            }
        }
    },
    "CloudRandom": {
        "category": "Geometry/Cloud",
        "description": "Random point set: Generates a specified number of uniformly distributed random points, each with a value in [0, 1], using one of several methods: fully random (pure randomness, may cause clustering), Halton sequence (quasi-random, evenly distributed), Hammersley sequence (optimized, well-spaced for fixed point counts), or Latin hypercube sampling (stratified, uniform coverage).",
        "label": "CloudRandom",
        "parameters": {
            "method": {
                "description": "Generation method.",
                "key": "method",
                "label": "method",
                "type": "Enumeration"
            },
            "npoints": {
                "description": "Number of points.",
                "key": "npoints",
                "label": "npoints",
                "type": "Integer"
            },
            "remap": {
                "description": "Remap the point values to a specified range, defaulting to [0, 1].",
                "key": "remap",
                "label": "remap",
                "type": "Value range"
            },
            "seed": {
                "description": "Random seed number.",
                "key": "seed",
                "label": "seed",
                "type": "Random seed number"
            }
        },
        "ports": {
            "cloud": {
                "caption": "cloud",
                "data_type": "Cloud",
                "description": "Set of points (x, y) and elevations z.",
                "type": "output"
            }
        }
    },
    "CloudRandomDensity": {
        "category": "Geometry/Cloud",
        "description": "CloudRandomDensity: Generates random points based on a 2D density field in [0, 1], where the value at each location represents its density, using a fully random distribution; each point is also assigned a random value in [0, 1].",
        "label": "CloudRandomDensity",
        "parameters": {
            "npoints": {
                "description": "Number of points.",
                "key": "npoints",
                "label": "npoints",
                "type": "Integer"
            },
            "remap": {
                "description": "Remap the point values output to a specified range, defaulting to [0, 1].",
                "key": "remap",
                "label": "remap",
                "type": "Value range"
            },
            "seed": {
                "description": "Random seed number.",
                "key": "seed",
                "label": "seed",
                "type": "Random seed number"
            }
        },
        "ports": {
            "cloud": {
                "caption": "cloud",
                "data_type": "Cloud",
                "description": "Set of points (x, y) and elevations z.",
                "type": "output"
            },
            "density": {
                "caption": "density",
                "data_type": "Heightmap",
                "description": "Output noise amplitude envelope.",
                "type": "input"
            }
        }
    },
    "CloudRandomDistance": {
        "category": "Geometry/Cloud",
        "description": "No description available",
        "label": "CloudRandomDistance",
        "parameters": {
            "distance_max": {
                "description": "No description",
                "key": "distance_max",
                "label": "distance_max",
                "type": "Float"
            },
            "distance_min": {
                "description": "No description",
                "key": "distance_min",
                "label": "distance_min",
                "type": "Float"
            },
            "remap": {
                "description": "Remap the point values to a specified range, defaulting to [0, 1].",
                "key": "remap",
                "label": "remap",
                "type": "Value range"
            },
            "seed": {
                "description": "No description",
                "key": "seed",
                "label": "seed",
                "type": "Random seed number"
            }
        },
        "ports": {
            "cloud": {
                "caption": "cloud",
                "data_type": "Cloud",
                "description": "Set of points (x, y) and elevations z.",
                "type": "output"
            },
            "density": {
                "caption": "density",
                "data_type": "Heightmap",
                "description": "Output noise amplitude envelope.",
                "type": "input"
            }
        }
    },
    "CloudRandomPowerLaw": {
        "category": "Geometry/Cloud",
        "description": "No description available",
        "label": "CloudRandomPowerLaw",
        "parameters": {
            "alpha": {
                "description": "No description",
                "key": "alpha",
                "label": "alpha",
                "type": "Float"
            },
            "distance_max": {
                "description": "No description",
                "key": "distance_max",
                "label": "distance_max",
                "type": "Float"
            },
            "distance_min": {
                "description": "No description",
                "key": "distance_min",
                "label": "distance_min",
                "type": "Float"
            },
            "remap": {
                "description": "Remap the point values to a specified range, defaulting to [0, 1].",
                "key": "remap",
                "label": "remap",
                "type": "Value range"
            },
            "seed": {
                "description": "Random seed number.",
                "key": "seed",
                "label": "seed",
                "type": "Random seed number"
            }
        },
        "ports": {
            "cloud": {
                "caption": "cloud",
                "data_type": "Cloud",
                "description": "Set of points (x, y) and elevations z.",
                "type": "output"
            }
        }
    },
    "CloudRandomWeibull": {
        "category": "Geometry/Cloud",
        "description": "No description available",
        "label": "CloudRandomWeibull",
        "parameters": {
            "distance_min": {
                "description": "No description",
                "key": "distance_min",
                "label": "distance_min",
                "type": "Float"
            },
            "k": {
                "description": "Smoothing intensity (if any).",
                "key": "k",
                "label": "k",
                "type": "Float"
            },
            "lambda": {
                "description": "No description",
                "key": "lambda",
                "label": "lambda",
                "type": "Float"
            },
            "remap": {
                "description": "Remap the point values to a specified range, defaulting to [0, 1].",
                "key": "remap",
                "label": "remap",
                "type": "Value range"
            },
            "seed": {
                "description": "Random seed number.",
                "key": "seed",
                "label": "seed",
                "type": "Random seed number"
            }
        },
        "ports": {
            "cloud": {
                "caption": "cloud",
                "data_type": "Cloud",
                "description": "Set of points (x, y) and elevations z.",
                "type": "output"
            }
        }
    },
    "CloudRemapValues": {
        "category": "Geometry/Cloud",
        "description": "CloudRemapValues remap the range of the cloud point values.",
        "label": "CloudRemapValues",
        "parameters": {
            "remap": {
                "description": "Remap the operator's output to a specified range, defaulting to [0, 1].",
                "key": "remap",
                "label": "remap",
                "type": "Value range"
            }
        },
        "ports": {
            "input": {
                "caption": "input",
                "data_type": "Cloud",
                "description": "Input cloud.",
                "type": "input"
            },
            "output": {
                "caption": "output",
                "data_type": "Cloud",
                "description": "Output cloud with new value range.",
                "type": "output"
            }
        }
    },
    "CloudSDF": {
        "category": "Geometry/Cloud",
        "description": "CloudSDF evaluates the signed distance function of a set of points. It assigns a signed distance value to every point in space.",
        "label": "CloudSDF",
        "parameters": {
            "post_gain": {
                "description": "Set the gain. Gain is a power law transformation altering the distribution of signal values, compressing or expanding certain regions of the signal depending on the exponent of the power law.",
                "key": "post_gain",
                "label": "post_gain",
                "type": "Float"
            },
            "post_inverse": {
                "description": "Inverts the output values after processing, flipping low and high values across the midrange.",
                "key": "post_inverse",
                "label": "post_inverse",
                "type": "Bool"
            },
            "post_remap": {
                "description": "Linearly remaps the output values to a specified target range (default is [0, 1]).",
                "key": "post_remap",
                "label": "post_remap",
                "type": "Value range"
            },
            "post_smoothing_radius": {
                "description": "Defines the radius for post-processing smoothing, determining the size of the neighborhood used to average local values and reduce high-frequency detail. A radius of 0 disables smoothing.",
                "key": "post_smoothing_radius",
                "label": "post_smoothing_radius",
                "type": "Float"
            }
        },
        "ports": {
            "cloud": {
                "caption": "cloud",
                "data_type": "Cloud",
                "description": "Input cloud.",
                "type": "input"
            },
            "dx": {
                "caption": "dx",
                "data_type": "Heightmap",
                "description": "Displacement with respect to the domain size (x-direction).",
                "type": "input"
            },
            "dy": {
                "caption": "dy",
                "data_type": "Heightmap",
                "description": "Displacement with respect to the domain size (y-direction).",
                "type": "input"
            },
            "sdf": {
                "caption": "sdf",
                "data_type": "Heightmap",
                "description": "Signed distance as an heightmap.",
                "type": "output"
            }
        }
    },
    "CloudSetValuesFromBorderDistance": {
        "category": "Geometry/Cloud",
        "description": "No description available",
        "label": "CloudSetValuesFromBorderDistance",
        "parameters": null,
        "ports": {
            "cloud": {
                "caption": "cloud",
                "data_type": "Cloud",
                "description": "Set of points (x, y) and elevations z.",
                "type": "input"
            },
            "out": {
                "caption": "out",
                "data_type": "Cloud",
                "description": "No description",
                "type": "output"
            }
        }
    },
    "CloudSetValuesFromHeightmap": {
        "category": "Geometry/Cloud",
        "description": "No description available",
        "label": "CloudSetValuesFromHeightmap",
        "parameters": null,
        "ports": {
            "cloud": {
                "caption": "cloud",
                "data_type": "Cloud",
                "description": "Set of points (x, y) and elevations z.",
                "type": "input"
            },
            "heightmap": {
                "caption": "heightmap",
                "data_type": "Heightmap",
                "description": "No description",
                "type": "input"
            },
            "out": {
                "caption": "out",
                "data_type": "Cloud",
                "description": "Set of points (x, y) and elevations z.",
                "type": "output"
            }
        }
    },
    "CloudSetValuesFromMinDistance": {
        "category": "Geometry/Cloud",
        "description": "No description available",
        "label": "CloudSetValuesFromMinDistance",
        "parameters": null,
        "ports": {
            "cloud": {
                "caption": "cloud",
                "data_type": "Cloud",
                "description": "No description",
                "type": "input"
            },
            "out": {
                "caption": "out",
                "data_type": "Cloud",
                "description": "No description",
                "type": "output"
            }
        }
    },
    "CloudShuffle": {
        "category": "Geometry/Cloud",
        "description": "No description available",
        "label": "CloudShuffle",
        "parameters": {
            "dv": {
                "description": "No description",
                "key": "dv",
                "label": "dv",
                "type": "Float"
            },
            "dx": {
                "description": "No description",
                "key": "dx",
                "label": "dx",
                "type": "Float"
            },
            "dy": {
                "description": "No description",
                "key": "dy",
                "label": "dy",
                "type": "Float"
            },
            "seed": {
                "description": "No description",
                "key": "seed",
                "label": "seed",
                "type": "Random seed number"
            }
        },
        "ports": {
            "input": {
                "caption": "input",
                "data_type": "Cloud",
                "description": "No description",
                "type": "input"
            },
            "output": {
                "caption": "output",
                "data_type": "Cloud",
                "description": "No description",
                "type": "output"
            }
        }
    },
    "CloudToArrayInterp": {
        "category": "Geometry/Cloud",
        "description": "CloudToArrayInterp generates a smooth and continuous 2D elevation map from a set of scattered points using Delaunay linear interpolation.",
        "label": "CloudToArrayInterp",
        "parameters": null,
        "ports": {
            "cloud": {
                "caption": "cloud",
                "data_type": "Cloud",
                "description": "Set of points (x, y) and elevations z.",
                "type": "input"
            },
            "dx": {
                "caption": "dx",
                "data_type": "Heightmap",
                "description": "Displacement with respect to the domain size (x-direction).",
                "type": "input"
            },
            "dy": {
                "caption": "dy",
                "data_type": "Heightmap",
                "description": "Displacement with respect to the domain size (y-direction).",
                "type": "input"
            },
            "heightmap": {
                "caption": "heightmap",
                "data_type": "Heightmap",
                "description": "Interpolated heightmap.",
                "type": "output"
            }
        }
    },
    "CloudToPath": {
        "category": "Geometry/Cloud",
        "description": "CloudToPath convert a Cloud to a Path.",
        "label": "CloudToPath",
        "parameters": {
            "closed": {
                "description": "Decides whether the path is open and closed on itself.",
                "key": "closed",
                "label": "closed",
                "type": "Bool"
            },
            "reorder_nns": {
                "description": "Decides whether the path points are reordered using a nearest neighbor search.",
                "key": "reorder_nns",
                "label": "reorder_nns",
                "type": "Bool"
            }
        },
        "ports": {
            "cloud": {
                "caption": "cloud",
                "data_type": "Cloud",
                "description": "Input cloud.",
                "type": "input"
            },
            "path": {
                "caption": "path",
                "data_type": "Path",
                "description": "Output path.",
                "type": "output"
            }
        }
    },
    "ColorizeCmap": {
        "category": "Texture",
        "description": "ColorizeCmap generates a texture based on colormaps to assign colors to data values.",
        "label": "ColorizeCmap",
        "parameters": {
            "clamp_alpha": {
                "description": "Clamp to [0, 1] to input alpha map.",
                "key": "clamp_alpha",
                "label": "clamp_alpha",
                "type": "Bool"
            },
            "colormap": {
                "description": "Color mapping selection.",
                "key": "colormap",
                "label": "colormap",
                "type": "Enumeration"
            },
            "reverse_alpha": {
                "description": "Reverse the input alpha map.",
                "key": "reverse_alpha",
                "label": "reverse_alpha",
                "type": "Bool"
            },
            "reverse_colormap": {
                "description": "Reverse the colormap range.",
                "key": "reverse_colormap",
                "label": "reverse_colormap",
                "type": "Bool"
            },
            "saturate_alpha": {
                "description": "TODO",
                "key": "saturate_alpha",
                "label": "saturate_alpha",
                "type": "Value range"
            },
            "saturate_input": {
                "description": "TODO",
                "key": "saturate_input",
                "label": "saturate_input",
                "type": "Value range"
            }
        },
        "ports": {
            "alpha": {
                "caption": "alpha",
                "data_type": "Heightmap",
                "description": "Texture alpha map.",
                "type": "input"
            },
            "level": {
                "caption": "level",
                "data_type": "Heightmap",
                "description": "Data values for color selection.",
                "type": "input"
            },
            "noise": {
                "caption": "noise",
                "data_type": "Heightmap",
                "description": "TODO",
                "type": "input"
            },
            "texture": {
                "caption": "texture",
                "data_type": "HeightmapRGBA",
                "description": "Texture (RGBA).",
                "type": "output"
            }
        }
    },
    "ColorizeGradient": {
        "category": "Texture",
        "description": "ColorizeGradient generates a texture based on colormaps to assign colors to data values.",
        "label": "ColorizeGradient",
        "parameters": {
            "clamp_alpha": {
                "description": "Clamp to [0, 1] to input alpha map.",
                "key": "clamp_alpha",
                "label": "clamp_alpha",
                "type": "Bool"
            },
            "gradient": {
                "description": "Colormap as a manually defined color gradient.",
                "key": "gradient",
                "label": "gradient",
                "type": "Color gradient"
            },
            "reverse_alpha": {
                "description": "Reverse the input alpha map.",
                "key": "reverse_alpha",
                "label": "reverse_alpha",
                "type": "Bool"
            },
            "reverse_colormap": {
                "description": "Reverse the colormap range.",
                "key": "reverse_colormap",
                "label": "reverse_colormap",
                "type": "Bool"
            }
        },
        "ports": {
            "alpha": {
                "caption": "alpha",
                "data_type": "Heightmap",
                "description": "Texture alpha map.",
                "type": "input"
            },
            "level": {
                "caption": "level",
                "data_type": "Heightmap",
                "description": "Data values for color selection.",
                "type": "input"
            },
            "noise": {
                "caption": "noise",
                "data_type": "Heightmap",
                "description": "TODO",
                "type": "input"
            },
            "texture": {
                "caption": "texture",
                "data_type": "HeightmapRGBA",
                "description": "Texture (RGBA).",
                "type": "output"
            }
        }
    },
    "ColorizeSolid": {
        "category": "Texture",
        "description": "ColorizeSolid generates an uniform texture based on an input color.",
        "label": "ColorizeSolid",
        "parameters": {
            "alpha": {
                "description": "Transparency as a scalar value",
                "key": "alpha",
                "label": "alpha",
                "type": "Float"
            },
            "color": {
                "description": "Solid color.",
                "key": "color",
                "label": "color",
                "type": "Color"
            }
        },
        "ports": {
            "texture": {
                "caption": "texture",
                "data_type": "HeightmapRGBA",
                "description": "Texture (RGBA).",
                "type": "output"
            }
        }
    },
    "CombineMask": {
        "category": "Mask",
        "description": "CombineMask performs basic logical operations on a pair of heightmaps (assuming they are used as masks).",
        "label": "CombineMask",
        "parameters": {
            "method": {
                "description": "Combining method. Available values: exclusion, intersection, union.",
                "key": "method",
                "label": "method",
                "type": "Enumeration"
            }
        },
        "ports": {
            "input 1": {
                "caption": "input 1",
                "data_type": "Heightmap",
                "description": "Input mask.",
                "type": "input"
            },
            "input 2": {
                "caption": "input 2",
                "data_type": "Heightmap",
                "description": "Input mask.",
                "type": "input"
            },
            "output": {
                "caption": "output",
                "data_type": "Heightmap",
                "description": "Combined mask.",
                "type": "output"
            }
        }
    },
    "Cone": {
        "category": "Primitive/Function",
        "description": "No description available",
        "label": "Cone",
        "parameters": {
            "apex_elevation": {
                "description": "No description",
                "key": "apex_elevation",
                "label": "apex_elevation",
                "type": "Float"
            },
            "center": {
                "description": "No description",
                "key": "center",
                "label": "center",
                "type": "Vec2Float"
            },
            "post_gain": {
                "description": "No description",
                "key": "post_gain",
                "label": "post_gain",
                "type": "Float"
            },
            "post_inverse": {
                "description": "No description",
                "key": "post_inverse",
                "label": "post_inverse",
                "type": "Bool"
            },
            "post_remap": {
                "description": "No description",
                "key": "post_remap",
                "label": "post_remap",
                "type": "Value range"
            },
            "post_smoothing_radius": {
                "description": "No description",
                "key": "post_smoothing_radius",
                "label": "post_smoothing_radius",
                "type": "Float"
            },
            "slope": {
                "description": "No description",
                "key": "slope",
                "label": "slope",
                "type": "Float"
            },
            "smooth_profile": {
                "description": "No description",
                "key": "smooth_profile",
                "label": "smooth_profile",
                "type": "Bool"
            }
        },
        "ports": {
            "dx": {
                "caption": "dx",
                "data_type": "Heightmap",
                "description": "No description",
                "type": "input"
            },
            "dy": {
                "caption": "dy",
                "data_type": "Heightmap",
                "description": "No description",
                "type": "input"
            },
            "envelope": {
                "caption": "envelope",
                "data_type": "Heightmap",
                "description": "No description",
                "type": "input"
            },
            "output": {
                "caption": "output",
                "data_type": "Heightmap",
                "description": "No description",
                "type": "output"
            }
        }
    },
    "ConeSigmoid": {
        "category": "Primitive/Function",
        "description": "No description available",
        "label": "ConeSigmoid",
        "parameters": {
            "alpha": {
                "description": "No description",
                "key": "alpha",
                "label": "alpha",
                "type": "Float"
            },
            "center": {
                "description": "No description",
                "key": "center",
                "label": "center",
                "type": "Vec2Float"
            },
            "post_gain": {
                "description": "No description",
                "key": "post_gain",
                "label": "post_gain",
                "type": "Float"
            },
            "post_inverse": {
                "description": "No description",
                "key": "post_inverse",
                "label": "post_inverse",
                "type": "Bool"
            },
            "post_remap": {
                "description": "No description",
                "key": "post_remap",
                "label": "post_remap",
                "type": "Value range"
            },
            "post_smoothing_radius": {
                "description": "No description",
                "key": "post_smoothing_radius",
                "label": "post_smoothing_radius",
                "type": "Float"
            },
            "radius": {
                "description": "No description",
                "key": "radius",
                "label": "radius",
                "type": "Float"
            }
        },
        "ports": {
            "dx": {
                "caption": "dx",
                "data_type": "Heightmap",
                "description": "No description",
                "type": "input"
            },
            "dy": {
                "caption": "dy",
                "data_type": "Heightmap",
                "description": "No description",
                "type": "input"
            },
            "envelope": {
                "caption": "envelope",
                "data_type": "Heightmap",
                "description": "No description",
                "type": "input"
            },
            "output": {
                "caption": "output",
                "data_type": "Heightmap",
                "description": "No description",
                "type": "output"
            }
        }
    },
    "Constant": {
        "category": "Primitive/Function",
        "description": "No description available",
        "label": "Constant",
        "parameters": {
            "value": {
                "description": "No description",
                "key": "value",
                "label": "value",
                "type": "Float"
            }
        },
        "ports": {
            "output": {
                "caption": "output",
                "data_type": "Heightmap",
                "description": "No description",
                "type": "output"
            }
        }
    },
    "ConvolveSVD": {
        "category": "Math/Convolution",
        "description": "ConvolveSVD performs convolution using a Singular Value Decomposition (SVD) of the kernel to accelerate the process.",
        "label": "ConvolveSVD",
        "parameters": {
            "post_gain": {
                "description": "Set the gain. Gain is a power law transformation altering the distribution of signal values, compressing or expanding certain regions of the signal depending on the exponent of the power law.",
                "key": "post_gain",
                "label": "post_gain",
                "type": "Float"
            },
            "post_inverse": {
                "description": "Inverts the output values after processing, flipping low and high values across the midrange.",
                "key": "post_inverse",
                "label": "post_inverse",
                "type": "Bool"
            },
            "post_mix": {
                "description": "Mixing factor for blending input and output values. A value of 0 uses only the input, 1 uses only the output, and intermediate values perform a linear interpolation.",
                "key": "post_mix",
                "label": "post_mix",
                "type": "Float"
            },
            "post_mix_method": {
                "description": "Method used to combine input and output values. Options include linear interpolation (default), min, max, smooth min, smooth max, add, and subtract.",
                "key": "post_mix_method",
                "label": "post_mix_method",
                "type": "Enumeration"
            },
            "post_remap": {
                "description": "Linearly remaps the output values to a specified target range (default is [0, 1]).",
                "key": "post_remap",
                "label": "post_remap",
                "type": "Value range"
            },
            "post_smoothing_radius": {
                "description": "Defines the radius for post-processing smoothing, determining the size of the neighborhood used to average local values and reduce high-frequency detail. A radius of 0 disables smoothing.",
                "key": "post_smoothing_radius",
                "label": "post_smoothing_radius",
                "type": "Float"
            },
            "rank": {
                "description": "Rank of the singular value decomposition.",
                "key": "rank",
                "label": "rank",
                "type": "Integer"
            }
        },
        "ports": {
            "input": {
                "caption": "input",
                "data_type": "Heightmap",
                "description": "Input heightmap.",
                "type": "input"
            },
            "kernel": {
                "caption": "kernel",
                "data_type": "Array",
                "description": "Convolution kernel.",
                "type": "input"
            },
            "output": {
                "caption": "output",
                "data_type": "Heightmap",
                "description": "Output heightmap.",
                "type": "output"
            }
        }
    },
    "Cos": {
        "category": "Math/Base",
        "description": "Apply a cosine function to every values.",
        "label": "Cos",
        "parameters": {
            "frequency": {
                "description": "Frequency.",
                "key": "frequency",
                "label": "frequency",
                "type": "Float"
            },
            "inverse": {
                "description": "Toggle inversion of the output values.",
                "key": "inverse",
                "label": "inverse",
                "type": "Bool"
            },
            "phase_shift": {
                "description": "Phase shift.",
                "key": "phase_shift",
                "label": "phase_shift",
                "type": "Float"
            },
            "remap": {
                "description": "Remap the operator's output to a specified range, defaulting to [0, 1].",
                "key": "remap",
                "label": "remap",
                "type": "Value range"
            }
        },
        "ports": {
            "input": {
                "caption": "input",
                "data_type": "Heightmap",
                "description": "Input heightmap.",
                "type": "input"
            },
            "output": {
                "caption": "output",
                "data_type": "Heightmap",
                "description": "Output heightmap.",
                "type": "output"
            }
        }
    },
    "Crater": {
        "category": "Primitive/Geological",
        "description": "Crater generates a crater landscape..",
        "label": "Crater",
        "parameters": {
            "center": {
                "description": "Reference center within the heightmap.",
                "key": "center",
                "label": "center",
                "type": "Vec2Float"
            },
            "depth": {
                "description": "Crater depth.",
                "key": "depth",
                "label": "depth",
                "type": "Float"
            },
            "inverse": {
                "description": "Toggle inversion of the output values.",
                "key": "inverse",
                "label": "inverse",
                "type": "Bool"
            },
            "lip_decay": {
                "description": "Ejecta lip decay.",
                "key": "lip_decay",
                "label": "lip_decay",
                "type": "Float"
            },
            "lip_height_ratio": {
                "description": "Controls the ejecta lip relative height.",
                "key": "lip_height_ratio",
                "label": "lip_height_ratio",
                "type": "Float"
            },
            "radius": {
                "description": "Crater radius.",
                "key": "radius",
                "label": "radius",
                "type": "Float"
            },
            "remap": {
                "description": "Remap the operator's output to a specified range, defaulting to [0, 1].",
                "key": "remap",
                "label": "remap",
                "type": "Value range"
            }
        },
        "ports": {
            "control": {
                "caption": "control",
                "data_type": "Heightmap",
                "description": "Control parameter, acts as a multiplier for the weight parameter.",
                "type": "input"
            },
            "dx": {
                "caption": "dx",
                "data_type": "Heightmap",
                "description": "Displacement with respect to the domain size (x-direction).",
                "type": "input"
            },
            "dy": {
                "caption": "dy",
                "data_type": "Heightmap",
                "description": "Displacement with respect to the domain size (y-direction).",
                "type": "input"
            },
            "output": {
                "caption": "output",
                "data_type": "Heightmap",
                "description": "Crater heightmap.",
                "type": "output"
            }
        }
    },
    "Debug": {
        "category": "Debug",
        "description": "No description available",
        "label": "Debug",
        "parameters": null,
        "ports": {
            "input": {
                "caption": "input",
                "data_type": "Heightmap",
                "description": "No description",
                "type": "input"
            }
        }
    },
    "Dendry": {
        "category": "Primitive/Coherent",
        "description": "Dendry is a procedural model for dendritic patterns generation.",
        "label": "Dendry",
        "parameters": {
            "displacement": {
                "description": "Maximum displacement of segments.",
                "key": "displacement",
                "label": "displacement",
                "type": "Float"
            },
            "eps": {
                "description": "Used to bias the area where points are generated in cells.",
                "key": "eps",
                "label": "eps",
                "type": "Float"
            },
            "inverse": {
                "description": "Toggle inversion of the output values.",
                "key": "inverse",
                "label": "inverse",
                "type": "Bool"
            },
            "kw": {
                "description": "Noise wavenumbers (kx, ky) for each directions.",
                "key": "kw",
                "label": "kw",
                "type": "Wavenumber"
            },
            "noise_amplitude_proportion": {
                "description": "Proportion of the amplitude of the control function as noise.",
                "key": "noise_amplitude_proportion",
                "label": "noise_amplitude_proportion",
                "type": "Float"
            },
            "primitives_resolution_steps": {
                "description": "Additional resolution steps in the primitive resolution.",
                "key": "primitives_resolution_steps",
                "label": "primitives_resolution_steps",
                "type": "Integer"
            },
            "remap": {
                "description": "Remap the operator's output to a specified range, defaulting to [0, 1].",
                "key": "remap",
                "label": "remap",
                "type": "Value range"
            },
            "resolution": {
                "description": "Number of resolutions in the noise function.",
                "key": "resolution",
                "label": "resolution",
                "type": "Integer"
            },
            "seed": {
                "description": "Random seed number.",
                "key": "seed",
                "label": "seed",
                "type": "Random seed number"
            },
            "slope_power": {
                "description": "Additional parameter to control the variation of slope on terrains.",
                "key": "slope_power",
                "label": "slope_power",
                "type": "Float"
            },
            "subsampling": {
                "description": "Function evaluation subsampling, use higher values for faster computation at the cost of a coarser resolution.",
                "key": "subsampling",
                "label": "subsampling",
                "type": "Integer"
            }
        },
        "ports": {
            "control": {
                "caption": "control",
                "data_type": "Heightmap",
                "description": "Global control heightmap that defines the overall shape of the output.",
                "type": "input"
            },
            "dx": {
                "caption": "dx",
                "data_type": "Heightmap",
                "description": "Displacement with respect to the domain size (x-direction).",
                "type": "input"
            },
            "dy": {
                "caption": "dy",
                "data_type": "Heightmap",
                "description": "Displacement with respect to the domain size (y-direction).",
                "type": "input"
            },
            "envelope": {
                "caption": "envelope",
                "data_type": "Heightmap",
                "description": "Output noise amplitude envelope.",
                "type": "input"
            },
            "out": {
                "caption": "out",
                "data_type": "Heightmap",
                "description": "TODO",
                "type": "output"
            }
        }
    },
    "DepressionFilling": {
        "category": "Erosion",
        "description": "DepressionFilling is used to fill depressions or sinks in an heightmap. It ensures that there are no depressions, i.e. areas within a digital elevation model that are surrounded by higher terrain, with no outlet to lower areas.",
        "label": "DepressionFilling",
        "parameters": {
            "epsilon": {
                "description": "Minimum slope tolerance.",
                "key": "epsilon",
                "label": "epsilon",
                "type": "Float"
            },
            "iterations": {
                "description": "Maximum number of iterations.",
                "key": "iterations",
                "label": "iterations",
                "type": "Integer"
            },
            "remap fill map": {
                "description": "Remap to [0, 1] the filling map.",
                "key": "remap fill map",
                "label": "remap fill map",
                "type": "Bool"
            }
        },
        "ports": {
            "fill map": {
                "caption": "fill map",
                "data_type": "Heightmap",
                "description": "Filling map.",
                "type": "output"
            },
            "input": {
                "caption": "input",
                "data_type": "Heightmap",
                "description": "Input heightmap.",
                "type": "input"
            },
            "output": {
                "caption": "output",
                "data_type": "Heightmap",
                "description": "Filled heightmap.",
                "type": "output"
            }
        }
    },
    "Detrend": {
        "category": "WIP",
        "description": "The Detrend operator is used to adjust the elevation using a very basic (uncorrect) detrending operator.",
        "label": "Detrend",
        "parameters": null,
        "ports": {
            "input": {
                "caption": "input",
                "data_type": "Heightmap",
                "description": "Input heightmap.",
                "type": "input"
            },
            "output": {
                "caption": "output",
                "data_type": "Heightmap",
                "description": "Detrended heightmap.",
                "type": "output"
            }
        }
    },
    "DiffusionLimitedAggregation": {
        "category": "WIP",
        "description": "DiffusionLimitedAggregation creates branching, fractal-like structures that resemble the rugged, irregular contours of mountain ranges.",
        "label": "DiffusionLimitedAggregation",
        "parameters": {
            "inverse": {
                "description": "Toggle inversion of the output values.",
                "key": "inverse",
                "label": "inverse",
                "type": "Bool"
            },
            "noise_ratio": {
                "description": " A parameter that controls the amount of randomness or noise introduced in the talus formation process.",
                "key": "noise_ratio",
                "label": "noise_ratio",
                "type": "Float"
            },
            "remap": {
                "description": "Remap the operator's output to a specified range, defaulting to [0, 1].",
                "key": "remap",
                "label": "remap",
                "type": "Value range"
            },
            "scale": {
                "description": "A scaling factor that influences the density of the particles in the DLA pattern.",
                "key": "scale",
                "label": "scale",
                "type": "Float"
            },
            "seed": {
                "description": "The seed for the random number generator.",
                "key": "seed",
                "label": "seed",
                "type": "Random seed number"
            },
            "seeding_outer_radius_ratio": {
                "description": "The ratio between the outer seeding radius and the initial seeding radius. It determines the outer boundary for particle seeding.",
                "key": "seeding_outer_radius_ratio",
                "label": "seeding_outer_radius_ratio",
                "type": "Float"
            },
            "seeding_radius": {
                "description": "The radius within which initial seeding of particles occurs. This radius defines the area where the first particles are placed.",
                "key": "seeding_radius",
                "label": "seeding_radius",
                "type": "Float"
            },
            "slope": {
                "description": "Slope of the talus added to the DLA pattern.",
                "key": "slope",
                "label": "slope",
                "type": "Float"
            }
        },
        "ports": {
            "output": {
                "caption": "output",
                "data_type": "Heightmap",
                "description": "DiffusionLimitedAggregation heightmap.",
                "type": "output"
            }
        }
    },
    "Dilation": {
        "category": "Operator/Morphology",
        "description": "Dilation expands the boundaries of objects in an image and fills in small gaps or holes in those objects. Use Cases: (+) Filling gaps: Dilation can be used to fill small gaps or holes in objects, making them more solid. (+) Merging objects: Dilation can help merge nearby objects or connect broken segments in an image.",
        "label": "Dilation",
        "parameters": {
            "GPU": {
                "description": "Toogle GPU acceleration on or off.",
                "key": "GPU",
                "label": "GPU",
                "type": "Bool"
            },
            "radius": {
                "description": "Filter radius with respect to the domain size.",
                "key": "radius",
                "label": "radius",
                "type": "Float"
            }
        },
        "ports": {
            "input": {
                "caption": "input",
                "data_type": "Heightmap",
                "description": "Input heightmap.",
                "type": "input"
            },
            "output": {
                "caption": "output",
                "data_type": "Heightmap",
                "description": "Dilated heightmap.",
                "type": "output"
            }
        }
    },
    "DirectionalBlur": {
        "category": "WIP",
        "description": "No description available",
        "label": "DirectionalBlur",
        "parameters": {
            "angle": {
                "description": "No description",
                "key": "angle",
                "label": "angle",
                "type": "Float"
            },
            "intensity": {
                "description": "No description",
                "key": "intensity",
                "label": "intensity",
                "type": "Float"
            },
            "post_gain": {
                "description": "Set the gain. Gain is a power law transformation altering the distribution of signal values, compressing or expanding certain regions of the signal depending on the exponent of the power law.",
                "key": "post_gain",
                "label": "post_gain",
                "type": "Float"
            },
            "post_inverse": {
                "description": "Inverts the output values after processing, flipping low and high values across the midrange.",
                "key": "post_inverse",
                "label": "post_inverse",
                "type": "Bool"
            },
            "post_mix": {
                "description": "Mixing factor for blending input and output values. A value of 0 uses only the input, 1 uses only the output, and intermediate values perform a linear interpolation.",
                "key": "post_mix",
                "label": "post_mix",
                "type": "Float"
            },
            "post_mix_method": {
                "description": "Method used to combine input and output values. Options include linear interpolation (default), min, max, smooth min, smooth max, add, and subtract.",
                "key": "post_mix_method",
                "label": "post_mix_method",
                "type": "Enumeration"
            },
            "post_remap": {
                "description": "Linearly remaps the output values to a specified target range (default is [0, 1]).",
                "key": "post_remap",
                "label": "post_remap",
                "type": "Value range"
            },
            "post_smoothing_radius": {
                "description": "Defines the radius for post-processing smoothing, determining the size of the neighborhood used to average local values and reduce high-frequency detail. A radius of 0 disables smoothing.",
                "key": "post_smoothing_radius",
                "label": "post_smoothing_radius",
                "type": "Float"
            },
            "radius": {
                "description": "No description",
                "key": "radius",
                "label": "radius",
                "type": "Float"
            },
            "spread": {
                "description": "No description",
                "key": "spread",
                "label": "spread",
                "type": "Float"
            },
            "stretch": {
                "description": "No description",
                "key": "stretch",
                "label": "stretch",
                "type": "Float"
            }
        },
        "ports": {
            "angle": {
                "caption": "angle",
                "data_type": "Heightmap",
                "description": "No description",
                "type": "input"
            },
            "input": {
                "caption": "input",
                "data_type": "Heightmap",
                "description": "No description",
                "type": "input"
            },
            "output": {
                "caption": "output",
                "data_type": "Heightmap",
                "description": "No description",
                "type": "output"
            }
        }
    },
    "DistanceTransform": {
        "category": "Operator/Morphology",
        "description": "Generates a distance map where each pixel's value represents the shortest distance to the nearest non-zero value in the input heightmap.",
        "label": "DistanceTransform",
        "parameters": {
            "post_gain": {
                "description": "Set the gain. Gain is a power law transformation altering the distribution of signal values, compressing or expanding certain regions of the signal depending on the exponent of the power law.",
                "key": "post_gain",
                "label": "post_gain",
                "type": "Float"
            },
            "post_inverse": {
                "description": "Inverts the output values after processing, flipping low and high values across the midrange.",
                "key": "post_inverse",
                "label": "post_inverse",
                "type": "Bool"
            },
            "post_remap": {
                "description": "Linearly remaps the output values to a specified target range (default is [0, 1]).",
                "key": "post_remap",
                "label": "post_remap",
                "type": "Value range"
            },
            "post_smoothing_radius": {
                "description": "Defines the radius for post-processing smoothing, determining the size of the neighborhood used to average local values and reduce high-frequency detail. A radius of 0 disables smoothing.",
                "key": "post_smoothing_radius",
                "label": "post_smoothing_radius",
                "type": "Float"
            },
            "reverse_input": {
                "description": "Invert the input values before processing.",
                "key": "reverse_input",
                "label": "reverse_input",
                "type": "Bool"
            },
            "threshold": {
                "description": "Defines the cutoff value for considering non-zero input pixels.",
                "key": "threshold",
                "label": "threshold",
                "type": "Float"
            },
            "transform_type": {
                "description": "Specifies the distance metric used for transformation (e.g., Euclidean, Manhattan, or Chessboard distance).",
                "key": "transform_type",
                "label": "transform_type",
                "type": "Enumeration"
            }
        },
        "ports": {
            "input": {
                "caption": "input",
                "data_type": "Heightmap",
                "description": "Input heightmap used to compute the distance transform.",
                "type": "input"
            },
            "output": {
                "caption": "output",
                "data_type": "Heightmap",
                "description": "Generated distance map based on the input heightmap.",
                "type": "output"
            }
        }
    },
    "Erosion": {
        "category": "Operator/Morphology",
        "description": "Erosion removes small structures or noise from an image, and it also shrinks the boundaries of objects in an image. Use Cases: (+) Noise reduction: Erosion can help remove small, unwanted pixels or noise from the image. (+) Separating objects: Erosion can be used to separate touching or overlapping objects in an image by shrinking their boundaries.",
        "label": "Erosion",
        "parameters": {
            "GPU": {
                "description": "Toogle GPU acceleration on or off.",
                "key": "GPU",
                "label": "GPU",
                "type": "Bool"
            },
            "radius": {
                "description": "Filter radius with respect to the domain size.",
                "key": "radius",
                "label": "radius",
                "type": "Float"
            }
        },
        "ports": {
            "input": {
                "caption": "input",
                "data_type": "Heightmap",
                "description": "Input heightmap.",
                "type": "input"
            },
            "output": {
                "caption": "output",
                "data_type": "Heightmap",
                "description": "Dilated heightmap.",
                "type": "output"
            }
        }
    },
    "ExpandShrink": {
        "category": "Filter/Recast",
        "description": "ExpandShrink is a maximum/minimum filter with a weighted kernel. It can be used to enhance or extract features while preserving the essential structure of the heightmap.",
        "label": "ExpandShrink",
        "parameters": {
            "iterations": {
                "description": "No description",
                "key": "iterations",
                "label": "iterations",
                "type": "Integer"
            },
            "kernel": {
                "description": "Weighting kernel. Available values: biweight, cone, cone_smooth, cubic_pulse, disk, lorentzian, smooth_cosine, square, tricube.",
                "key": "kernel",
                "label": "kernel",
                "type": "Enumeration"
            },
            "mask_activate": {
                "description": "Enables or disables the internal mask. If the node's 'mask' input is connected, this setting is bypassed and the input mask is used instead.",
                "key": "mask_activate",
                "label": "mask_activate",
                "type": "Bool"
            },
            "mask_gain": {
                "description": "Controls the intensity or influence of the internal mask. Bypassed if the 'mask' input is connected.",
                "key": "mask_gain",
                "label": "mask_gain",
                "type": "Float"
            },
            "mask_inverse": {
                "description": "Inverts the internal mask, applying the operator where the mask is low. Ignored if a 'mask' input is provided.",
                "key": "mask_inverse",
                "label": "mask_inverse",
                "type": "Bool"
            },
            "mask_radius": {
                "description": "Defines the smoothing radius for the internal mask. A value of 0 disables smoothing. This is bypassed if the 'mask' input is used.",
                "key": "mask_radius",
                "label": "mask_radius",
                "type": "Float"
            },
            "mask_type": {
                "description": "Specifies how the internal mask is computed: 'Elevation' uses height, 'Gradient Norm' uses slope, and 'Elevation mid-range' selects the middle portion of the height range. This parameter is ignored when a 'mask' input is connected.",
                "key": "mask_type",
                "label": "mask_type",
                "type": "Choice"
            },
            "post_gain": {
                "description": "Set the gain. Gain is a power law transformation altering the distribution of signal values, compressing or expanding certain regions of the signal depending on the exponent of the power law.",
                "key": "post_gain",
                "label": "post_gain",
                "type": "Float"
            },
            "post_inverse": {
                "description": "Inverts the output values after processing, flipping low and high values across the midrange.",
                "key": "post_inverse",
                "label": "post_inverse",
                "type": "Bool"
            },
            "post_mix": {
                "description": "Mixing factor for blending input and output values. A value of 0 uses only the input, 1 uses only the output, and intermediate values perform a linear interpolation.",
                "key": "post_mix",
                "label": "post_mix",
                "type": "Float"
            },
            "post_mix_method": {
                "description": "Method used to combine input and output values. Options include linear interpolation (default), min, max, smooth min, smooth max, add, and subtract.",
                "key": "post_mix_method",
                "label": "post_mix_method",
                "type": "Enumeration"
            },
            "post_remap": {
                "description": "Linearly remaps the output values to a specified target range (default is [0, 1]).",
                "key": "post_remap",
                "label": "post_remap",
                "type": "Value range"
            },
            "post_smoothing_radius": {
                "description": "Defines the radius for post-processing smoothing, determining the size of the neighborhood used to average local values and reduce high-frequency detail. A radius of 0 disables smoothing.",
                "key": "post_smoothing_radius",
                "label": "post_smoothing_radius",
                "type": "Float"
            },
            "radius": {
                "description": "Filter radius with respect to the domain size.",
                "key": "radius",
                "label": "radius",
                "type": "Float"
            },
            "shrink": {
                "description": "Shrink (if true) or expand (if false).",
                "key": "shrink",
                "label": "shrink",
                "type": "Bool"
            }
        },
        "ports": {
            "input": {
                "caption": "input",
                "data_type": "Heightmap",
                "description": "Input heightmap.",
                "type": "input"
            },
            "kernel": {
                "caption": "kernel",
                "data_type": "Array",
                "description": "No description",
                "type": "input"
            },
            "mask": {
                "caption": "mask",
                "data_type": "Heightmap",
                "description": "Mask defining the filtering intensity (expected in [0, 1]).",
                "type": "input"
            },
            "output": {
                "caption": "output",
                "data_type": "Heightmap",
                "description": "Filtered heightmap.",
                "type": "output"
            }
        }
    },
    "ExportAsCubemap": {
        "category": "WIP",
        "description": "TODO",
        "label": "ExportAsCubemap",
        "parameters": {
            "auto_export": {
                "description": "Controls whether the output file is automatically written when the node is updated. Default is false. When set to true, the file is saved automatically on updates. If false, use the 'Force Reload' button on the node to manually trigger the export.",
                "key": "auto_export",
                "label": "auto_export",
                "type": "Bool"
            },
            "cubemap_resolution": {
                "description": "TODO",
                "key": "cubemap_resolution",
                "label": "cubemap_resolution",
                "type": "Integer"
            },
            "fname": {
                "description": "TODO",
                "key": "fname",
                "label": "fname",
                "type": "Filename"
            },
            "ir": {
                "description": "TODO",
                "key": "ir",
                "label": "ir",
                "type": "Integer"
            },
            "overlap": {
                "description": "TODO",
                "key": "overlap",
                "label": "overlap",
                "type": "Float"
            },
            "splitted": {
                "description": "TODO",
                "key": "splitted",
                "label": "splitted",
                "type": "Bool"
            }
        },
        "ports": {
            "input": {
                "caption": "input",
                "data_type": "Heightmap",
                "description": "TODO",
                "type": "input"
            }
        }
    },
    "ExportAsset": {
        "category": "IO/Files",
        "description": "Exports both the heightmap and texture as a single asset. The mesh can either be used as is or retriangulated using an optimization algorithm. Additionally, a normal map can be provided to model light effects of small details not represented by the mesh.",
        "label": "ExportAsset",
        "parameters": {
            "auto_export": {
                "description": "Controls whether the output file is automatically written when the node is updated. Default is false. When set to true, the file is saved automatically on updates. If false, use the 'Force Reload' button on the node to manually trigger the export.",
                "key": "auto_export",
                "label": "auto_export",
                "type": "Bool"
            },
            "blending_method": {
                "description": "Defines the method used to blend the normal map for small details.",
                "key": "blending_method",
                "label": "blending_method",
                "type": "Enumeration"
            },
            "detail_scaling": {
                "description": "Scaling factor applied to the detail normal map.",
                "key": "detail_scaling",
                "label": "detail_scaling",
                "type": "Float"
            },
            "elevation_scaling": {
                "description": "Factor used to scale elevation values.",
                "key": "elevation_scaling",
                "label": "elevation_scaling",
                "type": "Float"
            },
            "export_format": {
                "description": "Defines the file format for export. Available formats include Assimp Binary (*.assbin), Assxml Document (*.assxml), Autodesk 3DS (*.3ds), Autodesk FBX (ASCII/Binary) (*.fbx), COLLADA (*.dae), Extensible 3D (*.x3d), GL Transmission Format (GLB/GLTF v1 & v2), Stanford Polygon Library (*.ply), Step Files (*.stp), Stereolithography (*.stl), 3MF (*.3mf), and Wavefront OBJ (*.obj) with or without material files.",
                "key": "export_format",
                "label": "export_format",
                "type": "Enumeration"
            },
            "fname": {
                "description": "Specifies the name of the exported file.",
                "key": "fname",
                "label": "fname",
                "type": "Filename"
            },
            "max_error": {
                "description": "Maximum allowable error when generating an optimized triangulated mesh.",
                "key": "max_error",
                "label": "max_error",
                "type": "Float"
            },
            "mesh_type": {
                "description": "Specifies the type of mesh geometry used. Options include 'triangles' and 'triangles (optimized)'.",
                "key": "mesh_type",
                "label": "mesh_type",
                "type": "Enumeration"
            }
        },
        "ports": {
            "elevation": {
                "caption": "elevation",
                "data_type": "Heightmap",
                "description": "Heightmap data defining elevation values.",
                "type": "input"
            },
            "normal map details": {
                "caption": "normal map details",
                "data_type": "HeightmapRGBA",
                "description": "Optional normal map for enhancing lighting effects on small details.",
                "type": "input"
            },
            "texture": {
                "caption": "texture",
                "data_type": "HeightmapRGBA",
                "description": "Heightmap data defining texture color values.",
                "type": "input"
            }
        }
    },
    "ExportCloud": {
        "category": "IO/Files",
        "description": "ExportCloud is an operator for exporting cloud data to a csv file.",
        "label": "ExportCloud",
        "parameters": {
            "auto_export": {
                "description": "Controls whether the output file is automatically written when the node is updated. Default is false. When set to true, the file is saved automatically on updates. If false, use the 'Force Reload' button on the node to manually trigger the export.",
                "key": "auto_export",
                "label": "auto_export",
                "type": "Bool"
            },
            "fname": {
                "description": "Export file name.",
                "key": "fname",
                "label": "fname",
                "type": "Filename"
            }
        },
        "ports": {
            "input": {
                "caption": "input",
                "data_type": "Cloud",
                "description": "Input heightmap.",
                "type": "input"
            }
        }
    },
    "ExportHeightmap": {
        "category": "IO/Files",
        "description": "ExportHeightmap is an operator for exporting a heightmap in various file formats.",
        "label": "ExportHeightmap",
        "parameters": {
            "auto_export": {
                "description": "Controls whether the output file is automatically written when the node is updated. Default is false. When set to true, the file is saved automatically on updates. If false, use the 'Force Reload' button on the node to manually trigger the export.",
                "key": "auto_export",
                "label": "auto_export",
                "type": "Bool"
            },
            "fname": {
                "description": "Export file name.",
                "key": "fname",
                "label": "fname",
                "type": "Filename"
            },
            "format": {
                "description": "Export format. Available values: png (16 bit), png (8 bit), raw (16 bit, Unity).",
                "key": "format",
                "label": "format",
                "type": "Enumeration"
            }
        },
        "ports": {
            "input": {
                "caption": "input",
                "data_type": "Heightmap",
                "description": "Input heightmap.",
                "type": "input"
            }
        }
    },
    "ExportNormalMap": {
        "category": "IO/Files",
        "description": "ExportNormalMap is an operator for exporting the normal map of an heightmap as a PNG image file.",
        "label": "ExportNormalMap",
        "parameters": {
            "16bit": {
                "description": "Whether the output file is a 16bit PNG file (instead of 8bit).",
                "key": "16bit",
                "label": "16bit",
                "type": "Bool"
            },
            "auto_export": {
                "description": "Controls whether the output file is automatically written when the node is updated. Default is false. When set to true, the file is saved automatically on updates. If false, use the 'Force Reload' button on the node to manually trigger the export.",
                "key": "auto_export",
                "label": "auto_export",
                "type": "Bool"
            },
            "fname": {
                "description": "Export file name.",
                "key": "fname",
                "label": "fname",
                "type": "Filename"
            }
        },
        "ports": {
            "input": {
                "caption": "input",
                "data_type": "Heightmap",
                "description": "Input heightmap.",
                "type": "input"
            }
        }
    },
    "ExportPath": {
        "category": "IO/Files",
        "description": "ExportPath is an operator for exporting path data to a csv file.",
        "label": "ExportPath",
        "parameters": {
            "auto_export": {
                "description": "Controls whether the output file is automatically written when the node is updated. Default is false. When set to true, the file is saved automatically on updates. If false, use the 'Force Reload' button on the node to manually trigger the export.",
                "key": "auto_export",
                "label": "auto_export",
                "type": "Bool"
            },
            "fname": {
                "description": "Export file name.",
                "key": "fname",
                "label": "fname",
                "type": "Filename"
            }
        },
        "ports": {
            "input": {
                "caption": "input",
                "data_type": "Path",
                "description": "Input heightmap.",
                "type": "input"
            }
        }
    },
    "ExportTexture": {
        "category": "IO/Files",
        "description": "ExportTexture is a texture to a PNG image file.",
        "label": "ExportTexture",
        "parameters": {
            "16 bit": {
                "description": "Decides whether the output is an 8 bit or a 16 bit PNG file.",
                "key": "16 bit",
                "label": "16 bit",
                "type": "Bool"
            },
            "auto_export": {
                "description": "Controls whether the output file is automatically written when the node is updated. Default is false. When set to true, the file is saved automatically on updates. If false, use the 'Force Reload' button on the node to manually trigger the export.",
                "key": "auto_export",
                "label": "auto_export",
                "type": "Bool"
            },
            "fname": {
                "description": "Export file name.",
                "key": "fname",
                "label": "fname",
                "type": "Filename"
            }
        },
        "ports": {
            "texture": {
                "caption": "texture",
                "data_type": "HeightmapRGBA",
                "description": "Input texture.",
                "type": "input"
            }
        }
    },
    "Falloff": {
        "category": "Math/Boundaries",
        "description": "Falloff is an operator that enforces values close to zero at the domain edges.",
        "label": "Falloff",
        "parameters": {
            "distance_function": {
                "description": "Measure used for the distance calculation. Available values: Chebyshev, Euclidian, Euclidian/Chebyshev, Manhattan.",
                "key": "distance_function",
                "label": "distance_function",
                "type": "Enumeration"
            },
            "remap": {
                "description": "Remap the operator's output to a specified range, defaulting to [0, 1].",
                "key": "remap",
                "label": "remap",
                "type": "Value range"
            },
            "strength": {
                "description": "Falloff strength.",
                "key": "strength",
                "label": "strength",
                "type": "Float"
            }
        },
        "ports": {
            "dr": {
                "caption": "dr",
                "data_type": "Heightmap",
                "description": "Displacement with respect to the domain size (radial direction).",
                "type": "input"
            },
            "input": {
                "caption": "input",
                "data_type": "Heightmap",
                "description": "Input heightmap.",
                "type": "input"
            },
            "output": {
                "caption": "output",
                "data_type": "Heightmap",
                "description": "Filtered heightmap.",
                "type": "output"
            }
        }
    },
    "FillTalus": {
        "category": "WIP",
        "description": "Fill the heightmap starting from the highest elevations using a regular downslope.",
        "label": "FillTalus",
        "parameters": {
            "noise_ratio": {
                "description": "Noise ratio, added to the downslope.",
                "key": "noise_ratio",
                "label": "noise_ratio",
                "type": "Float"
            },
            "seed": {
                "description": "Random seed number.",
                "key": "seed",
                "label": "seed",
                "type": "Random seed number"
            },
            "slope": {
                "description": "Downslope used for filling.",
                "key": "slope",
                "label": "slope",
                "type": "Float"
            }
        },
        "ports": {
            "input": {
                "caption": "input",
                "data_type": "Heightmap",
                "description": "Input heightmap.",
                "type": "input"
            },
            "output": {
                "caption": "output",
                "data_type": "Heightmap",
                "description": "Output heightmap.",
                "type": "output"
            }
        }
    },
    "FloodingFromBoundaries": {
        "category": "Hydrology",
        "description": "No description available",
        "label": "FloodingFromBoundaries",
        "parameters": {
            "elevation": {
                "description": "No description",
                "key": "elevation",
                "label": "elevation",
                "type": "Float"
            },
            "from_east": {
                "description": "No description",
                "key": "from_east",
                "label": "from_east",
                "type": "Bool"
            },
            "from_north": {
                "description": "No description",
                "key": "from_north",
                "label": "from_north",
                "type": "Bool"
            },
            "from_south": {
                "description": "No description",
                "key": "from_south",
                "label": "from_south",
                "type": "Bool"
            },
            "from_west": {
                "description": "No description",
                "key": "from_west",
                "label": "from_west",
                "type": "Bool"
            }
        },
        "ports": {
            "input": {
                "caption": "input",
                "data_type": "Heightmap",
                "description": "No description",
                "type": "input"
            },
            "water_depth": {
                "caption": "water_depth",
                "data_type": "Heightmap",
                "description": "No description",
                "type": "output"
            }
        }
    },
    "FloodingFromPoint": {
        "category": "Hydrology",
        "description": "No description available",
        "label": "FloodingFromPoint",
        "parameters": {
            "depth_min": {
                "description": "No description",
                "key": "depth_min",
                "label": "depth_min",
                "type": "Float"
            }
        },
        "ports": {
            "cloud": {
                "caption": "cloud",
                "data_type": "Cloud",
                "description": "No description",
                "type": "input"
            },
            "elevation": {
                "caption": "elevation",
                "data_type": "Heightmap",
                "description": "No description",
                "type": "input"
            },
            "water_depth": {
                "caption": "water_depth",
                "data_type": "Heightmap",
                "description": "No description",
                "type": "output"
            }
        }
    },
    "FloodingLakeSystem": {
        "category": "Hydrology",
        "description": "No description available",
        "label": "FloodingLakeSystem",
        "parameters": {
            "epsilon": {
                "description": "No description",
                "key": "epsilon",
                "label": "epsilon",
                "type": "Float"
            },
            "iterations": {
                "description": "No description",
                "key": "iterations",
                "label": "iterations",
                "type": "Integer"
            }
        },
        "ports": {
            "elevation": {
                "caption": "elevation",
                "data_type": "Heightmap",
                "description": "No description",
                "type": "input"
            },
            "water_depth": {
                "caption": "water_depth",
                "data_type": "Heightmap",
                "description": "No description",
                "type": "output"
            }
        }
    },
    "FloodingUniformLevel": {
        "category": "Hydrology",
        "description": "No description available",
        "label": "FloodingUniformLevel",
        "parameters": {
            "elevation": {
                "description": "No description",
                "key": "elevation",
                "label": "elevation",
                "type": "Float"
            }
        },
        "ports": {
            "input": {
                "caption": "input",
                "data_type": "Heightmap",
                "description": "No description",
                "type": "input"
            },
            "water_depth": {
                "caption": "water_depth",
                "data_type": "Heightmap",
                "description": "No description",
                "type": "output"
            }
        }
    },
    "FlowStream": {
        "category": "WIP",
        "description": "TODO",
        "label": "FlowStream",
        "parameters": {
            "depth": {
                "description": "TODO",
                "key": "depth",
                "label": "depth",
                "type": "Float"
            },
            "distance_exponent": {
                "description": "TODO",
                "key": "distance_exponent",
                "label": "distance_exponent",
                "type": "Float"
            },
            "elevation_ratio": {
                "description": "TODO",
                "key": "elevation_ratio",
                "label": "elevation_ratio",
                "type": "Float"
            },
            "merging_radius": {
                "description": "TODO",
                "key": "merging_radius",
                "label": "merging_radius",
                "type": "Float"
            },
            "noise_ratio": {
                "description": "TODO",
                "key": "noise_ratio",
                "label": "noise_ratio",
                "type": "Float"
            },
            "river_radius": {
                "description": "TODO",
                "key": "river_radius",
                "label": "river_radius",
                "type": "Float"
            },
            "riverbank_slope": {
                "description": "TODO",
                "key": "riverbank_slope",
                "label": "riverbank_slope",
                "type": "Float"
            },
            "riverbed_slope": {
                "description": "TODO",
                "key": "riverbed_slope",
                "label": "riverbed_slope",
                "type": "Float"
            },
            "seed": {
                "description": "TODO",
                "key": "seed",
                "label": "seed",
                "type": "Random seed number"
            },
            "upward_penalization": {
                "description": "TODO",
                "key": "upward_penalization",
                "label": "upward_penalization",
                "type": "Float"
            }
        },
        "ports": {
            "input": {
                "caption": "input",
                "data_type": "Heightmap",
                "description": "TODO",
                "type": "input"
            },
            "output": {
                "caption": "output",
                "data_type": "Heightmap",
                "description": "TODO",
                "type": "output"
            },
            "river_mask": {
                "caption": "river_mask",
                "data_type": "Heightmap",
                "description": "TODO",
                "type": "output"
            },
            "sources": {
                "caption": "sources",
                "data_type": "Cloud",
                "description": "TODO",
                "type": "input"
            }
        }
    },
    "Fold": {
        "category": "Filter/Recast",
        "description": "Fold iteratively applies the absolute value function to the input field, effectively folding negative values to their positive counterparts.",
        "label": "Fold",
        "parameters": {
            "iterations": {
                "description": "Number of successive foldings.",
                "key": "iterations",
                "label": "iterations",
                "type": "Integer"
            },
            "k": {
                "description": "Smoothing parameter of the smooth absolute value.",
                "key": "k",
                "label": "k",
                "type": "Float"
            }
        },
        "ports": {
            "input": {
                "caption": "input",
                "data_type": "Heightmap",
                "description": "Input heightmap.",
                "type": "input"
            },
            "output": {
                "caption": "output",
                "data_type": "Heightmap",
                "description": "Folded heightmap.",
                "type": "output"
            }
        }
    },
    "GaborWaveFbm": {
        "category": "Primitive/Coherent",
        "description": "Generates fractal Brownian motion (fBm) noise using Gabor wavelets, producing anisotropic textures with directional control.",
        "label": "GaborWaveFbm",
        "parameters": {
            "angle": {
                "description": "Controls the base orientation of the Gabor wavelets, influencing the dominant direction of the noise pattern.",
                "key": "angle",
                "label": "angle",
                "type": "Float"
            },
            "angle_spread_ratio": {
                "description": "Determines how much the local angle of the Gabor kernel can vary. A low value results in straighter structures, while a high value introduces more directional variation.",
                "key": "angle_spread_ratio",
                "label": "angle_spread_ratio",
                "type": "Float"
            },
            "kw": {
                "description": "Defines the wavenumber, which controls the frequency of the Gabor wavelets in the noise function.",
                "key": "kw",
                "label": "kw",
                "type": "Wavenumber"
            },
            "lacunarity": {
                "description": "Controls the frequency scaling between successive octaves of the fractal noise. Higher values create larger gaps between frequencies.",
                "key": "lacunarity",
                "label": "lacunarity",
                "type": "Float"
            },
            "octaves": {
                "description": "Specifies the number of noise layers (octaves) used in the fractal Brownian motion. More octaves add finer details.",
                "key": "octaves",
                "label": "octaves",
                "type": "Integer"
            },
            "persistence": {
                "description": "Controls how much each successive octave contributes to the final noise pattern. Higher values result in more prominent fine details.",
                "key": "persistence",
                "label": "persistence",
                "type": "Float"
            },
            "post_gain": {
                "description": "Set the gain. Gain is a power law transformation altering the distribution of signal values, compressing or expanding certain regions of the signal depending on the exponent of the power law.",
                "key": "post_gain",
                "label": "post_gain",
                "type": "Float"
            },
            "post_inverse": {
                "description": "Inverts the output values after processing, flipping low and high values across the midrange.",
                "key": "post_inverse",
                "label": "post_inverse",
                "type": "Bool"
            },
            "post_remap": {
                "description": "Linearly remaps the output values to a specified target range (default is [0, 1]).",
                "key": "post_remap",
                "label": "post_remap",
                "type": "Value range"
            },
            "post_smoothing_radius": {
                "description": "Defines the radius for post-processing smoothing, determining the size of the neighborhood used to average local values and reduce high-frequency detail. A radius of 0 disables smoothing.",
                "key": "post_smoothing_radius",
                "label": "post_smoothing_radius",
                "type": "Float"
            },
            "seed": {
                "description": "Sets the random seed for noise generation, ensuring reproducibility.",
                "key": "seed",
                "label": "seed",
                "type": "Random seed number"
            },
            "weight": {
                "description": "Adjusts the intensity of the noise contribution at each point.",
                "key": "weight",
                "label": "weight",
                "type": "Float"
            }
        },
        "ports": {
            "angle": {
                "caption": "angle",
                "data_type": "Heightmap",
                "description": "Optional input for dynamically controlling the wavelet orientation per pixel.",
                "type": "input"
            },
            "control": {
                "caption": "control",
                "data_type": "Heightmap",
                "description": "Optional input for modulating noise intensity or distribution.",
                "type": "input"
            },
            "dx": {
                "caption": "dx",
                "data_type": "Heightmap",
                "description": "Optional input to control horizontal displacement in the noise generation.",
                "type": "input"
            },
            "dy": {
                "caption": "dy",
                "data_type": "Heightmap",
                "description": "Optional input to control vertical displacement in the noise generation.",
                "type": "input"
            },
            "envelope": {
                "caption": "envelope",
                "data_type": "Heightmap",
                "description": "Modulates the noise amplitude across the heightmap.",
                "type": "input"
            },
            "output": {
                "caption": "output",
                "data_type": "Heightmap",
                "description": "The generated Gabor wavelet-based fractal noise heightmap.",
                "type": "output"
            }
        }
    },
    "Gain": {
        "category": "Filter/Recurve",
        "description": "Gain is a power law transformation altering the distribution of signal values, compressing or expanding certain regions of the signal depending on the exponent of the power law.",
        "label": "Gain",
        "parameters": {
            "gain": {
                "description": "Power law exponent.",
                "key": "gain",
                "label": "gain",
                "type": "Float"
            }
        },
        "ports": {
            "input": {
                "caption": "input",
                "data_type": "Heightmap",
                "description": "Input heightmap.",
                "type": "input"
            },
            "mask": {
                "caption": "mask",
                "data_type": "Heightmap",
                "description": "Mask defining the filtering intensity (expected in [0, 1]).",
                "type": "input"
            },
            "output": {
                "caption": "output",
                "data_type": "Heightmap",
                "description": "Filtered heightmap.",
                "type": "output"
            }
        }
    },
    "GammaCorrection": {
        "category": "Filter/Recurve",
        "description": "Gamma correction involves applying a nonlinear transformation to the pixel values of the heightmap. This transformation is based on a power-law function, where each pixel value is raised to the power of the gamma value. The gamma value is a parameter that determines the degree and direction of the correction.",
        "label": "GammaCorrection",
        "parameters": {
            "gamma": {
                "description": "Gamma exponent.",
                "key": "gamma",
                "label": "gamma",
                "type": "Float"
            },
            "mask_activate": {
                "description": "No description",
                "key": "mask_activate",
                "label": "mask_activate",
                "type": "Bool"
            },
            "mask_gain": {
                "description": "No description",
                "key": "mask_gain",
                "label": "mask_gain",
                "type": "Float"
            },
            "mask_inverse": {
                "description": "No description",
                "key": "mask_inverse",
                "label": "mask_inverse",
                "type": "Bool"
            },
            "mask_radius": {
                "description": "No description",
                "key": "mask_radius",
                "label": "mask_radius",
                "type": "Float"
            },
            "mask_type": {
                "description": "No description",
                "key": "mask_type",
                "label": "mask_type",
                "type": "Choice"
            },
            "post_gain": {
                "description": "No description",
                "key": "post_gain",
                "label": "post_gain",
                "type": "Float"
            },
            "post_inverse": {
                "description": "No description",
                "key": "post_inverse",
                "label": "post_inverse",
                "type": "Bool"
            },
            "post_mix": {
                "description": "No description",
                "key": "post_mix",
                "label": "post_mix",
                "type": "Float"
            },
            "post_mix_method": {
                "description": "No description",
                "key": "post_mix_method",
                "label": "post_mix_method",
                "type": "Enumeration"
            },
            "post_remap": {
                "description": "No description",
                "key": "post_remap",
                "label": "post_remap",
                "type": "Value range"
            },
            "post_smoothing_radius": {
                "description": "No description",
                "key": "post_smoothing_radius",
                "label": "post_smoothing_radius",
                "type": "Float"
            }
        },
        "ports": {
            "input": {
                "caption": "input",
                "data_type": "Heightmap",
                "description": "Input heightmap.",
                "type": "input"
            },
            "mask": {
                "caption": "mask",
                "data_type": "Heightmap",
                "description": "Mask defining the filtering intensity (expected in [0, 1]).",
                "type": "input"
            },
            "output": {
                "caption": "output",
                "data_type": "Heightmap",
                "description": "Filtered heightmap.",
                "type": "output"
            }
        }
    },
    "GammaCorrectionLocal": {
        "category": "Filter/Recurve",
        "description": "Gamma correction involves applying a nonlinear transformation to the pixel values of the heightmap. For GammaCorrectionLocal, the transformation parameters are locally defined within a perimeter 'radius'.",
        "label": "GammaCorrectionLocal",
        "parameters": {
            "GPU": {
                "description": "Toogle GPU acceleration on or off.",
                "key": "GPU",
                "label": "GPU",
                "type": "Bool"
            },
            "gamma": {
                "description": "Gamma exponent.",
                "key": "gamma",
                "label": "gamma",
                "type": "Float"
            },
            "k": {
                "description": "Smoothing factor (typically in [0, 1]).",
                "key": "k",
                "label": "k",
                "type": "Float"
            },
            "radius": {
                "description": "Filter radius with respect to the domain size.",
                "key": "radius",
                "label": "radius",
                "type": "Float"
            }
        },
        "ports": {
            "input": {
                "caption": "input",
                "data_type": "Heightmap",
                "description": "Input heightmap.",
                "type": "input"
            },
            "mask": {
                "caption": "mask",
                "data_type": "Heightmap",
                "description": "Mask defining the filtering intensity (expected in [0, 1]).",
                "type": "input"
            },
            "output": {
                "caption": "output",
                "data_type": "Heightmap",
                "description": "Filtered heightmap.",
                "type": "output"
            }
        }
    },
    "GaussianDecay": {
        "category": "Math/Base",
        "description": "Apply a Gaussian function to every values.",
        "label": "GaussianDecay",
        "parameters": {
            "post_gain": {
                "description": "Set the gain. Gain is a power law transformation altering the distribution of signal values, compressing or expanding certain regions of the signal depending on the exponent of the power law.",
                "key": "post_gain",
                "label": "post_gain",
                "type": "Float"
            },
            "post_inverse": {
                "description": "Inverts the output values after processing, flipping low and high values across the midrange.",
                "key": "post_inverse",
                "label": "post_inverse",
                "type": "Bool"
            },
            "post_mix": {
                "description": "Mixing factor for blending input and output values. A value of 0 uses only the input, 1 uses only the output, and intermediate values perform a linear interpolation.",
                "key": "post_mix",
                "label": "post_mix",
                "type": "Float"
            },
            "post_mix_method": {
                "description": "Method used to combine input and output values. Options include linear interpolation (default), min, max, smooth min, smooth max, add, and subtract.",
                "key": "post_mix_method",
                "label": "post_mix_method",
                "type": "Enumeration"
            },
            "post_remap": {
                "description": "Linearly remaps the output values to a specified target range (default is [0, 1]).",
                "key": "post_remap",
                "label": "post_remap",
                "type": "Value range"
            },
            "post_smoothing_radius": {
                "description": "Defines the radius for post-processing smoothing, determining the size of the neighborhood used to average local values and reduce high-frequency detail. A radius of 0 disables smoothing.",
                "key": "post_smoothing_radius",
                "label": "post_smoothing_radius",
                "type": "Float"
            },
            "sigma": {
                "description": "Gaussian half-width, represents the distance from the peak of the Gaussian curve to the points where the amplitude drops to half of its maximum value.",
                "key": "sigma",
                "label": "sigma",
                "type": "Float"
            }
        },
        "ports": {
            "input": {
                "caption": "input",
                "data_type": "Heightmap",
                "description": "Input heightmap.",
                "type": "input"
            },
            "output": {
                "caption": "output",
                "data_type": "Heightmap",
                "description": "Output heightmap.",
                "type": "output"
            }
        }
    },
    "GaussianPulse": {
        "category": "Primitive/Function",
        "description": "GaussianPulse generates a Gaussian pulse.",
        "label": "GaussianPulse",
        "parameters": {
            "center": {
                "description": "Reference center within the heightmap.",
                "key": "center",
                "label": "center",
                "type": "Vec2Float"
            },
            "post_gain": {
                "description": "No description",
                "key": "post_gain",
                "label": "post_gain",
                "type": "Float"
            },
            "post_inverse": {
                "description": "No description",
                "key": "post_inverse",
                "label": "post_inverse",
                "type": "Bool"
            },
            "post_remap": {
                "description": "No description",
                "key": "post_remap",
                "label": "post_remap",
                "type": "Value range"
            },
            "post_smoothing_radius": {
                "description": "No description",
                "key": "post_smoothing_radius",
                "label": "post_smoothing_radius",
                "type": "Float"
            },
            "radius": {
                "description": "Pulse half-width.",
                "key": "radius",
                "label": "radius",
                "type": "Float"
            }
        },
        "ports": {
            "control": {
                "caption": "control",
                "data_type": "Heightmap",
                "description": "Control parameter, acts as a multiplier for the weight parameter.",
                "type": "input"
            },
            "dx": {
                "caption": "dx",
                "data_type": "Heightmap",
                "description": "Displacement with respect to the domain size (x-direction).",
                "type": "input"
            },
            "dy": {
                "caption": "dy",
                "data_type": "Heightmap",
                "description": "Displacement with respect to the domain size (y-direction).",
                "type": "input"
            },
            "envelope": {
                "caption": "envelope",
                "data_type": "Heightmap",
                "description": "No description",
                "type": "input"
            },
            "output": {
                "caption": "output",
                "data_type": "Heightmap",
                "description": "Gaussian heightmap.",
                "type": "output"
            }
        }
    },
    "Gavoronoise": {
        "category": "Primitive/Coherent",
        "description": "Generates a 2D heightmap using the GavoroNoise algorithm, a procedural noise technique for terrain generation.",
        "label": "Gavoronoise",
        "parameters": {
            "amplitude": {
                "description": "Controls the overall intensity of the noise function.",
                "key": "amplitude",
                "label": "amplitude",
                "type": "Float"
            },
            "angle": {
                "description": "Sets the primary orientation of the wave structures in the noise.",
                "key": "angle",
                "label": "angle",
                "type": "Float"
            },
            "angle_spread_ratio": {
                "description": "Determines the degree of variation in the angle of the wave structures. Lower values create more aligned structures.",
                "key": "angle_spread_ratio",
                "label": "angle_spread_ratio",
                "type": "Float"
            },
            "branch_strength": {
                "description": "Controls the prominence of branch-like features in the generated noise.",
                "key": "branch_strength",
                "label": "branch_strength",
                "type": "Float"
            },
            "inverse": {
                "description": "Invert the output values of the noise function.",
                "key": "inverse",
                "label": "inverse",
                "type": "Bool"
            },
            "kw": {
                "description": "Wave number vector that determines the base frequency of the noise.",
                "key": "kw",
                "label": "kw",
                "type": "Wavenumber"
            },
            "kw_multiplier": {
                "description": "Multiplier applied to the wave numbers, affecting the frequency scaling of the noise function.",
                "key": "kw_multiplier",
                "label": "kw_multiplier",
                "type": "Wavenumber"
            },
            "lacunarity": {
                "description": "Controls the frequency scaling between successive octaves in the fractal noise function. Higher values create larger gaps between frequencies.",
                "key": "lacunarity",
                "label": "lacunarity",
                "type": "Float"
            },
            "octaves": {
                "description": "Number of noise layers (octaves) used in fractal Brownian motion (fBm). More octaves add finer details.",
                "key": "octaves",
                "label": "octaves",
                "type": "Integer"
            },
            "persistence": {
                "description": "Determines how much each successive octave contributes to the final noise pattern. Higher values amplify finer details.",
                "key": "persistence",
                "label": "persistence",
                "type": "Float"
            },
            "remap": {
                "description": "Remap the noise output values to a specified range, defaulting to [0, 1].",
                "key": "remap",
                "label": "remap",
                "type": "Value range"
            },
            "seed": {
                "description": "Sets the random seed for reproducible noise generation.",
                "key": "seed",
                "label": "seed",
                "type": "Random seed number"
            },
            "slope_strength": {
                "description": "Controls the strength of slope-based directional erosion in the noise function.",
                "key": "slope_strength",
                "label": "slope_strength",
                "type": "Float"
            },
            "z_cut_max": {
                "description": "Defines the maximum cutoff value for the Z-axis in the generated noise.",
                "key": "z_cut_max",
                "label": "z_cut_max",
                "type": "Float"
            },
            "z_cut_min": {
                "description": "Defines the minimum cutoff value for the Z-axis in the generated noise.",
                "key": "z_cut_min",
                "label": "z_cut_min",
                "type": "Float"
            }
        },
        "ports": {
            "angle": {
                "caption": "angle",
                "data_type": "Heightmap",
                "description": "Optional input for dynamically modifying the wavelet orientation per pixel.",
                "type": "input"
            },
            "control": {
                "caption": "control",
                "data_type": "Heightmap",
                "description": "Optional input that modulates noise intensity or distribution.",
                "type": "input"
            },
            "dx": {
                "caption": "dx",
                "data_type": "Heightmap",
                "description": "Optional input for perturbing noise in the X-direction.",
                "type": "input"
            },
            "dy": {
                "caption": "dy",
                "data_type": "Heightmap",
                "description": "Optional input for perturbing noise in the Y-direction.",
                "type": "input"
            },
            "envelope": {
                "caption": "envelope",
                "data_type": "Heightmap",
                "description": "Modulates the amplitude of the noise across the heightmap.",
                "type": "input"
            },
            "output": {
                "caption": "output",
                "data_type": "Heightmap",
                "description": "The final heightmap generated using the GavoroNoise algorithm.",
                "type": "output"
            }
        }
    },
    "Gradient": {
        "category": "Math/Gradient",
        "description": "Gradient provides insight into the spatial distribution of a function's gradient, conveying both direction and intensity of change across the xy-plane",
        "label": "Gradient",
        "parameters": {
            "post_gain": {
                "description": "Set the gain. Gain is a power law transformation altering the distribution of signal values, compressing or expanding certain regions of the signal depending on the exponent of the power law.",
                "key": "post_gain",
                "label": "post_gain",
                "type": "Float"
            },
            "post_inverse": {
                "description": "Inverts the output values after processing, flipping low and high values across the midrange.",
                "key": "post_inverse",
                "label": "post_inverse",
                "type": "Bool"
            },
            "post_remap": {
                "description": "Linearly remaps the output values to a specified target range (default is [0, 1]).",
                "key": "post_remap",
                "label": "post_remap",
                "type": "Value range"
            },
            "post_smoothing_radius": {
                "description": "Defines the radius for post-processing smoothing, determining the size of the neighborhood used to average local values and reduce high-frequency detail. A radius of 0 disables smoothing.",
                "key": "post_smoothing_radius",
                "label": "post_smoothing_radius",
                "type": "Float"
            }
        },
        "ports": {
            "dx": {
                "caption": "dx",
                "data_type": "Heightmap",
                "description": "Gradient with respect to the x-direction.",
                "type": "output"
            },
            "dy": {
                "caption": "dy",
                "data_type": "Heightmap",
                "description": "Gradient with respect to the y-direction.",
                "type": "output"
            },
            "input": {
                "caption": "input",
                "data_type": "Heightmap",
                "description": "Input heightmap.",
                "type": "input"
            }
        }
    },
    "GradientAngle": {
        "category": "Math/Gradient",
        "description": "The gradient angle of a heightmap refers to the direction in which the slope points toward. It represents the orientation of the terrain surface relative to a horizontal plane",
        "label": "GradientAngle",
        "parameters": {
            "remap": {
                "description": "Remap the operator's output to a specified range, defaulting to [0, 1].",
                "key": "remap",
                "label": "remap",
                "type": "Value range"
            },
            "smoothing_radius": {
                "description": "No description",
                "key": "smoothing_radius",
                "label": "smoothing_radius",
                "type": "Float"
            }
        },
        "ports": {
            "input": {
                "caption": "input",
                "data_type": "Heightmap",
                "description": "Input heightmap.",
                "type": "input"
            },
            "output": {
                "caption": "output",
                "data_type": "Heightmap",
                "description": "Gradient angle.",
                "type": "output"
            }
        }
    },
    "GradientNorm": {
        "category": "Math/Gradient",
        "description": "The gradient norm of a heightmap refers to the magnitude or intensity of the rate of change of elevation at each point on the map. It represents the steepness or slope of the terrain surface, irrespective of its direction.",
        "label": "GradientNorm",
        "parameters": {
            "post_gain": {
                "description": "Set the gain. Gain is a power law transformation altering the distribution of signal values, compressing or expanding certain regions of the signal depending on the exponent of the power law.",
                "key": "post_gain",
                "label": "post_gain",
                "type": "Float"
            },
            "post_inverse": {
                "description": "Inverts the output values after processing, flipping low and high values across the midrange.",
                "key": "post_inverse",
                "label": "post_inverse",
                "type": "Bool"
            },
            "post_remap": {
                "description": "Linearly remaps the output values to a specified target range (default is [0, 1]).",
                "key": "post_remap",
                "label": "post_remap",
                "type": "Value range"
            },
            "post_smoothing_radius": {
                "description": "Defines the radius for post-processing smoothing, determining the size of the neighborhood used to average local values and reduce high-frequency detail. A radius of 0 disables smoothing.",
                "key": "post_smoothing_radius",
                "label": "post_smoothing_radius",
                "type": "Float"
            }
        },
        "ports": {
            "input": {
                "caption": "input",
                "data_type": "Heightmap",
                "description": "Input heightmap.",
                "type": "input"
            },
            "output": {
                "caption": "output",
                "data_type": "Heightmap",
                "description": "Gradient norm.",
                "type": "output"
            }
        }
    },
    "GradientTalus": {
        "category": "Math/Gradient",
        "description": "Gradient talus refers to the local steepest downslope, or the direction in which the terrain descends most rapidly, at each point on the heightmap.",
        "label": "GradientTalus",
        "parameters": {
            "post_gain": {
                "description": "Set the gain. Gain is a power law transformation altering the distribution of signal values, compressing or expanding certain regions of the signal depending on the exponent of the power law.",
                "key": "post_gain",
                "label": "post_gain",
                "type": "Float"
            },
            "post_inverse": {
                "description": "Inverts the output values after processing, flipping low and high values across the midrange.",
                "key": "post_inverse",
                "label": "post_inverse",
                "type": "Bool"
            },
            "post_remap": {
                "description": "Linearly remaps the output values to a specified target range (default is [0, 1]).",
                "key": "post_remap",
                "label": "post_remap",
                "type": "Value range"
            },
            "post_smoothing_radius": {
                "description": "Defines the radius for post-processing smoothing, determining the size of the neighborhood used to average local values and reduce high-frequency detail. A radius of 0 disables smoothing.",
                "key": "post_smoothing_radius",
                "label": "post_smoothing_radius",
                "type": "Float"
            }
        },
        "ports": {
            "input": {
                "caption": "input",
                "data_type": "Heightmap",
                "description": "Input heightmap.",
                "type": "input"
            },
            "output": {
                "caption": "output",
                "data_type": "Heightmap",
                "description": "Gradient talus.",
                "type": "output"
            }
        }
    },
    "HeightmapToKernel": {
        "category": "Converter",
        "description": "Convert an heightmap to a kernel.",
        "label": "HeightmapToKernel",
        "parameters": {
            "envelope": {
                "description": "Determine if an enveloppe is applied to the kernel.",
                "key": "envelope",
                "label": "envelope",
                "type": "Bool"
            },
            "envelope_kernel": {
                "description": "Envelope kernel. Available values: biweight, cone, cone_smooth, cubic_pulse, disk, lorentzian, smooth_cosine, square, tricube.",
                "key": "envelope_kernel",
                "label": "envelope_kernel",
                "type": "Enumeration"
            },
            "normalize": {
                "description": "Normalize kernel so that the sum of the elements equals 1, preserving the overall intensity of an heightmap after convolution for instance.",
                "key": "normalize",
                "label": "normalize",
                "type": "Bool"
            },
            "radius": {
                "description": "Kernel radius with respect to the domain size.",
                "key": "radius",
                "label": "radius",
                "type": "Float"
            }
        },
        "ports": {
            "heightmap": {
                "caption": "heightmap",
                "data_type": "Heightmap",
                "description": "Input heightmap.",
                "type": "input"
            },
            "kernel": {
                "caption": "kernel",
                "data_type": "Array",
                "description": "Output kernel.",
                "type": "output"
            }
        }
    },
    "HeightmapToMask": {
        "category": "Converter",
        "description": "Convert an heightmap to a mask (remap values).",
        "label": "HeightmapToMask",
        "parameters": {
            "inverse": {
                "description": "Toggle inversion of the output values.",
                "key": "inverse",
                "label": "inverse",
                "type": "Bool"
            },
            "saturate_k": {
                "description": "Smoothing intensity of the amplitude saturation.",
                "key": "saturate_k",
                "label": "saturate_k",
                "type": "Float"
            },
            "saturate_range": {
                "description": "Saturation range: define the minimum and maximum values of the saturation process.",
                "key": "saturate_range",
                "label": "saturate_range",
                "type": "Value range"
            },
            "smoothing": {
                "description": "Enable or disable smoothing to reduce noise in the curvature computation.",
                "key": "smoothing",
                "label": "smoothing",
                "type": "Bool"
            },
            "smoothing_radius": {
                "description": "Specifies the radius for smoothing, determining how much the curvature is averaged over neighboring pixels.",
                "key": "smoothing_radius",
                "label": "smoothing_radius",
                "type": "Float"
            }
        },
        "ports": {
            "input": {
                "caption": "input",
                "data_type": "Heightmap",
                "description": "Heightmap.",
                "type": "input"
            },
            "mask": {
                "caption": "mask",
                "data_type": "Heightmap",
                "description": "Mask.",
                "type": "output"
            }
        }
    },
    "HeightmapToNormalMap": {
        "category": "Converter",
        "description": "No description available",
        "label": "HeightmapToNormalMap",
        "parameters": null,
        "ports": {
            "input": {
                "caption": "input",
                "data_type": "Heightmap",
                "description": "No description",
                "type": "input"
            },
            "normal map": {
                "caption": "normal map",
                "data_type": "HeightmapRGBA",
                "description": "No description",
                "type": "output"
            }
        }
    },
    "HeightmapToRGBA": {
        "category": "Converter",
        "description": "HeightmapToRGBA converts a series of heightmaps into an RGBA splatmap.",
        "label": "HeightmapToRGBA",
        "parameters": null,
        "ports": {
            "A": {
                "caption": "A",
                "data_type": "Heightmap",
                "description": "Alpha channel.",
                "type": "input"
            },
            "B": {
                "caption": "B",
                "data_type": "Heightmap",
                "description": "Blue channel.",
                "type": "input"
            },
            "G": {
                "caption": "G",
                "data_type": "Heightmap",
                "description": "Green channel.",
                "type": "input"
            },
            "R": {
                "caption": "R",
                "data_type": "Heightmap",
                "description": "Red channel.",
                "type": "input"
            },
            "RGBA": {
                "caption": "RGBA",
                "data_type": "HeightmapRGBA",
                "description": "RGBA heightmap.",
                "type": "output"
            }
        }
    },
    "HydraulicBlur": {
        "category": "WIP",
        "description": "Hydraulic Blur applied a cell-based hydraulic erosion using a nonlinear diffusion model.",
        "label": "HydraulicBlur",
        "parameters": {
            "k_smoothing": {
                "description": "Smoothing factor, if any.",
                "key": "k_smoothing",
                "label": "k_smoothing",
                "type": "Float"
            },
            "radius": {
                "description": "Gaussian filter radius (with respect to a unit domain).",
                "key": "radius",
                "label": "radius",
                "type": "Float"
            },
            "remap": {
                "description": "Remap the operator's output to a specified range, defaulting to [0, 1].",
                "key": "remap",
                "label": "remap",
                "type": "Value range"
            },
            "vmax": {
                "description": "Maximum elevation for the details.",
                "key": "vmax",
                "label": "vmax",
                "type": "Float"
            }
        },
        "ports": {
            "input": {
                "caption": "input",
                "data_type": "Heightmap",
                "description": "Input heightmap.",
                "type": "input"
            },
            "output": {
                "caption": "output",
                "data_type": "Heightmap",
                "description": "Eroded heightmap.",
                "type": "output"
            }
        }
    },
    "HydraulicMusgrave": {
        "category": "WIP",
        "description": "TODO",
        "label": "HydraulicMusgrave",
        "parameters": {
            "c_capacity": {
                "description": "TODO",
                "key": "c_capacity",
                "label": "c_capacity",
                "type": "Float"
            },
            "c_deposition": {
                "description": "TODO",
                "key": "c_deposition",
                "label": "c_deposition",
                "type": "Float"
            },
            "c_erosion": {
                "description": "TODO",
                "key": "c_erosion",
                "label": "c_erosion",
                "type": "Float"
            },
            "evap_rate": {
                "description": "TODO",
                "key": "evap_rate",
                "label": "evap_rate",
                "type": "Float"
            },
            "iterations": {
                "description": "TODO",
                "key": "iterations",
                "label": "iterations",
                "type": "Integer"
            },
            "water_level": {
                "description": "TODO",
                "key": "water_level",
                "label": "water_level",
                "type": "Float"
            }
        },
        "ports": {
            "input": {
                "caption": "input",
                "data_type": "Heightmap",
                "description": "TODO",
                "type": "input"
            },
            "moisture": {
                "caption": "moisture",
                "data_type": "Heightmap",
                "description": "TODO",
                "type": "input"
            },
            "output": {
                "caption": "output",
                "data_type": "Heightmap",
                "description": "TODO",
                "type": "output"
            }
        }
    },
    "HydraulicParticle": {
        "category": "Erosion/Hydraulic",
        "description": "HydraulicParticle is a particle-based hydraulic erosion operator that simulates the erosion and sediment transport processes that occur due to the flow of water over a terrain represented by the input heightmap. This type of operator models erosion by tracking the movement of virtual particles (or sediment particles) as they are transported by water flow and interact with the terrain.",
        "label": "HydraulicParticle",
        "parameters": {
            "c_capacity": {
                "description": "Particle capacity.",
                "key": "c_capacity",
                "label": "c_capacity",
                "type": "Float"
            },
            "c_deposition": {
                "description": "Particle deposition coefficient.",
                "key": "c_deposition",
                "label": "c_deposition",
                "type": "Float"
            },
            "c_erosion": {
                "description": "Particle erosion cofficient.",
                "key": "c_erosion",
                "label": "c_erosion",
                "type": "Float"
            },
            "c_inertia": {
                "description": "TODO",
                "key": "c_inertia",
                "label": "c_inertia",
                "type": "Float"
            },
            "deposition_only": {
                "description": "TODO",
                "key": "deposition_only",
                "label": "deposition_only",
                "type": "Bool"
            },
            "downscale": {
                "description": "TODO",
                "key": "downscale",
                "label": "downscale",
                "type": "Bool"
            },
            "drag_rate": {
                "description": "Particle drag rate.",
                "key": "drag_rate",
                "label": "drag_rate",
                "type": "Float"
            },
            "evap_rate": {
                "description": "Particle water evaporation rate.",
                "key": "evap_rate",
                "label": "evap_rate",
                "type": "Float"
            },
            "kc": {
                "description": "TODO",
                "key": "kc",
                "label": "kc",
                "type": "Float"
            },
            "particle_density": {
                "description": "TODO",
                "key": "particle_density",
                "label": "particle_density",
                "type": "Float"
            },
            "post_filtering": {
                "description": "TODO",
                "key": "post_filtering",
                "label": "post_filtering",
                "type": "Bool"
            },
            "post_filtering_local": {
                "description": "TODO",
                "key": "post_filtering_local",
                "label": "post_filtering_local",
                "type": "Bool"
            },
            "seed": {
                "description": "Random seed number.",
                "key": "seed",
                "label": "seed",
                "type": "Random seed number"
            }
        },
        "ports": {
            "bedrock": {
                "caption": "bedrock",
                "data_type": "Heightmap",
                "description": "Bedrock elevation, erosion process cannot carve the heightmap further down this point.",
                "type": "input"
            },
            "deposition": {
                "caption": "deposition",
                "data_type": "Heightmap",
                "description": "Deposition map (in [0, 1]).",
                "type": "output"
            },
            "erosion": {
                "caption": "erosion",
                "data_type": "Heightmap",
                "description": "Erosion map (in [0, 1]).",
                "type": "output"
            },
            "input": {
                "caption": "input",
                "data_type": "Heightmap",
                "description": "Input heightmap.",
                "type": "input"
            },
            "mask": {
                "caption": "mask",
                "data_type": "Heightmap",
                "description": "Mask defining the filtering intensity (expected in [0, 1]).",
                "type": "input"
            },
            "moisture": {
                "caption": "moisture",
                "data_type": "Heightmap",
                "description": "Moisture map, influences the amount of water locally deposited.",
                "type": "input"
            },
            "output": {
                "caption": "output",
                "data_type": "Heightmap",
                "description": "Eroded heightmap.",
                "type": "output"
            }
        }
    },
    "HydraulicProcedural": {
        "category": "WIP",
        "description": "TODO",
        "label": "HydraulicProcedural",
        "parameters": {
            "delta": {
                "description": "TODO",
                "key": "delta",
                "label": "delta",
                "type": "Float"
            },
            "density_factor": {
                "description": "TODO",
                "key": "density_factor",
                "label": "density_factor",
                "type": "Float"
            },
            "erosion_profile": {
                "description": "TODO",
                "key": "erosion_profile",
                "label": "erosion_profile",
                "type": "Enumeration"
            },
            "kernel_width_ratio": {
                "description": "TODO",
                "key": "kernel_width_ratio",
                "label": "kernel_width_ratio",
                "type": "Float"
            },
            "noise_ratio": {
                "description": "TODO",
                "key": "noise_ratio",
                "label": "noise_ratio",
                "type": "Float"
            },
            "phase_noise_amp": {
                "description": "TODO",
                "key": "phase_noise_amp",
                "label": "phase_noise_amp",
                "type": "Float"
            },
            "phase_smoothing": {
                "description": "TODO",
                "key": "phase_smoothing",
                "label": "phase_smoothing",
                "type": "Float"
            },
            "reverse_phase": {
                "description": "TODO",
                "key": "reverse_phase",
                "label": "reverse_phase",
                "type": "Bool"
            },
            "ridge_scaling": {
                "description": "TODO",
                "key": "ridge_scaling",
                "label": "ridge_scaling",
                "type": "Float"
            },
            "ridge_wavelength": {
                "description": "TODO",
                "key": "ridge_wavelength",
                "label": "ridge_wavelength",
                "type": "Float"
            },
            "rotate90": {
                "description": "TODO",
                "key": "rotate90",
                "label": "rotate90",
                "type": "Bool"
            },
            "seed": {
                "description": "TODO",
                "key": "seed",
                "label": "seed",
                "type": "Random seed number"
            },
            "slope_mask": {
                "description": "TODO",
                "key": "slope_mask",
                "label": "slope_mask",
                "type": "Float"
            },
            "use_default_mask": {
                "description": "TODO",
                "key": "use_default_mask",
                "label": "use_default_mask",
                "type": "Bool"
            }
        },
        "ports": {
            "input": {
                "caption": "input",
                "data_type": "Heightmap",
                "description": "TODO",
                "type": "input"
            },
            "mask": {
                "caption": "mask",
                "data_type": "Heightmap",
                "description": "Mask defining the filtering intensity (expected in [0, 1]).",
                "type": "input"
            },
            "output": {
                "caption": "output",
                "data_type": "Heightmap",
                "description": "TODO",
                "type": "output"
            },
            "ridge_mask": {
                "caption": "ridge_mask",
                "data_type": "Heightmap",
                "description": "TODO",
                "type": "output"
            }
        }
    },
    "HydraulicSchott": {
        "category": "WIP",
        "description": "TODO",
        "label": "HydraulicSchott",
        "parameters": {
            "c_deposition": {
                "description": "TODO",
                "key": "c_deposition",
                "label": "c_deposition",
                "type": "Float"
            },
            "c_erosion": {
                "description": "TODO",
                "key": "c_erosion",
                "label": "c_erosion",
                "type": "Float"
            },
            "c_thermal": {
                "description": "TODO",
                "key": "c_thermal",
                "label": "c_thermal",
                "type": "Float"
            },
            "deposition_weight": {
                "description": "TODO",
                "key": "deposition_weight",
                "label": "deposition_weight",
                "type": "Float"
            },
            "flow_acc_exponent": {
                "description": "TODO",
                "key": "flow_acc_exponent",
                "label": "flow_acc_exponent",
                "type": "Float"
            },
            "flow_acc_exponent_depo": {
                "description": "TODO",
                "key": "flow_acc_exponent_depo",
                "label": "flow_acc_exponent_depo",
                "type": "Float"
            },
            "flow_routing_exponent": {
                "description": "TODO",
                "key": "flow_routing_exponent",
                "label": "flow_routing_exponent",
                "type": "Float"
            },
            "iterations": {
                "description": "TODO",
                "key": "iterations",
                "label": "iterations",
                "type": "Integer"
            },
            "scale_talus_with_elevation": {
                "description": "TODO",
                "key": "scale_talus_with_elevation",
                "label": "scale_talus_with_elevation",
                "type": "Bool"
            },
            "talus_global": {
                "description": "TODO",
                "key": "talus_global",
                "label": "talus_global",
                "type": "Float"
            },
            "thermal_weight": {
                "description": "TODO",
                "key": "thermal_weight",
                "label": "thermal_weight",
                "type": "Float"
            }
        },
        "ports": {
            "flow_map": {
                "caption": "flow_map",
                "data_type": "Heightmap",
                "description": "TODO",
                "type": "output"
            },
            "input": {
                "caption": "input",
                "data_type": "Heightmap",
                "description": "TODO",
                "type": "input"
            },
            "mask": {
                "caption": "mask",
                "data_type": "Heightmap",
                "description": "Mask defining the filtering intensity (expected in [0, 1]).",
                "type": "input"
            },
            "output": {
                "caption": "output",
                "data_type": "Heightmap",
                "description": "TODO",
                "type": "output"
            }
        }
    },
    "HydraulicStream": {
        "category": "WIP",
        "description": "HydraulicStream is an hydraulic erosion operator using the flow stream approach and an infinite flow direction algorithm for simulating the erosion processes. Simulate water flow across the terrain using the infinite flow direction algorithm. As water flows over the terrain, flow accumulation representing the volume of water that passes through each point on the map, is computed to evaluate the erosive power of the water flow.",
        "label": "HydraulicStream",
        "parameters": {
            "c_erosion": {
                "description": "Erosion intensity.",
                "key": "c_erosion",
                "label": "c_erosion",
                "type": "Float"
            },
            "clipping_ratio": {
                "description": "Flow accumulation clipping ratio.",
                "key": "clipping_ratio",
                "label": "clipping_ratio",
                "type": "Float"
            },
            "radius": {
                "description": "Carving kernel radius.",
                "key": "radius",
                "label": "radius",
                "type": "Float"
            },
            "talus_ref": {
                "description": "Reference talus, with small values of talus_ref leading to thinner flow streams.",
                "key": "talus_ref",
                "label": "talus_ref",
                "type": "Float"
            }
        },
        "ports": {
            "erosion": {
                "caption": "erosion",
                "data_type": "Heightmap",
                "description": "Erosion map (in [0, 1]).",
                "type": "output"
            },
            "input": {
                "caption": "input",
                "data_type": "Heightmap",
                "description": "Input heightmap.",
                "type": "input"
            },
            "mask": {
                "caption": "mask",
                "data_type": "Heightmap",
                "description": "Mask defining the filtering intensity (expected in [0, 1]).",
                "type": "input"
            },
            "output": {
                "caption": "output",
                "data_type": "Heightmap",
                "description": "Eroded heightmap.",
                "type": "output"
            }
        }
    },
    "HydraulicStreamLog": {
        "category": "Erosion/Hydraulic",
        "description": "HydraulicStream is an hydraulic erosion operator using the flow stream approach and an infinite flow direction algorithm for simulating the erosion processes. Simulate water flow across the terrain using the infinite flow direction algorithm. As water flows over the terrain, flow accumulation representing the volume of water that passes through each point on the map, is computed to evaluate the erosive power of the water flow. Deposition is mimicked using convolution filters.",
        "label": "HydraulicStreamLog",
        "parameters": {
            "GPU": {
                "description": "Toogle GPU acceleration on or off.",
                "key": "GPU",
                "label": "GPU",
                "type": "Bool"
            },
            "c_erosion": {
                "description": "Erosion intensity.",
                "key": "c_erosion",
                "label": "c_erosion",
                "type": "Float"
            },
            "deposition_radius": {
                "description": "TODO",
                "key": "deposition_radius",
                "label": "deposition_radius",
                "type": "Float"
            },
            "deposition_scale_ratio": {
                "description": "TODO",
                "key": "deposition_scale_ratio",
                "label": "deposition_scale_ratio",
                "type": "Float"
            },
            "gradient_power": {
                "description": "TODO",
                "key": "gradient_power",
                "label": "gradient_power",
                "type": "Float"
            },
            "gradient_prefilter_radius": {
                "description": "TODO",
                "key": "gradient_prefilter_radius",
                "label": "gradient_prefilter_radius",
                "type": "Float"
            },
            "gradient_scaling_ratio": {
                "description": "TODO",
                "key": "gradient_scaling_ratio",
                "label": "gradient_scaling_ratio",
                "type": "Float"
            },
            "post_gain": {
                "description": "Set the gain. Gain is a power law transformation altering the distribution of signal values, compressing or expanding certain regions of the signal depending on the exponent of the power law.",
                "key": "post_gain",
                "label": "post_gain",
                "type": "Float"
            },
            "post_inverse": {
                "description": "Inverts the output values after processing, flipping low and high values across the midrange.",
                "key": "post_inverse",
                "label": "post_inverse",
                "type": "Bool"
            },
            "post_mix": {
                "description": "Mixing factor for blending input and output values. A value of 0 uses only the input, 1 uses only the output, and intermediate values perform a linear interpolation.",
                "key": "post_mix",
                "label": "post_mix",
                "type": "Float"
            },
            "post_mix_method": {
                "description": "Method used to combine input and output values. Options include linear interpolation (default), min, max, smooth min, smooth max, add, and subtract.",
                "key": "post_mix_method",
                "label": "post_mix_method",
                "type": "Enumeration"
            },
            "post_remap": {
                "description": "Linearly remaps the output values to a specified target range (default is [0, 1]).",
                "key": "post_remap",
                "label": "post_remap",
                "type": "Value range"
            },
            "post_smoothing_radius": {
                "description": "Defines the radius for post-processing smoothing, determining the size of the neighborhood used to average local values and reduce high-frequency detail. A radius of 0 disables smoothing.",
                "key": "post_smoothing_radius",
                "label": "post_smoothing_radius",
                "type": "Float"
            },
            "saturation_ratio": {
                "description": "Flow accumulation clipping ratio.",
                "key": "saturation_ratio",
                "label": "saturation_ratio",
                "type": "Float"
            },
            "talus_ref": {
                "description": "Reference talus, with small values of talus_ref  leading to thinner flow streams.",
                "key": "talus_ref",
                "label": "talus_ref",
                "type": "Float"
            }
        },
        "ports": {
            "deposition": {
                "caption": "deposition",
                "data_type": "Heightmap",
                "description": "Deposition map (in [0, 1]).",
                "type": "output"
            },
            "erosion": {
                "caption": "erosion",
                "data_type": "Heightmap",
                "description": "Erosion map (in [0, 1]).",
                "type": "output"
            },
            "flow_map": {
                "caption": "flow_map",
                "data_type": "Heightmap",
                "description": "TODO",
                "type": "output"
            },
            "input": {
                "caption": "input",
                "data_type": "Heightmap",
                "description": "TODO",
                "type": "input"
            },
            "mask": {
                "caption": "mask",
                "data_type": "Heightmap",
                "description": "Mask defining the filtering intensity (expected in [0, 1]).",
                "type": "input"
            },
            "output": {
                "caption": "output",
                "data_type": "Heightmap",
                "description": "TODO",
                "type": "output"
            }
        }
    },
    "HydraulicStreamUpscaleAmplification": {
        "category": "WIP",
        "description": "TODO",
        "label": "HydraulicStreamUpscaleAmplification",
        "parameters": {
            "c_erosion": {
                "description": "TODO",
                "key": "c_erosion",
                "label": "c_erosion",
                "type": "Float"
            },
            "clipping_ratio": {
                "description": "TODO",
                "key": "clipping_ratio",
                "label": "clipping_ratio",
                "type": "Float"
            },
            "persistence": {
                "description": "TODO",
                "key": "persistence",
                "label": "persistence",
                "type": "Float"
            },
            "radius": {
                "description": "TODO",
                "key": "radius",
                "label": "radius",
                "type": "Float"
            },
            "talus_ref": {
                "description": "Reference talus, with small values of talus_ref leading to thinner flow streams.",
                "key": "talus_ref",
                "label": "talus_ref",
                "type": "Float"
            },
            "upscaling_levels": {
                "description": "TODO",
                "key": "upscaling_levels",
                "label": "upscaling_levels",
                "type": "Integer"
            }
        },
        "ports": {
            "input": {
                "caption": "input",
                "data_type": "Heightmap",
                "description": "TODO",
                "type": "input"
            },
            "mask": {
                "caption": "mask",
                "data_type": "Heightmap",
                "description": "Mask defining the filtering intensity (expected in [0, 1]).",
                "type": "input"
            },
            "output": {
                "caption": "output",
                "data_type": "Heightmap",
                "description": "TODO",
                "type": "output"
            }
        }
    },
    "HydraulicVpipes": {
        "category": "WIP",
        "description": "HydraulicVpipes performs hydraulic erosion using a virtual pipe algorithm, which is a method that simulates erosion and sediment transport processes by mimicking the behavior of water flowing through a network of virtual pipes. This approach models erosion based on the principles of fluid dynamics and sediment transport, while also considering the local topography of the terrain represented by the input heightmap.",
        "label": "HydraulicVpipes",
        "parameters": {
            "c_capacity": {
                "description": "Particle capacity.",
                "key": "c_capacity",
                "label": "c_capacity",
                "type": "Float"
            },
            "c_deposition": {
                "description": "Particle deposition coefficient.",
                "key": "c_deposition",
                "label": "c_deposition",
                "type": "Float"
            },
            "c_erosion": {
                "description": "Particle erosion cofficient.",
                "key": "c_erosion",
                "label": "c_erosion",
                "type": "Float"
            },
            "evap_rate": {
                "description": "Particle water evaporation rate.",
                "key": "evap_rate",
                "label": "evap_rate",
                "type": "Float"
            },
            "iterations": {
                "description": "Number of simulation iterations.",
                "key": "iterations",
                "label": "iterations",
                "type": "Integer"
            },
            "rain_rate": {
                "description": "Water evaporation rate.",
                "key": "rain_rate",
                "label": "rain_rate",
                "type": "Float"
            },
            "water_height": {
                "description": "Total water height..",
                "key": "water_height",
                "label": "water_height",
                "type": "Float"
            }
        },
        "ports": {
            "bedrock": {
                "caption": "bedrock",
                "data_type": "Heightmap",
                "description": "Bedrock elevation, erosion process cannot carve the heightmap further down this point.",
                "type": "input"
            },
            "deposition": {
                "caption": "deposition",
                "data_type": "Heightmap",
                "description": "Deposition map (in [0, 1]).",
                "type": "output"
            },
            "erosion": {
                "caption": "erosion",
                "data_type": "Heightmap",
                "description": "Erosion map (in [0, 1]).",
                "type": "output"
            },
            "input": {
                "caption": "input",
                "data_type": "Heightmap",
                "description": "Input heightmap.",
                "type": "input"
            },
            "mask": {
                "caption": "mask",
                "data_type": "Heightmap",
                "description": "Mask defining the filtering intensity (expected in [0, 1]).",
                "type": "input"
            },
            "moisture": {
                "caption": "moisture",
                "data_type": "Heightmap",
                "description": "Moisture map, influences the amount of water locally deposited.",
                "type": "input"
            },
            "output": {
                "caption": "output",
                "data_type": "Heightmap",
                "description": "Eroded heightmap.",
                "type": "output"
            }
        }
    },
    "ImportHeightmap": {
        "category": "IO/Files",
        "description": "ImportHeightmap imports an heighmap from a grayscale PNG 8bit file.",
        "label": "ImportHeightmap",
        "parameters": {
            "fname": {
                "description": "Filename of the image file to import.",
                "key": "fname",
                "label": "fname",
                "type": "Filename"
            },
            "post_gain": {
                "description": "Set the gain. Gain is a power law transformation altering the distribution of signal values, compressing or expanding certain regions of the signal depending on the exponent of the power law.",
                "key": "post_gain",
                "label": "post_gain",
                "type": "Float"
            },
            "post_inverse": {
                "description": "Inverts the output values after processing, flipping low and high values across the midrange.",
                "key": "post_inverse",
                "label": "post_inverse",
                "type": "Bool"
            },
            "post_remap": {
                "description": "Linearly remaps the output values to a specified target range (default is [0, 1]).",
                "key": "post_remap",
                "label": "post_remap",
                "type": "Value range"
            },
            "post_smoothing_radius": {
                "description": "Defines the radius for post-processing smoothing, determining the size of the neighborhood used to average local values and reduce high-frequency detail. A radius of 0 disables smoothing.",
                "key": "post_smoothing_radius",
                "label": "post_smoothing_radius",
                "type": "Float"
            }
        },
        "ports": {
            "output": {
                "caption": "output",
                "data_type": "Heightmap",
                "description": "Output heightmap.",
                "type": "output"
            }
        }
    },
    "ImportTexture": {
        "category": "IO/Files",
        "description": "TODO",
        "label": "ImportTexture",
        "parameters": {
            "fname": {
                "description": "TODO",
                "key": "fname",
                "label": "fname",
                "type": "Filename"
            }
        },
        "ports": {
            "texture": {
                "caption": "texture",
                "data_type": "HeightmapRGBA",
                "description": "TODO",
                "type": "output"
            }
        }
    },
    "Inverse": {
        "category": "Math/Base",
        "description": "Inverse flips the sign of every values.",
        "label": "Inverse",
        "parameters": {
            "post_gain": {
                "description": "No description",
                "key": "post_gain",
                "label": "post_gain",
                "type": "Float"
            },
            "post_inverse": {
                "description": "No description",
                "key": "post_inverse",
                "label": "post_inverse",
                "type": "Bool"
            },
            "post_remap": {
                "description": "No description",
                "key": "post_remap",
                "label": "post_remap",
                "type": "Value range"
            },
            "post_smoothing_radius": {
                "description": "No description",
                "key": "post_smoothing_radius",
                "label": "post_smoothing_radius",
                "type": "Float"
            }
        },
        "ports": {
            "input": {
                "caption": "input",
                "data_type": "Heightmap",
                "description": "Input heightmap.",
                "type": "input"
            },
            "output": {
                "caption": "output",
                "data_type": "Heightmap",
                "description": "Binary heightmap.",
                "type": "output"
            }
        }
    },
    "KernelDiskSmooth": {
        "category": "Primitive/Kernel",
        "description": "No description available",
        "label": "KernelDiskSmooth",
        "parameters": {
            "normalize": {
                "description": "No description",
                "key": "normalize",
                "label": "normalize",
                "type": "Bool"
            },
            "r_cutoff": {
                "description": "No description",
                "key": "r_cutoff",
                "label": "r_cutoff",
                "type": "Float"
            },
            "radius": {
                "description": "No description",
                "key": "radius",
                "label": "radius",
                "type": "Float"
            }
        },
        "ports": {
            "kernel": {
                "caption": "kernel",
                "data_type": "Array",
                "description": "No description",
                "type": "output"
            }
        }
    },
    "KernelGabor": {
        "category": "Primitive/Kernel",
        "description": "KernelGabor generates a Gabor kernel.",
        "label": "KernelGabor",
        "parameters": {
            "angle": {
                "description": "Kernel angle.",
                "key": "angle",
                "label": "angle",
                "type": "Float"
            },
            "kw": {
                "description": "Kernel wavenumber (spatial frequency).",
                "key": "kw",
                "label": "kw",
                "type": "Float"
            },
            "normalize": {
                "description": "Normalize kernel so that the sum of the elements equals 1, preserving the overall intensity of an heightmap after convolution for instance.",
                "key": "normalize",
                "label": "normalize",
                "type": "Bool"
            },
            "radius": {
                "description": "Kernel radius with respect to the domain size.",
                "key": "radius",
                "label": "radius",
                "type": "Float"
            }
        },
        "ports": {
            "kernel": {
                "caption": "kernel",
                "data_type": "Array",
                "description": "Output kernel.",
                "type": "output"
            }
        }
    },
    "KernelPrim": {
        "category": "Primitive/Kernel",
        "description": "KernelPrim generates a 'kernel', refering to a small matrix used to apply specific effects based on convolution for instance.",
        "label": "KernelPrim",
        "parameters": {
            "kernel": {
                "description": "Kernel type. Available values: biweight, cone, cone_smooth, cubic_pulse, disk, lorentzian, smooth_cosine, square, tricube.",
                "key": "kernel",
                "label": "kernel",
                "type": "Enumeration"
            },
            "normalize": {
                "description": "Normalize kernel so that the sum of the elements equals 1, preserving the overall intensity of an heightmap after convolution for instance.",
                "key": "normalize",
                "label": "normalize",
                "type": "Bool"
            },
            "radius": {
                "description": "Kernel radius with respect to the domain size.",
                "key": "radius",
                "label": "radius",
                "type": "Float"
            }
        },
        "ports": {
            "kernel": {
                "caption": "kernel",
                "data_type": "Array",
                "description": "Output kernel.",
                "type": "output"
            }
        }
    },
    "KmeansClustering2": {
        "category": "Features/Clustering",
        "description": "KmeansClustering2 node groups the data into clusters based on the values of the two input features.",
        "label": "KmeansClustering2",
        "parameters": {
            "compute_scoring": {
                "description": "Determine whether scoring is computed.",
                "key": "compute_scoring",
                "label": "compute_scoring",
                "type": "Bool"
            },
            "nclusters": {
                "description": "Number of clusters.",
                "key": "nclusters",
                "label": "nclusters",
                "type": "Integer"
            },
            "normalize_inputs": {
                "description": "Determine whether the feature amplitudes are normalized before the clustering.",
                "key": "normalize_inputs",
                "label": "normalize_inputs",
                "type": "Bool"
            },
            "seed": {
                "description": "Random seed number.",
                "key": "seed",
                "label": "seed",
                "type": "Random seed number"
            },
            "weights.x": {
                "description": "Weight of the first feature.",
                "key": "weights.x",
                "label": "weights.x",
                "type": "Float"
            },
            "weights.y": {
                "description": "Weight of the second feature.",
                "key": "weights.y",
                "label": "weights.y",
                "type": "Float"
            }
        },
        "ports": {
            "feature 1": {
                "caption": "feature 1",
                "data_type": "Heightmap",
                "description": "First measurable property or characteristic of the data points being analyzed (e.g elevation, gradient norm, etc...",
                "type": "input"
            },
            "feature 2": {
                "caption": "feature 2",
                "data_type": "Heightmap",
                "description": "Second measurable property or characteristic of the data points being analyzed (e.g elevation, gradient norm, etc...",
                "type": "input"
            },
            "output": {
                "caption": "output",
                "data_type": "Heightmap",
                "description": "Cluster labelling.",
                "type": "output"
            },
            "scoring": {
                "caption": "scoring",
                "data_type": "vector<Heightmap>",
                "description": "Score in [0, 1] of the cell to belong to a given cluster",
                "type": "output"
            }
        }
    },
    "KmeansClustering3": {
        "category": "Features/Clustering",
        "description": "KmeansClustering2 node groups the data into clusters based on the values of the three input features.",
        "label": "KmeansClustering3",
        "parameters": {
            "compute_scoring": {
                "description": "Determine whether scoring is computed.",
                "key": "compute_scoring",
                "label": "compute_scoring",
                "type": "Bool"
            },
            "nclusters": {
                "description": "Number of clusters.",
                "key": "nclusters",
                "label": "nclusters",
                "type": "Integer"
            },
            "normalize_inputs": {
                "description": "Determine whether the feature amplitudes are normalized before the clustering.",
                "key": "normalize_inputs",
                "label": "normalize_inputs",
                "type": "Bool"
            },
            "seed": {
                "description": "Random seed number.",
                "key": "seed",
                "label": "seed",
                "type": "Random seed number"
            },
            "weights.x": {
                "description": "Weight of the first feature.",
                "key": "weights.x",
                "label": "weights.x",
                "type": "Float"
            },
            "weights.y": {
                "description": "Weight of the third feature.",
                "key": "weights.y",
                "label": "weights.y",
                "type": "Float"
            },
            "weights.z": {
                "description": "TODO",
                "key": "weights.z",
                "label": "weights.z",
                "type": "Float"
            }
        },
        "ports": {
            "feature 1": {
                "caption": "feature 1",
                "data_type": "Heightmap",
                "description": "First measurable property or characteristic of the data points being analyzed (e.g elevation, gradient norm, etc...",
                "type": "input"
            },
            "feature 2": {
                "caption": "feature 2",
                "data_type": "Heightmap",
                "description": "First measurable property or characteristic of the data points being analyzed (e.g elevation, gradient norm, etc...",
                "type": "input"
            },
            "feature 3": {
                "caption": "feature 3",
                "data_type": "Heightmap",
                "description": "Third measurable property or characteristic of the data points being analyzed (e.g elevation, gradient norm, etc...",
                "type": "input"
            },
            "output": {
                "caption": "output",
                "data_type": "Heightmap",
                "description": "Cluster labelling.",
                "type": "output"
            },
            "scoring": {
                "caption": "scoring",
                "data_type": "vector<Heightmap>",
                "description": "Score in [0, 1] of the cell to belong to a given cluster",
                "type": "output"
            }
        }
    },
    "Kuwahara": {
        "category": "WIP",
        "description": "TODO",
        "label": "Kuwahara",
        "parameters": {
            "mix_ratio": {
                "description": "TODO",
                "key": "mix_ratio",
                "label": "mix_ratio",
                "type": "Float"
            },
            "radius": {
                "description": "TODO",
                "key": "radius",
                "label": "radius",
                "type": "Float"
            }
        },
        "ports": {
            "input": {
                "caption": "input",
                "data_type": "Heightmap",
                "description": "TODO",
                "type": "input"
            },
            "mask": {
                "caption": "mask",
                "data_type": "Heightmap",
                "description": "Mask defining the filtering intensity (expected in [0, 1]).",
                "type": "input"
            },
            "output": {
                "caption": "output",
                "data_type": "Heightmap",
                "description": "TODO",
                "type": "output"
            }
        }
    },
    "Laplace": {
        "category": "Filter/Smoothing",
        "description": "Laplace smoothing filter reduces noise and smooth out variations in pixel intensity while preserving the overall structure of an image.",
        "label": "Laplace",
        "parameters": {
            "iterations": {
                "description": "Number of successive filtering iterations.",
                "key": "iterations",
                "label": "iterations",
                "type": "Integer"
            },
            "sigma": {
                "description": "Filtering strength.",
                "key": "sigma",
                "label": "sigma",
                "type": "Float"
            }
        },
        "ports": {
            "input": {
                "caption": "input",
                "data_type": "Heightmap",
                "description": "Input heightmap.",
                "type": "input"
            },
            "mask": {
                "caption": "mask",
                "data_type": "Heightmap",
                "description": "Mask defining the filtering intensity (expected in [0, 1]).",
                "type": "input"
            },
            "output": {
                "caption": "output",
                "data_type": "Heightmap",
                "description": "Filtered heightmap.",
                "type": "output"
            }
        }
    },
    "Lerp": {
        "category": "Math/Base",
        "description": "The Lerp operator, short for linear interpolation, is a method for smoothly transitioning between two values over a specified range or interval.",
        "label": "Lerp",
        "parameters": {
            "t": {
                "description": "Lerp factor (in [0, 1]). Used only if the node input 't' is not set.",
                "key": "t",
                "label": "t",
                "type": "Float"
            }
        },
        "ports": {
            "a": {
                "caption": "a",
                "data_type": "Heightmap",
                "description": "Start heightmap (t = 0).",
                "type": "input"
            },
            "b": {
                "caption": "b",
                "data_type": "Heightmap",
                "description": "End heightmap (t = 1).",
                "type": "input"
            },
            "output": {
                "caption": "output",
                "data_type": "Heightmap",
                "description": "Interpolated heightmap.",
                "type": "output"
            },
            "t": {
                "caption": "t",
                "data_type": "Heightmap",
                "description": "Lerp factor, expected in [0, 1].",
                "type": "input"
            }
        }
    },
    "MakeBinary": {
        "category": "Operator/Morphology",
        "description": "MakeBinary is a thresholding operator. It transforms an input heightmap into a binary heightmap, where each pixel is assigned either a value of 0 or 1, depending on whether its intensity value surpasses a specified threshold.",
        "label": "MakeBinary",
        "parameters": {
            "threshold": {
                "description": "Threshold value.",
                "key": "threshold",
                "label": "threshold",
                "type": "Float"
            }
        },
        "ports": {
            "input": {
                "caption": "input",
                "data_type": "Heightmap",
                "description": "Input heightmap.",
                "type": "input"
            },
            "output": {
                "caption": "output",
                "data_type": "Heightmap",
                "description": "Binary heightmap.",
                "type": "output"
            }
        }
    },
    "MakePeriodic": {
        "category": "Operator/Tiling",
        "description": "Makes the input heightmap tileable by creating a smooth linear transition at the boundaries. This is useful for generating seamless textures or terrains that can be repeated without visible seams.",
        "label": "MakePeriodic",
        "parameters": {
            "overlap": {
                "description": "The ratio of overlap at the boundaries. A higher value creates a smoother transition but may reduce the usable area of the heightmap.",
                "key": "overlap",
                "label": "overlap",
                "type": "Float"
            }
        },
        "ports": {
            "input": {
                "caption": "input",
                "data_type": "Heightmap",
                "description": "The input heightmap to be made tileable.",
                "type": "input"
            },
            "output": {
                "caption": "output",
                "data_type": "Heightmap",
                "description": "The output heightmap with smooth transitions at the boundaries, making it tileable.",
                "type": "output"
            }
        }
    },
    "MakePeriodicStitching": {
        "category": "Operator/Tiling",
        "description": "Makes the input heightmap tileable by creating a smooth transition at the boundaries using stitching. This is useful for generating seamless textures or terrains that can be repeated without visible seams.",
        "label": "MakePeriodicStitching",
        "parameters": {
            "overlap": {
                "description": "The ratio of overlap at the boundaries. A higher value creates a smoother transition but may reduce the usable area of the heightmap.",
                "key": "overlap",
                "label": "overlap",
                "type": "Float"
            }
        },
        "ports": {
            "input": {
                "caption": "input",
                "data_type": "Heightmap",
                "description": "The input heightmap to be made tileable.",
                "type": "input"
            },
            "output": {
                "caption": "output",
                "data_type": "Heightmap",
                "description": "The output heightmap with smooth transitions at the boundaries, making it tileable.",
                "type": "output"
            }
        }
    },
    "MeanShift": {
        "category": "WIP",
        "description": "TODO",
        "label": "MeanShift",
        "parameters": {
            "iterations": {
                "description": "TODO",
                "key": "iterations",
                "label": "iterations",
                "type": "Integer"
            },
            "mask_activate": {
                "description": "Enables or disables the internal mask. If the node's 'mask' input is connected, this setting is bypassed and the input mask is used instead.",
                "key": "mask_activate",
                "label": "mask_activate",
                "type": "Bool"
            },
            "mask_gain": {
                "description": "Controls the intensity or influence of the internal mask. Bypassed if the 'mask' input is connected.",
                "key": "mask_gain",
                "label": "mask_gain",
                "type": "Float"
            },
            "mask_inverse": {
                "description": "Inverts the internal mask, applying the operator where the mask is low. Ignored if a 'mask' input is provided.",
                "key": "mask_inverse",
                "label": "mask_inverse",
                "type": "Bool"
            },
            "mask_radius": {
                "description": "Defines the smoothing radius for the internal mask. A value of 0 disables smoothing. This is bypassed if the 'mask' input is used.",
                "key": "mask_radius",
                "label": "mask_radius",
                "type": "Float"
            },
            "mask_type": {
                "description": "Specifies how the internal mask is computed: 'Elevation' uses height, 'Gradient Norm' uses slope, and 'Elevation mid-range' selects the middle portion of the height range. This parameter is ignored when a 'mask' input is connected.",
                "key": "mask_type",
                "label": "mask_type",
                "type": "Choice"
            },
            "post_gain": {
                "description": "Set the gain. Gain is a power law transformation altering the distribution of signal values, compressing or expanding certain regions of the signal depending on the exponent of the power law.",
                "key": "post_gain",
                "label": "post_gain",
                "type": "Float"
            },
            "post_inverse": {
                "description": "Inverts the output values after processing, flipping low and high values across the midrange.",
                "key": "post_inverse",
                "label": "post_inverse",
                "type": "Bool"
            },
            "post_mix": {
                "description": "Mixing factor for blending input and output values. A value of 0 uses only the input, 1 uses only the output, and intermediate values perform a linear interpolation.",
                "key": "post_mix",
                "label": "post_mix",
                "type": "Float"
            },
            "post_mix_method": {
                "description": "Method used to combine input and output values. Options include linear interpolation (default), min, max, smooth min, smooth max, add, and subtract.",
                "key": "post_mix_method",
                "label": "post_mix_method",
                "type": "Enumeration"
            },
            "post_remap": {
                "description": "Linearly remaps the output values to a specified target range (default is [0, 1]).",
                "key": "post_remap",
                "label": "post_remap",
                "type": "Value range"
            },
            "post_smoothing_radius": {
                "description": "Defines the radius for post-processing smoothing, determining the size of the neighborhood used to average local values and reduce high-frequency detail. A radius of 0 disables smoothing.",
                "key": "post_smoothing_radius",
                "label": "post_smoothing_radius",
                "type": "Float"
            },
            "radius": {
                "description": "TODO",
                "key": "radius",
                "label": "radius",
                "type": "Float"
            },
            "talus_global": {
                "description": "TODO",
                "key": "talus_global",
                "label": "talus_global",
                "type": "Float"
            },
            "talus_weighted": {
                "description": "TODO",
                "key": "talus_weighted",
                "label": "talus_weighted",
                "type": "Bool"
            }
        },
        "ports": {
            "input": {
                "caption": "input",
                "data_type": "Heightmap",
                "description": "TODO",
                "type": "input"
            },
            "mask": {
                "caption": "mask",
                "data_type": "Heightmap",
                "description": "No description",
                "type": "input"
            },
            "output": {
                "caption": "output",
                "data_type": "Heightmap",
                "description": "TODO",
                "type": "output"
            }
        }
    },
    "Median3x3": {
        "category": "Filter/Smoothing",
        "description": "Median3x3 filter is a median filter with a 3x3 kernel used to reduce noise while preserving edges in an image. This process removes outliers and smooths the image without noise reduction and feature preservation in digital images.",
        "label": "Median3x3",
        "parameters": {
            "GPU": {
                "description": "Toogle GPU acceleration on or off.",
                "key": "GPU",
                "label": "GPU",
                "type": "Bool"
            }
        },
        "ports": {
            "input": {
                "caption": "input",
                "data_type": "Heightmap",
                "description": "Input heightmap.",
                "type": "input"
            },
            "mask": {
                "caption": "mask",
                "data_type": "Heightmap",
                "description": "Mask defining the filtering intensity (expected in [0, 1]).",
                "type": "input"
            },
            "output": {
                "caption": "output",
                "data_type": "Heightmap",
                "description": "Filtered heightmap.",
                "type": "output"
            }
        }
    },
    "MedianPseudo": {
        "category": "WIP",
        "description": "No description available",
        "label": "MedianPseudo",
        "parameters": {
            "post_gain": {
                "description": "Set the gain. Gain is a power law transformation altering the distribution of signal values, compressing or expanding certain regions of the signal depending on the exponent of the power law.",
                "key": "post_gain",
                "label": "post_gain",
                "type": "Float"
            },
            "post_inverse": {
                "description": "Inverts the output values after processing, flipping low and high values across the midrange.",
                "key": "post_inverse",
                "label": "post_inverse",
                "type": "Bool"
            },
            "post_remap": {
                "description": "Linearly remaps the output values to a specified target range (default is [0, 1]).",
                "key": "post_remap",
                "label": "post_remap",
                "type": "Value range"
            },
            "post_smoothing_radius": {
                "description": "Defines the radius for post-processing smoothing, determining the size of the neighborhood used to average local values and reduce high-frequency detail. A radius of 0 disables smoothing.",
                "key": "post_smoothing_radius",
                "label": "post_smoothing_radius",
                "type": "Float"
            },
            "radius": {
                "description": "No description",
                "key": "radius",
                "label": "radius",
                "type": "Float"
            }
        },
        "ports": {
            "input": {
                "caption": "input",
                "data_type": "Heightmap",
                "description": "No description",
                "type": "input"
            },
            "output": {
                "caption": "output",
                "data_type": "Heightmap",
                "description": "No description",
                "type": "output"
            }
        }
    },
    "MergeWaterDepths": {
        "category": "Hydrology",
        "description": "No description available",
        "label": "MergeWaterDepths",
        "parameters": {
            "k_smooth": {
                "description": "No description",
                "key": "k_smooth",
                "label": "k_smooth",
                "type": "Float"
            }
        },
        "ports": {
            "depth1": {
                "caption": "depth1",
                "data_type": "Heightmap",
                "description": "No description",
                "type": "input"
            },
            "depth2": {
                "caption": "depth2",
                "data_type": "Heightmap",
                "description": "No description",
                "type": "input"
            },
            "water_depth": {
                "caption": "water_depth",
                "data_type": "Heightmap",
                "description": "No description",
                "type": "output"
            }
        }
    },
    "MixNormalMap": {
        "category": "Texture",
        "description": "TODO",
        "label": "MixNormalMap",
        "parameters": {
            "blending_method": {
                "description": "TODO",
                "key": "blending_method",
                "label": "blending_method",
                "type": "Enumeration"
            },
            "detail_scaling": {
                "description": "TODO",
                "key": "detail_scaling",
                "label": "detail_scaling",
                "type": "Float"
            }
        },
        "ports": {
            "normal map": {
                "caption": "normal map",
                "data_type": "HeightmapRGBA",
                "description": "TODO",
                "type": "output"
            },
            "normal map base": {
                "caption": "normal map base",
                "data_type": "HeightmapRGBA",
                "description": "TODO",
                "type": "input"
            },
            "normal map detail": {
                "caption": "normal map detail",
                "data_type": "HeightmapRGBA",
                "description": "TODO",
                "type": "input"
            }
        }
    },
    "MixTexture": {
        "category": "Texture",
        "description": "MixTexture enables the seamless integration of multiple textures by utilizing the alpha channel information to control the blending.",
        "label": "MixTexture",
        "parameters": {
            "reset_output_alpha": {
                "description": "Reset the output alpha channel to 1 (opaque).",
                "key": "reset_output_alpha",
                "label": "reset_output_alpha",
                "type": "Bool"
            },
            "use_sqrt_avg": {
                "description": "Use square averaging for alpha-compositing (instead of linear averaging).",
                "key": "use_sqrt_avg",
                "label": "use_sqrt_avg",
                "type": "Bool"
            }
        },
        "ports": {
            "texture": {
                "caption": "texture",
                "data_type": "HeightmapRGBA",
                "description": "Output texture.",
                "type": "output"
            },
            "texture1": {
                "caption": "texture1",
                "data_type": "HeightmapRGBA",
                "description": "Input texture.",
                "type": "input"
            },
            "texture2": {
                "caption": "texture2",
                "data_type": "HeightmapRGBA",
                "description": "Input texture.",
                "type": "input"
            },
            "texture3": {
                "caption": "texture3",
                "data_type": "HeightmapRGBA",
                "description": "Input texture.",
                "type": "input"
            },
            "texture4": {
                "caption": "texture4",
                "data_type": "HeightmapRGBA",
                "description": "Input texture.",
                "type": "input"
            }
        }
    },
    "Mixer": {
        "category": "Operator/Blend",
        "description": "The Mixer operator takes several input heightmaps and blend them according to a mixing parameter expected in [0, 1].",
        "label": "Mixer",
        "parameters": {
            "gain_factor": {
                "description": "No description",
                "key": "gain_factor",
                "label": "gain_factor",
                "type": "Float"
            },
            "post_gain": {
                "description": "Set the gain. Gain is a power law transformation altering the distribution of signal values, compressing or expanding certain regions of the signal depending on the exponent of the power law.",
                "key": "post_gain",
                "label": "post_gain",
                "type": "Float"
            },
            "post_inverse": {
                "description": "Inverts the output values after processing, flipping low and high values across the midrange.",
                "key": "post_inverse",
                "label": "post_inverse",
                "type": "Bool"
            },
            "post_remap": {
                "description": "Linearly remaps the output values to a specified target range (default is [0, 1]).",
                "key": "post_remap",
                "label": "post_remap",
                "type": "Value range"
            },
            "post_smoothing_radius": {
                "description": "Defines the radius for post-processing smoothing, determining the size of the neighborhood used to average local values and reduce high-frequency detail. A radius of 0 disables smoothing.",
                "key": "post_smoothing_radius",
                "label": "post_smoothing_radius",
                "type": "Float"
            }
        },
        "ports": {
            "input 1": {
                "caption": "input 1",
                "data_type": "Heightmap",
                "description": "Input heightmap.",
                "type": "input"
            },
            "input 2": {
                "caption": "input 2",
                "data_type": "Heightmap",
                "description": "Input heightmap.",
                "type": "input"
            },
            "input 3": {
                "caption": "input 3",
                "data_type": "Heightmap",
                "description": "Input heightmap.",
                "type": "input"
            },
            "input 4": {
                "caption": "input 4",
                "data_type": "Heightmap",
                "description": "Input heightmap.",
                "type": "input"
            },
            "output": {
                "caption": "output",
                "data_type": "Heightmap",
                "description": "Output heightmap.",
                "type": "output"
            },
            "t": {
                "caption": "t",
                "data_type": "Heightmap",
                "description": "Mixing parameter, expected in [0, 1].",
                "type": "input"
            }
        }
    },
    "MorphologicalGradient": {
        "category": "Operator/Morphology",
        "description": "MorphologicalGradient calculates the difference between dilation and erosion of an image, resulting in the outline of objects. Use Cases: Edge detection, boundary extraction.",
        "label": "MorphologicalGradient",
        "parameters": {
            "GPU": {
                "description": "Toogle GPU acceleration on or off.",
                "key": "GPU",
                "label": "GPU",
                "type": "Bool"
            },
            "post_gain": {
                "description": "Set the gain. Gain is a power law transformation altering the distribution of signal values, compressing or expanding certain regions of the signal depending on the exponent of the power law.",
                "key": "post_gain",
                "label": "post_gain",
                "type": "Float"
            },
            "post_inverse": {
                "description": "Inverts the output values after processing, flipping low and high values across the midrange.",
                "key": "post_inverse",
                "label": "post_inverse",
                "type": "Bool"
            },
            "post_remap": {
                "description": "Linearly remaps the output values to a specified target range (default is [0, 1]).",
                "key": "post_remap",
                "label": "post_remap",
                "type": "Value range"
            },
            "post_smoothing_radius": {
                "description": "Defines the radius for post-processing smoothing, determining the size of the neighborhood used to average local values and reduce high-frequency detail. A radius of 0 disables smoothing.",
                "key": "post_smoothing_radius",
                "label": "post_smoothing_radius",
                "type": "Float"
            },
            "radius": {
                "description": "Filter radius with respect to the domain size.",
                "key": "radius",
                "label": "radius",
                "type": "Float"
            }
        },
        "ports": {
            "input": {
                "caption": "input",
                "data_type": "Heightmap",
                "description": "Input heightmap.",
                "type": "input"
            },
            "output": {
                "caption": "output",
                "data_type": "Heightmap",
                "description": "Gradient heightmap.",
                "type": "output"
            }
        }
    },
    "MorphologicalTopHat": {
        "category": "Operator/Morphology",
        "description": "Applies a morphological operator to detect ridges (top hat) or valleys (black hat) in a Digital Elevation Model (DEM).",
        "label": "MorphologicalTopHat",
        "parameters": {
            "GPU": {
                "description": "Toogle GPU acceleration on or off.",
                "key": "GPU",
                "label": "GPU",
                "type": "Bool"
            },
            "inverse": {
                "description": "Toggle inversion of the output values.",
                "key": "inverse",
                "label": "inverse",
                "type": "Bool"
            },
            "radius": {
                "description": "Filter radius with respect to the domain size.",
                "key": "radius",
                "label": "radius",
                "type": "Float"
            },
            "remap": {
                "description": "Remaps the operator's output values to a specified range, defaulting to [0, 1].",
                "key": "remap",
                "label": "remap",
                "type": "Value range"
            },
            "top_hat": {
                "description": "Toggle between top hat (ridge detection) and black hat (valley detection) morphological operator.",
                "key": "top_hat",
                "label": "top_hat",
                "type": "Bool"
            }
        },
        "ports": {
            "input": {
                "caption": "input",
                "data_type": "Heightmap",
                "description": "Input heightmap.",
                "type": "input"
            },
            "output": {
                "caption": "output",
                "data_type": "Heightmap",
                "description": "Output heightmap.",
                "type": "output"
            }
        }
    },
    "MountainInselberg": {
        "category": "Primitive/Geological",
        "description": "No description available",
        "label": "MountainInselberg",
        "parameters": {
            "add_deposition": {
                "description": "No description",
                "key": "add_deposition",
                "label": "add_deposition",
                "type": "Bool"
            },
            "angle": {
                "description": "No description",
                "key": "angle",
                "label": "angle",
                "type": "Float"
            },
            "base_noise_amp": {
                "description": "No description",
                "key": "base_noise_amp",
                "label": "base_noise_amp",
                "type": "Float"
            },
            "bulk_amp": {
                "description": "No description",
                "key": "bulk_amp",
                "label": "bulk_amp",
                "type": "Float"
            },
            "center": {
                "description": "No description",
                "key": "center",
                "label": "center",
                "type": "Vec2Float"
            },
            "elevation": {
                "description": "No description",
                "key": "elevation",
                "label": "elevation",
                "type": "Float"
            },
            "gamma": {
                "description": "No description",
                "key": "gamma",
                "label": "gamma",
                "type": "Float"
            },
            "k_smoothing": {
                "description": "No description",
                "key": "k_smoothing",
                "label": "k_smoothing",
                "type": "Float"
            },
            "octaves": {
                "description": "No description",
                "key": "octaves",
                "label": "octaves",
                "type": "Integer"
            },
            "post_gain": {
                "description": "No description",
                "key": "post_gain",
                "label": "post_gain",
                "type": "Float"
            },
            "post_inverse": {
                "description": "No description",
                "key": "post_inverse",
                "label": "post_inverse",
                "type": "Bool"
            },
            "post_remap": {
                "description": "No description",
                "key": "post_remap",
                "label": "post_remap",
                "type": "Value range"
            },
            "post_smoothing_radius": {
                "description": "No description",
                "key": "post_smoothing_radius",
                "label": "post_smoothing_radius",
                "type": "Float"
            },
            "round_shape": {
                "description": "No description",
                "key": "round_shape",
                "label": "round_shape",
                "type": "Bool"
            },
            "rugosity": {
                "description": "No description",
                "key": "rugosity",
                "label": "rugosity",
                "type": "Float"
            },
            "scale": {
                "description": "No description",
                "key": "scale",
                "label": "scale",
                "type": "Float"
            },
            "seed": {
                "description": "No description",
                "key": "seed",
                "label": "seed",
                "type": "Random seed number"
            }
        },
        "ports": {
            "dx": {
                "caption": "dx",
                "data_type": "Heightmap",
                "description": "No description",
                "type": "input"
            },
            "dy": {
                "caption": "dy",
                "data_type": "Heightmap",
                "description": "No description",
                "type": "input"
            },
            "envelope": {
                "caption": "envelope",
                "data_type": "Heightmap",
                "description": "No description",
                "type": "input"
            },
            "out": {
                "caption": "out",
                "data_type": "Heightmap",
                "description": "No description",
                "type": "output"
            }
        }
    },
    "MountainRangeRadial": {
        "category": "Primitive/Geological",
        "description": "Generates a heightmap representing a radial mountain range emanating from a specified center.",
        "label": "MountainRangeRadial",
        "parameters": {
            "angle_spread_ratio": {
                "description": "Controls the angular spread of the mountain range. Lower values create more concentrated ridges, while higher values distribute them more evenly.",
                "key": "angle_spread_ratio",
                "label": "angle_spread_ratio",
                "type": "Float"
            },
            "center": {
                "description": "The center point of the radial mountain range as normalized coordinates within [0, 1].",
                "key": "center",
                "label": "center",
                "type": "Vec2Float"
            },
            "core_size_ratio": {
                "description": "Determines the relative size of the core mountain region before tapering begins.",
                "key": "core_size_ratio",
                "label": "core_size_ratio",
                "type": "Float"
            },
            "half_width": {
                "description": "Defines the half-width of the radial mountain range, controlling its spread.",
                "key": "half_width",
                "label": "half_width",
                "type": "Float"
            },
            "inverse": {
                "description": "Toggle inversion of the output values, flipping elevations.",
                "key": "inverse",
                "label": "inverse",
                "type": "Bool"
            },
            "kw": {
                "description": "The wave numbers (frequency components) that define the base frequency of the noise function.",
                "key": "kw",
                "label": "kw",
                "type": "Wavenumber"
            },
            "lacunarity": {
                "description": "The frequency scaling factor for successive noise octaves. Higher values increase the frequency of each successive octave.",
                "key": "lacunarity",
                "label": "lacunarity",
                "type": "Float"
            },
            "octaves": {
                "description": "The number of octaves for fractal noise generation. More octaves add finer details to the terrain.",
                "key": "octaves",
                "label": "octaves",
                "type": "Integer"
            },
            "persistence": {
                "description": "The amplitude scaling factor for subsequent noise octaves. Lower values reduce the contribution of higher octaves.",
                "key": "persistence",
                "label": "persistence",
                "type": "Float"
            },
            "remap": {
                "description": "Remaps the operator's output values to a specified range, defaulting to [0, 1].",
                "key": "remap",
                "label": "remap",
                "type": "Value range"
            },
            "seed": {
                "description": "Sets the seed for random noise generation, ensuring reproducibility.",
                "key": "seed",
                "label": "seed",
                "type": "Random seed number"
            },
            "weight": {
                "description": "Initial weight for noise contribution. Higher values amplify the primary terrain features.",
                "key": "weight",
                "label": "weight",
                "type": "Float"
            }
        },
        "ports": {
            "angle": {
                "caption": "angle",
                "data_type": "Heightmap",
                "description": "Optional output providing the computed angle values for terrain features.",
                "type": "output"
            },
            "control": {
                "caption": "control",
                "data_type": "Heightmap",
                "description": "Optional input that modulates the terrain shape and noise distribution.",
                "type": "input"
            },
            "dx": {
                "caption": "dx",
                "data_type": "Heightmap",
                "description": "Optional input for perturbing the terrain in the X-direction.",
                "type": "input"
            },
            "dy": {
                "caption": "dy",
                "data_type": "Heightmap",
                "description": "Optional input for perturbing the terrain in the Y-direction.",
                "type": "input"
            },
            "envelope": {
                "caption": "envelope",
                "data_type": "Heightmap",
                "description": "Modulates the amplitude of the mountain range across the heightmap.",
                "type": "input"
            },
            "output": {
                "caption": "output",
                "data_type": "Heightmap",
                "description": "The final heightmap representing the radial mountain range.",
                "type": "output"
            }
        }
    },
    "MountainStump": {
        "category": "Primitive/Geological",
        "description": "Generates a mountain-like heightmap with a flattened (stump-shaped) peak. Credit: Ian Fontova.",
        "label": "MountainStump",
        "parameters": {
            "add_deposition": {
                "description": "No description",
                "key": "add_deposition",
                "label": "add_deposition",
                "type": "Bool"
            },
            "angle": {
                "description": "No description",
                "key": "angle",
                "label": "angle",
                "type": "Float"
            },
            "base_noise_amp": {
                "description": "No description",
                "key": "base_noise_amp",
                "label": "base_noise_amp",
                "type": "Float"
            },
            "center": {
                "description": "No description",
                "key": "center",
                "label": "center",
                "type": "Vec2Float"
            },
            "elevation": {
                "description": "No description",
                "key": "elevation",
                "label": "elevation",
                "type": "Float"
            },
            "gamma": {
                "description": "No description",
                "key": "gamma",
                "label": "gamma",
                "type": "Float"
            },
            "k_smoothing": {
                "description": "No description",
                "key": "k_smoothing",
                "label": "k_smoothing",
                "type": "Float"
            },
            "octaves": {
                "description": "No description",
                "key": "octaves",
                "label": "octaves",
                "type": "Integer"
            },
            "peak_kw": {
                "description": "No description",
                "key": "peak_kw",
                "label": "peak_kw",
                "type": "Float"
            },
            "post_gain": {
                "description": "No description",
                "key": "post_gain",
                "label": "post_gain",
                "type": "Float"
            },
            "post_inverse": {
                "description": "No description",
                "key": "post_inverse",
                "label": "post_inverse",
                "type": "Bool"
            },
            "post_remap": {
                "description": "No description",
                "key": "post_remap",
                "label": "post_remap",
                "type": "Value range"
            },
            "post_smoothing_radius": {
                "description": "No description",
                "key": "post_smoothing_radius",
                "label": "post_smoothing_radius",
                "type": "Float"
            },
            "ridge_amp": {
                "description": "No description",
                "key": "ridge_amp",
                "label": "ridge_amp",
                "type": "Float"
            },
            "rugosity": {
                "description": "No description",
                "key": "rugosity",
                "label": "rugosity",
                "type": "Float"
            },
            "scale": {
                "description": "No description",
                "key": "scale",
                "label": "scale",
                "type": "Float"
            },
            "seed": {
                "description": "No description",
                "key": "seed",
                "label": "seed",
                "type": "Random seed number"
            }
        },
        "ports": {
            "dx": {
                "caption": "dx",
                "data_type": "Heightmap",
                "description": "No description",
                "type": "input"
            },
            "dy": {
                "caption": "dy",
                "data_type": "Heightmap",
                "description": "No description",
                "type": "input"
            },
            "envelope": {
                "caption": "envelope",
                "data_type": "Heightmap",
                "description": "No description",
                "type": "input"
            },
            "out": {
                "caption": "out",
                "data_type": "Heightmap",
                "description": "No description",
                "type": "output"
            }
        }
    },
    "MountainTibesti": {
        "category": "Primitive/Geological",
        "description": "No description available",
        "label": "MountainTibesti",
        "parameters": {
            "add_deposition": {
                "description": "No description",
                "key": "add_deposition",
                "label": "add_deposition",
                "type": "Bool"
            },
            "angle": {
                "description": "No description",
                "key": "angle",
                "label": "angle",
                "type": "Float"
            },
            "angle_spread_ratio": {
                "description": "No description",
                "key": "angle_spread_ratio",
                "label": "angle_spread_ratio",
                "type": "Float"
            },
            "base_noise_amp": {
                "description": "No description",
                "key": "base_noise_amp",
                "label": "base_noise_amp",
                "type": "Float"
            },
            "bulk_amp": {
                "description": "No description",
                "key": "bulk_amp",
                "label": "bulk_amp",
                "type": "Float"
            },
            "center": {
                "description": "No description",
                "key": "center",
                "label": "center",
                "type": "Vec2Float"
            },
            "elevation": {
                "description": "No description",
                "key": "elevation",
                "label": "elevation",
                "type": "Float"
            },
            "gamma": {
                "description": "No description",
                "key": "gamma",
                "label": "gamma",
                "type": "Float"
            },
            "octaves": {
                "description": "No description",
                "key": "octaves",
                "label": "octaves",
                "type": "Integer"
            },
            "peak_kw": {
                "description": "No description",
                "key": "peak_kw",
                "label": "peak_kw",
                "type": "Float"
            },
            "post_gain": {
                "description": "No description",
                "key": "post_gain",
                "label": "post_gain",
                "type": "Float"
            },
            "post_inverse": {
                "description": "No description",
                "key": "post_inverse",
                "label": "post_inverse",
                "type": "Bool"
            },
            "post_remap": {
                "description": "No description",
                "key": "post_remap",
                "label": "post_remap",
                "type": "Value range"
            },
            "post_smoothing_radius": {
                "description": "No description",
                "key": "post_smoothing_radius",
                "label": "post_smoothing_radius",
                "type": "Float"
            },
            "rugosity": {
                "description": "No description",
                "key": "rugosity",
                "label": "rugosity",
                "type": "Float"
            },
            "scale": {
                "description": "No description",
                "key": "scale",
                "label": "scale",
                "type": "Float"
            },
            "seed": {
                "description": "No description",
                "key": "seed",
                "label": "seed",
                "type": "Random seed number"
            }
        },
        "ports": {
            "dx": {
                "caption": "dx",
                "data_type": "Heightmap",
                "description": "No description",
                "type": "input"
            },
            "dy": {
                "caption": "dy",
                "data_type": "Heightmap",
                "description": "No description",
                "type": "input"
            },
            "envelope": {
                "caption": "envelope",
                "data_type": "Heightmap",
                "description": "No description",
                "type": "input"
            },
            "out": {
                "caption": "out",
                "data_type": "Heightmap",
                "description": "No description",
                "type": "output"
            }
        }
    },
    "Noise": {
        "category": "Primitive/Coherent",
        "description": "Noise node generates coherent and random-looking patterns.",
        "label": "Noise",
        "parameters": {
            "GPU": {
                "description": "Toogle GPU acceleration on or off.",
                "key": "GPU",
                "label": "GPU",
                "type": "Bool"
            },
            "kw": {
                "description": "Noise wavenumbers (kx, ky) for each directions.",
                "key": "kw",
                "label": "kw",
                "type": "Wavenumber"
            },
            "noise_type": {
                "description": "Base primitive noise. Available values: OpenSimplex2, OpenSimplex2S, Perlin, Perlin (billow), Perlin (half), Value, Value (cubic), Value (delaunay), Value (linear), Worley, Worley (doube), Worley (value).",
                "key": "noise_type",
                "label": "noise_type",
                "type": "Enumeration"
            },
            "post_gain": {
                "description": "Set the gain. Gain is a power law transformation altering the distribution of signal values, compressing or expanding certain regions of the signal depending on the exponent of the power law.",
                "key": "post_gain",
                "label": "post_gain",
                "type": "Float"
            },
            "post_inverse": {
                "description": "Inverts the output values after processing, flipping low and high values across the midrange.",
                "key": "post_inverse",
                "label": "post_inverse",
                "type": "Bool"
            },
            "post_remap": {
                "description": "Linearly remaps the output values to a specified target range (default is [0, 1]).",
                "key": "post_remap",
                "label": "post_remap",
                "type": "Value range"
            },
            "post_smoothing_radius": {
                "description": "Defines the radius for post-processing smoothing, determining the size of the neighborhood used to average local values and reduce high-frequency detail. A radius of 0 disables smoothing.",
                "key": "post_smoothing_radius",
                "label": "post_smoothing_radius",
                "type": "Float"
            },
            "seed": {
                "description": "Random seed number.",
                "key": "seed",
                "label": "seed",
                "type": "Random seed number"
            }
        },
        "ports": {
            "dx": {
                "caption": "dx",
                "data_type": "Heightmap",
                "description": "Displacement with respect to the domain size (x-direction).",
                "type": "input"
            },
            "dy": {
                "caption": "dy",
                "data_type": "Heightmap",
                "description": "Displacement with respect to the domain size (y-direction).",
                "type": "input"
            },
            "envelope": {
                "caption": "envelope",
                "data_type": "Heightmap",
                "description": "Output noise amplitude envelope.",
                "type": "input"
            },
            "out": {
                "caption": "out",
                "data_type": "Heightmap",
                "description": "TODO",
                "type": "output"
            }
        }
    },
    "NoiseFbm": {
        "category": "Primitive/Coherent",
        "description": "Fractal noise is a mathematical algorithm used to generate complex and detailed patterns characterized by self-similarity across different scales.",
        "label": "NoiseFbm",
        "parameters": {
            "GPU": {
                "description": "Toogle GPU acceleration on or off.",
                "key": "GPU",
                "label": "GPU",
                "type": "Bool"
            },
            "kw": {
                "description": "Noise wavenumbers (kx, ky) for each directions.",
                "key": "kw",
                "label": "kw",
                "type": "Wavenumber"
            },
            "lacunarity": {
                "description": "Wavenumber ratio between each octaves.",
                "key": "lacunarity",
                "label": "lacunarity",
                "type": "Float"
            },
            "noise_type": {
                "description": "Base primitive noise. Available values: OpenSimplex2, OpenSimplex2S, Perlin, Perlin (billow), Perlin (half), Value, Value (cubic), Worley, Worley (doube), Worley (value).",
                "key": "noise_type",
                "label": "noise_type",
                "type": "Enumeration"
            },
            "octaves": {
                "description": "Number of octaves.",
                "key": "octaves",
                "label": "octaves",
                "type": "Integer"
            },
            "persistence": {
                "description": "Octave persistence.",
                "key": "persistence",
                "label": "persistence",
                "type": "Float"
            },
            "post_gain": {
                "description": "Set the gain. Gain is a power law transformation altering the distribution of signal values, compressing or expanding certain regions of the signal depending on the exponent of the power law.",
                "key": "post_gain",
                "label": "post_gain",
                "type": "Float"
            },
            "post_inverse": {
                "description": "Inverts the output values after processing, flipping low and high values across the midrange.",
                "key": "post_inverse",
                "label": "post_inverse",
                "type": "Bool"
            },
            "post_remap": {
                "description": "Linearly remaps the output values to a specified target range (default is [0, 1]).",
                "key": "post_remap",
                "label": "post_remap",
                "type": "Value range"
            },
            "post_smoothing_radius": {
                "description": "Defines the radius for post-processing smoothing, determining the size of the neighborhood used to average local values and reduce high-frequency detail. A radius of 0 disables smoothing.",
                "key": "post_smoothing_radius",
                "label": "post_smoothing_radius",
                "type": "Float"
            },
            "seed": {
                "description": "Random seed number.",
                "key": "seed",
                "label": "seed",
                "type": "Random seed number"
            },
            "weight": {
                "description": "Octave weighting.",
                "key": "weight",
                "label": "weight",
                "type": "Float"
            }
        },
        "ports": {
            "control": {
                "caption": "control",
                "data_type": "Heightmap",
                "description": "Control parameter, acts as a multiplier for the weight parameter.",
                "type": "input"
            },
            "dx": {
                "caption": "dx",
                "data_type": "Heightmap",
                "description": "Displacement with respect to the domain size (x-direction).",
                "type": "input"
            },
            "dy": {
                "caption": "dy",
                "data_type": "Heightmap",
                "description": "Displacement with respect to the domain size (y-direction).",
                "type": "input"
            },
            "envelope": {
                "caption": "envelope",
                "data_type": "Heightmap",
                "description": "Output noise amplitude envelope.",
                "type": "input"
            },
            "output": {
                "caption": "output",
                "data_type": "Heightmap",
                "description": "Generated noise.",
                "type": "output"
            }
        }
    },
    "NoiseIq": {
        "category": "Primitive/Coherent",
        "description": "NoiseIq, variant of NoiseFbm.",
        "label": "NoiseIq",
        "parameters": {
            "gradient_scale": {
                "description": "Gradient influence scaling.",
                "key": "gradient_scale",
                "label": "gradient_scale",
                "type": "Float"
            },
            "inverse": {
                "description": "Toggle inversion of the output values.",
                "key": "inverse",
                "label": "inverse",
                "type": "Bool"
            },
            "kw": {
                "description": "Noise wavenumbers (kx, ky) for each directions.",
                "key": "kw",
                "label": "kw",
                "type": "Wavenumber"
            },
            "lacunarity": {
                "description": "Wavenumber ratio between each octaves.",
                "key": "lacunarity",
                "label": "lacunarity",
                "type": "Float"
            },
            "noise_type": {
                "description": "Base primitive noise. Available values: OpenSimplex2, OpenSimplex2S, Perlin, Perlin (billow), Perlin (half), Value, Value (cubic), Worley, Worley (doube), Worley (value).",
                "key": "noise_type",
                "label": "noise_type",
                "type": "Enumeration"
            },
            "octaves": {
                "description": "Number of octaves.",
                "key": "octaves",
                "label": "octaves",
                "type": "Integer"
            },
            "persistence": {
                "description": "Octave persistence.",
                "key": "persistence",
                "label": "persistence",
                "type": "Float"
            },
            "remap": {
                "description": "Remap the operator's output to a specified range, defaulting to [0, 1].",
                "key": "remap",
                "label": "remap",
                "type": "Value range"
            },
            "seed": {
                "description": "Random seed number.",
                "key": "seed",
                "label": "seed",
                "type": "Random seed number"
            },
            "weight": {
                "description": "Octave weighting.",
                "key": "weight",
                "label": "weight",
                "type": "Float"
            }
        },
        "ports": {
            "control": {
                "caption": "control",
                "data_type": "Heightmap",
                "description": "Control parameter, acts as a multiplier for the weight parameter.",
                "type": "input"
            },
            "dx": {
                "caption": "dx",
                "data_type": "Heightmap",
                "description": "Displacement with respect to the domain size (x-direction).",
                "type": "input"
            },
            "dy": {
                "caption": "dy",
                "data_type": "Heightmap",
                "description": "Displacement with respect to the domain size (y-direction).",
                "type": "input"
            },
            "envelope": {
                "caption": "envelope",
                "data_type": "Heightmap",
                "description": "Output noise amplitude envelope.",
                "type": "input"
            },
            "output": {
                "caption": "output",
                "data_type": "Heightmap",
                "description": "Generated noise.",
                "type": "output"
            }
        }
    },
    "NoiseJordan": {
        "category": "Primitive/Coherent",
        "description": "NoiseJordan, variant of NoiseFbm.",
        "label": "NoiseJordan",
        "parameters": {
            "gradient_scale": {
                "description": "TODO",
                "key": "gradient_scale",
                "label": "gradient_scale",
                "type": "Float"
            },
            "inverse": {
                "description": "Toggle inversion of the output values.",
                "key": "inverse",
                "label": "inverse",
                "type": "Bool"
            },
            "kw": {
                "description": "Noise wavenumbers (kx, ky) for each directions.",
                "key": "kw",
                "label": "kw",
                "type": "Wavenumber"
            },
            "lacunarity": {
                "description": "Wavenumber ratio between each octaves.",
                "key": "lacunarity",
                "label": "lacunarity",
                "type": "Float"
            },
            "noise_type": {
                "description": "Base primitive noise. Available values: OpenSimplex2, OpenSimplex2S, Perlin, Perlin (billow), Perlin (half), Value, Value (cubic), Worley, Worley (doube), Worley (value).",
                "key": "noise_type",
                "label": "noise_type",
                "type": "Enumeration"
            },
            "octaves": {
                "description": "Number of octaves.",
                "key": "octaves",
                "label": "octaves",
                "type": "Integer"
            },
            "persistence": {
                "description": "Octave persistence.",
                "key": "persistence",
                "label": "persistence",
                "type": "Float"
            },
            "remap": {
                "description": "Remap the operator's output to a specified range, defaulting to [0, 1].",
                "key": "remap",
                "label": "remap",
                "type": "Value range"
            },
            "seed": {
                "description": "Random seed number.",
                "key": "seed",
                "label": "seed",
                "type": "Random seed number"
            },
            "weight": {
                "description": "Octave weighting.",
                "key": "weight",
                "label": "weight",
                "type": "Float"
            }
        },
        "ports": {
            "control": {
                "caption": "control",
                "data_type": "Heightmap",
                "description": "Control parameter, acts as a multiplier for the weight parameter.",
                "type": "input"
            },
            "dx": {
                "caption": "dx",
                "data_type": "Heightmap",
                "description": "Displacement with respect to the domain size (x-direction).",
                "type": "input"
            },
            "dy": {
                "caption": "dy",
                "data_type": "Heightmap",
                "description": "Displacement with respect to the domain size (y-direction).",
                "type": "input"
            },
            "envelope": {
                "caption": "envelope",
                "data_type": "Heightmap",
                "description": "Output noise amplitude envelope.",
                "type": "input"
            },
            "output": {
                "caption": "output",
                "data_type": "Heightmap",
                "description": "Generated noise.",
                "type": "output"
            }
        }
    },
    "NoiseParberry": {
        "category": "Primitive/Coherent",
        "description": "NoiseParberry, variant of NoiseFbm, is a Perlin noise based terrain generator from Ian Parberry, Tobler's First Law of Geography, Self Similarity, and Perlin Noise: A Large Scale Analysis of Gradient Distribution in Southern Utah with Application to Procedural Terrain Generation.",
        "label": "NoiseParberry",
        "parameters": {
            "inverse": {
                "description": "Toggle inversion of the output values.",
                "key": "inverse",
                "label": "inverse",
                "type": "Bool"
            },
            "kw": {
                "description": "Noise wavenumbers (kx, ky) for each directions.",
                "key": "kw",
                "label": "kw",
                "type": "Wavenumber"
            },
            "lacunarity": {
                "description": "Wavenumber ratio between each octaves.",
                "key": "lacunarity",
                "label": "lacunarity",
                "type": "Float"
            },
            "mu": {
                "description": "Gradient magnitude exponent.",
                "key": "mu",
                "label": "mu",
                "type": "Float"
            },
            "octaves": {
                "description": "Number of octaves.",
                "key": "octaves",
                "label": "octaves",
                "type": "Integer"
            },
            "persistence": {
                "description": "Octave persistence.",
                "key": "persistence",
                "label": "persistence",
                "type": "Float"
            },
            "remap": {
                "description": "Remap the operator's output to a specified range, defaulting to [0, 1].",
                "key": "remap",
                "label": "remap",
                "type": "Value range"
            },
            "seed": {
                "description": "Random seed number.",
                "key": "seed",
                "label": "seed",
                "type": "Random seed number"
            },
            "weight": {
                "description": "Octave weighting.",
                "key": "weight",
                "label": "weight",
                "type": "Float"
            }
        },
        "ports": {
            "control": {
                "caption": "control",
                "data_type": "Heightmap",
                "description": "Control parameter, acts as a multiplier for the weight parameter.",
                "type": "input"
            },
            "dx": {
                "caption": "dx",
                "data_type": "Heightmap",
                "description": "Displacement with respect to the domain size (x-direction).",
                "type": "input"
            },
            "dy": {
                "caption": "dy",
                "data_type": "Heightmap",
                "description": "Displacement with respect to the domain size (y-direction).",
                "type": "input"
            },
            "envelope": {
                "caption": "envelope",
                "data_type": "Heightmap",
                "description": "Output noise amplitude envelope.",
                "type": "input"
            },
            "output": {
                "caption": "output",
                "data_type": "Heightmap",
                "description": "Generated noise.",
                "type": "output"
            }
        }
    },
    "NoisePingpong": {
        "category": "Primitive/Coherent",
        "description": "NoisePingPong, variant of NoiseFbm.",
        "label": "NoisePingpong",
        "parameters": {
            "inverse": {
                "description": "Toggle inversion of the output values.",
                "key": "inverse",
                "label": "inverse",
                "type": "Bool"
            },
            "kw": {
                "description": "Noise wavenumbers (kx, ky) for each directions.",
                "key": "kw",
                "label": "kw",
                "type": "Wavenumber"
            },
            "lacunarity": {
                "description": "Wavenumber ratio between each octaves.",
                "key": "lacunarity",
                "label": "lacunarity",
                "type": "Float"
            },
            "noise_type": {
                "description": "Base primitive noise. Available values: OpenSimplex2, OpenSimplex2S, Perlin, Perlin (billow), Perlin (half), Value, Value (cubic), Worley, Worley (doube), Worley (value).",
                "key": "noise_type",
                "label": "noise_type",
                "type": "Enumeration"
            },
            "octaves": {
                "description": "Number of octaves.",
                "key": "octaves",
                "label": "octaves",
                "type": "Integer"
            },
            "persistence": {
                "description": "Octave persistence.",
                "key": "persistence",
                "label": "persistence",
                "type": "Float"
            },
            "remap": {
                "description": "Remap the operator's output to a specified range, defaulting to [0, 1].",
                "key": "remap",
                "label": "remap",
                "type": "Value range"
            },
            "seed": {
                "description": "Random seed number.",
                "key": "seed",
                "label": "seed",
                "type": "Random seed number"
            },
            "weight": {
                "description": "Octave weighting.",
                "key": "weight",
                "label": "weight",
                "type": "Float"
            }
        },
        "ports": {
            "control": {
                "caption": "control",
                "data_type": "Heightmap",
                "description": "Control parameter, acts as a multiplier for the weight parameter.",
                "type": "input"
            },
            "dx": {
                "caption": "dx",
                "data_type": "Heightmap",
                "description": "Displacement with respect to the domain size (x-direction).",
                "type": "input"
            },
            "dy": {
                "caption": "dy",
                "data_type": "Heightmap",
                "description": "Displacement with respect to the domain size (y-direction).",
                "type": "input"
            },
            "envelope": {
                "caption": "envelope",
                "data_type": "Heightmap",
                "description": "Output noise amplitude envelope.",
                "type": "input"
            },
            "output": {
                "caption": "output",
                "data_type": "Heightmap",
                "description": "Generated noise.",
                "type": "output"
            }
        }
    },
    "NoiseRidged": {
        "category": "Primitive/Coherent",
        "description": "NoiseRidged, variant of NoiseFbm.",
        "label": "NoiseRidged",
        "parameters": {
            "inverse": {
                "description": "Toggle inversion of the output values.",
                "key": "inverse",
                "label": "inverse",
                "type": "Bool"
            },
            "k_smoothing": {
                "description": "Smoothing coefficient of the aboslute value.",
                "key": "k_smoothing",
                "label": "k_smoothing",
                "type": "Float"
            },
            "kw": {
                "description": "Noise wavenumbers (kx, ky) for each directions.",
                "key": "kw",
                "label": "kw",
                "type": "Wavenumber"
            },
            "lacunarity": {
                "description": "Wavenumber ratio between each octaves.",
                "key": "lacunarity",
                "label": "lacunarity",
                "type": "Float"
            },
            "noise_type": {
                "description": "Base primitive noise. Available values: OpenSimplex2, OpenSimplex2S, Perlin, Perlin (billow), Perlin (half), Value, Value (cubic), Worley, Worley (doube), Worley (value).",
                "key": "noise_type",
                "label": "noise_type",
                "type": "Enumeration"
            },
            "octaves": {
                "description": "Number of octaves.",
                "key": "octaves",
                "label": "octaves",
                "type": "Integer"
            },
            "persistence": {
                "description": "Octave persistence.",
                "key": "persistence",
                "label": "persistence",
                "type": "Float"
            },
            "remap": {
                "description": "Remap the operator's output to a specified range, defaulting to [0, 1].",
                "key": "remap",
                "label": "remap",
                "type": "Value range"
            },
            "seed": {
                "description": "Random seed number.",
                "key": "seed",
                "label": "seed",
                "type": "Random seed number"
            },
            "weight": {
                "description": "Octave weighting.",
                "key": "weight",
                "label": "weight",
                "type": "Float"
            }
        },
        "ports": {
            "control": {
                "caption": "control",
                "data_type": "Heightmap",
                "description": "Control parameter, acts as a multiplier for the weight parameter.",
                "type": "input"
            },
            "dx": {
                "caption": "dx",
                "data_type": "Heightmap",
                "description": "Displacement with respect to the domain size (x-direction).",
                "type": "input"
            },
            "dy": {
                "caption": "dy",
                "data_type": "Heightmap",
                "description": "Displacement with respect to the domain size (y-direction).",
                "type": "input"
            },
            "envelope": {
                "caption": "envelope",
                "data_type": "Heightmap",
                "description": "Output noise amplitude envelope.",
                "type": "input"
            },
            "output": {
                "caption": "output",
                "data_type": "Heightmap",
                "description": "Generated noise.",
                "type": "output"
            }
        }
    },
    "NoiseSwiss": {
        "category": "Primitive/Coherent",
        "description": "NoiseSwiss, variant of NoiseFbm.",
        "label": "NoiseSwiss",
        "parameters": {
            "inverse": {
                "description": "Toggle inversion of the output values.",
                "key": "inverse",
                "label": "inverse",
                "type": "Bool"
            },
            "kw": {
                "description": "Noise wavenumbers (kx, ky) for each directions.",
                "key": "kw",
                "label": "kw",
                "type": "Wavenumber"
            },
            "lacunarity": {
                "description": "Wavenumber ratio between each octaves.",
                "key": "lacunarity",
                "label": "lacunarity",
                "type": "Float"
            },
            "noise_type": {
                "description": "Base primitive noise. Available values: OpenSimplex2, OpenSimplex2S, Perlin, Perlin (billow), Perlin (half), Value, Value (cubic), Worley, Worley (doube), Worley (value).",
                "key": "noise_type",
                "label": "noise_type",
                "type": "Enumeration"
            },
            "octaves": {
                "description": "Number of octaves.",
                "key": "octaves",
                "label": "octaves",
                "type": "Integer"
            },
            "persistence": {
                "description": "Octave persistence.",
                "key": "persistence",
                "label": "persistence",
                "type": "Float"
            },
            "remap": {
                "description": "Remap the operator's output to a specified range, defaulting to [0, 1].",
                "key": "remap",
                "label": "remap",
                "type": "Value range"
            },
            "seed": {
                "description": "Random seed number.",
                "key": "seed",
                "label": "seed",
                "type": "Random seed number"
            },
            "warp_scale": {
                "description": "Warping influence scaling.",
                "key": "warp_scale",
                "label": "warp_scale",
                "type": "Float"
            },
            "weight": {
                "description": "Octave weighting.",
                "key": "weight",
                "label": "weight",
                "type": "Float"
            }
        },
        "ports": {
            "control": {
                "caption": "control",
                "data_type": "Heightmap",
                "description": "Control parameter, acts as a multiplier for the weight parameter.",
                "type": "input"
            },
            "dx": {
                "caption": "dx",
                "data_type": "Heightmap",
                "description": "Displacement with respect to the domain size (x-direction).",
                "type": "input"
            },
            "dy": {
                "caption": "dy",
                "data_type": "Heightmap",
                "description": "Displacement with respect to the domain size (y-direction).",
                "type": "input"
            },
            "envelope": {
                "caption": "envelope",
                "data_type": "Heightmap",
                "description": "Output noise amplitude envelope.",
                "type": "input"
            },
            "output": {
                "caption": "output",
                "data_type": "Heightmap",
                "description": "Generated noise.",
                "type": "output"
            }
        }
    },
    "NormalDisplacement": {
        "category": "Filter/Recast",
        "description": "NormalDisplacement applies a displacement to the terrain along the normal direction.",
        "label": "NormalDisplacement",
        "parameters": {
            "GPU": {
                "description": "Toogle GPU acceleration on or off.",
                "key": "GPU",
                "label": "GPU",
                "type": "Bool"
            },
            "amount": {
                "description": "Displacement scaling.",
                "key": "amount",
                "label": "amount",
                "type": "Float"
            },
            "iterations": {
                "description": "Number of successive use of the operator.",
                "key": "iterations",
                "label": "iterations",
                "type": "Integer"
            },
            "radius": {
                "description": "Filter radius with respect to the domain size.",
                "key": "radius",
                "label": "radius",
                "type": "Float"
            },
            "reverse": {
                "description": "Reverse displacement direction.",
                "key": "reverse",
                "label": "reverse",
                "type": "Bool"
            }
        },
        "ports": {
            "input": {
                "caption": "input",
                "data_type": "Heightmap",
                "description": "Input heightmap.",
                "type": "input"
            },
            "mask": {
                "caption": "mask",
                "data_type": "Heightmap",
                "description": "Mask defining the filtering intensity (expected in [0, 1]).",
                "type": "input"
            },
            "output": {
                "caption": "output",
                "data_type": "Heightmap",
                "description": "Output heightmap.",
                "type": "output"
            }
        }
    },
    "NormalMapToHeightmap": {
        "category": "Converter",
        "description": "No description available",
        "label": "NormalMapToHeightmap",
        "parameters": {
            "iterations": {
                "description": "No description",
                "key": "iterations",
                "label": "iterations",
                "type": "Integer"
            },
            "omega": {
                "description": "No description",
                "key": "omega",
                "label": "omega",
                "type": "Float"
            },
            "poisson_solver": {
                "description": "No description",
                "key": "poisson_solver",
                "label": "poisson_solver",
                "type": "Bool"
            },
            "post_gain": {
                "description": "No description",
                "key": "post_gain",
                "label": "post_gain",
                "type": "Float"
            },
            "post_inverse": {
                "description": "No description",
                "key": "post_inverse",
                "label": "post_inverse",
                "type": "Bool"
            },
            "post_remap": {
                "description": "No description",
                "key": "post_remap",
                "label": "post_remap",
                "type": "Value range"
            },
            "post_smoothing_radius": {
                "description": "No description",
                "key": "post_smoothing_radius",
                "label": "post_smoothing_radius",
                "type": "Float"
            }
        },
        "ports": {
            "normal map": {
                "caption": "normal map",
                "data_type": "HeightmapRGBA",
                "description": "No description",
                "type": "input"
            },
            "output": {
                "caption": "output",
                "data_type": "Heightmap",
                "description": "No description",
                "type": "output"
            }
        }
    },
    "Opening": {
        "category": "Operator/Morphology",
        "description": "Opening is a combination of erosion followed by dilation. It is primarily used for removing noise while preserving the shape and size of objects. Use Cases: Noise removal: Opening is effective in removing small, isolated noise regions while keeping the main objects intact. Smoothing object boundaries: Opening can help smooth the boundaries of objects in an image while preserving their overall shape.",
        "label": "Opening",
        "parameters": {
            "GPU": {
                "description": "Toogle GPU acceleration on or off.",
                "key": "GPU",
                "label": "GPU",
                "type": "Bool"
            },
            "radius": {
                "description": "Filter radius with respect to the domain size.",
                "key": "radius",
                "label": "radius",
                "type": "Float"
            }
        },
        "ports": {
            "input": {
                "caption": "input",
                "data_type": "Heightmap",
                "description": "Input heightmap.",
                "type": "input"
            },
            "output": {
                "caption": "output",
                "data_type": "Heightmap",
                "description": "Dilated heightmap.",
                "type": "output"
            }
        }
    },
    "Paraboloid": {
        "category": "Primitive/Function",
        "description": ".",
        "label": "Paraboloid",
        "parameters": {
            "a": {
                "description": "Curvature parameter, first principal axis.",
                "key": "a",
                "label": "a",
                "type": "Float"
            },
            "angle": {
                "description": "Angle.",
                "key": "angle",
                "label": "angle",
                "type": "Float"
            },
            "b": {
                "description": "Curvature parameter, second principal axis.",
                "key": "b",
                "label": "b",
                "type": "Float"
            },
            "center": {
                "description": "Reference center within the heightmap.",
                "key": "center",
                "label": "center",
                "type": "Vec2Float"
            },
            "inverse": {
                "description": "Toggle inversion of the output values.",
                "key": "inverse",
                "label": "inverse",
                "type": "Bool"
            },
            "remap": {
                "description": "Remap the operator's output to a specified range, defaulting to [0, 1].",
                "key": "remap",
                "label": "remap",
                "type": "Value range"
            },
            "reverse_x": {
                "description": "Reverse coefficient of first principal axis.",
                "key": "reverse_x",
                "label": "reverse_x",
                "type": "Bool"
            },
            "reverse_y": {
                "description": "Reverse coefficient of second principal axis.",
                "key": "reverse_y",
                "label": "reverse_y",
                "type": "Bool"
            },
            "v0": {
                "description": "Value at the paraboloid center.",
                "key": "v0",
                "label": "v0",
                "type": "Float"
            }
        },
        "ports": {
            "dx": {
                "caption": "dx",
                "data_type": "Heightmap",
                "description": "Displacement with respect to the domain size (x-direction).",
                "type": "input"
            },
            "dy": {
                "caption": "dy",
                "data_type": "Heightmap",
                "description": "Displacement with respect to the domain size (y-direction).",
                "type": "input"
            },
            "envelope": {
                "caption": "envelope",
                "data_type": "Heightmap",
                "description": "Output noise amplitude envelope.",
                "type": "input"
            },
            "output": {
                "caption": "output",
                "data_type": "Heightmap",
                "description": "Paraboloid.",
                "type": "output"
            }
        }
    },
    "Path": {
        "category": "Geometry/Path",
        "description": "A polyline defined by a series of connected points (x, y) with elevation data (z). Paths can represent linear features such as roads, rivers, or boundaries.",
        "label": "Path",
        "parameters": {
            "path": {
                "description": "The sequence of points defining the path. Each point consists of coordinates (x, y) and an elevation (z).",
                "key": "path",
                "label": "path",
                "type": "Path"
            }
        },
        "ports": {
            "path": {
                "caption": "path",
                "data_type": "Path",
                "description": "Outputs the path as a set of directed points (x, y) and elevations (z).",
                "type": "output"
            }
        }
    },
    "PathBezier": {
        "category": "Geometry/Path",
        "description": "PathBezier uses Bezier interpolation to replace sharp angles and straight segments with smooth, flowing curves.",
        "label": "PathBezier",
        "parameters": {
            "curvature_ratio": {
                "description": "Amount of curvature (usually in [-1, 1] and commonly > 0).",
                "key": "curvature_ratio",
                "label": "curvature_ratio",
                "type": "Float"
            },
            "edge_divisions": {
                "description": "Edge sub-divisions of each edge. After the operation, the path is remeshed based on this new sub-division.",
                "key": "edge_divisions",
                "label": "edge_divisions",
                "type": "Integer"
            }
        },
        "ports": {
            "input": {
                "caption": "input",
                "data_type": "Path",
                "description": "Input path.",
                "type": "input"
            },
            "output": {
                "caption": "output",
                "data_type": "Path",
                "description": "Output path.",
                "type": "output"
            }
        }
    },
    "PathBezierRound": {
        "category": "Geometry/Path",
        "description": "PathBezierRound uses Bezier interpolation to replace sharp angles and straight segments with smooth, round and flowing curves. PathBezierRound is an alternative to PathBezier.",
        "label": "PathBezierRound",
        "parameters": {
            "curvature_ratio": {
                "description": "Amount of curvature (usually in [-1, 1] and commonly > 0).",
                "key": "curvature_ratio",
                "label": "curvature_ratio",
                "type": "Float"
            },
            "edge_divisions": {
                "description": "Edge sub-divisions of each edge. After the operation, the path is remeshed based on this new sub-division.",
                "key": "edge_divisions",
                "label": "edge_divisions",
                "type": "Integer"
            }
        },
        "ports": {
            "input": {
                "caption": "input",
                "data_type": "Path",
                "description": "Input path.",
                "type": "input"
            },
            "output": {
                "caption": "output",
                "data_type": "Path",
                "description": "Output path.",
                "type": "output"
            }
        }
    },
    "PathBspline": {
        "category": "Geometry/Path",
        "description": "PathBspline uses Bspline interpolation to replace sharp angles and straight segments with smooth, flowing curves.",
        "label": "PathBspline",
        "parameters": {
            "edge_divisions": {
                "description": "Edge sub-divisions of each edge. After the operation, the path is remeshed based on this new sub-division.",
                "key": "edge_divisions",
                "label": "edge_divisions",
                "type": "Integer"
            }
        },
        "ports": {
            "input": {
                "caption": "input",
                "data_type": "Path",
                "description": "Input path.",
                "type": "input"
            },
            "output": {
                "caption": "output",
                "data_type": "Path",
                "description": "Output path.",
                "type": "output"
            }
        }
    },
    "PathDecasteljau": {
        "category": "Geometry/Path",
        "description": "PathDecasteljau uses Decasteljau interpolation to replace sharp angles and straight segments with smooth, flowing curves.",
        "label": "PathDecasteljau",
        "parameters": {
            "edge_divisions": {
                "description": "Edge sub-divisions of each edge. After the operation, the path is remeshed based on this new sub-division.",
                "key": "edge_divisions",
                "label": "edge_divisions",
                "type": "Integer"
            }
        },
        "ports": {
            "input": {
                "caption": "input",
                "data_type": "Path",
                "description": "Input path.",
                "type": "input"
            },
            "output": {
                "caption": "output",
                "data_type": "Path",
                "description": "Output path.",
                "type": "output"
            }
        }
    },
    "PathDig": {
        "category": "Geometry/Path",
        "description": "TODO",
        "label": "PathDig",
        "parameters": {
            "decay": {
                "description": "TODO",
                "key": "decay",
                "label": "decay",
                "type": "Float"
            },
            "depth": {
                "description": "TODO",
                "key": "depth",
                "label": "depth",
                "type": "Float"
            },
            "flattening_radius": {
                "description": "TODO",
                "key": "flattening_radius",
                "label": "flattening_radius",
                "type": "Float"
            },
            "force_downhill": {
                "description": "TODO",
                "key": "force_downhill",
                "label": "force_downhill",
                "type": "Bool"
            },
            "width": {
                "description": "TODO",
                "key": "width",
                "label": "width",
                "type": "Float"
            }
        },
        "ports": {
            "input": {
                "caption": "input",
                "data_type": "Heightmap",
                "description": "TODO",
                "type": "input"
            },
            "output": {
                "caption": "output",
                "data_type": "Heightmap",
                "description": "TODO",
                "type": "output"
            },
            "path": {
                "caption": "path",
                "data_type": "Path",
                "description": "TODO",
                "type": "input"
            }
        }
    },
    "PathFind": {
        "category": "Geometry/Path",
        "description": "TODO",
        "label": "PathFind",
        "parameters": {
            "distance_exponent": {
                "description": "TODO",
                "key": "distance_exponent",
                "label": "distance_exponent",
                "type": "Float"
            },
            "downsampling": {
                "description": "TODO",
                "key": "downsampling",
                "label": "downsampling",
                "type": "Integer"
            },
            "elevation_ratio": {
                "description": "TODO",
                "key": "elevation_ratio",
                "label": "elevation_ratio",
                "type": "Float"
            }
        },
        "ports": {
            "heightmap": {
                "caption": "heightmap",
                "data_type": "Heightmap",
                "description": "TODO",
                "type": "input"
            },
            "mask nogo": {
                "caption": "mask nogo",
                "data_type": "Heightmap",
                "description": "TODO",
                "type": "input"
            },
            "path": {
                "caption": "path",
                "data_type": "Path",
                "description": "TODO",
                "type": "output"
            },
            "waypoints": {
                "caption": "waypoints",
                "data_type": "Path",
                "description": "TODO",
                "type": "input"
            }
        }
    },
    "PathFractalize": {
        "category": "Geometry/Path",
        "description": "PathFractalize fractalizes a polyline using a mid-point displacement algorithm. The procedure involves iteratively modifying the polyline's geometry to increase its complexity, mimicking fractal characteristics.",
        "label": "PathFractalize",
        "parameters": {
            "iterations": {
                "description": "Number of mid-point displacement iterations.",
                "key": "iterations",
                "label": "iterations",
                "type": "Integer"
            },
            "orientation": {
                "description": "Displacement orientation (0 for random inward/outward displacement, 1 to inflate the path and -1 to deflate the path).",
                "key": "orientation",
                "label": "orientation",
                "type": "Integer"
            },
            "persistence": {
                "description": "Noise persistence (with iteration number).",
                "key": "persistence",
                "label": "persistence",
                "type": "Float"
            },
            "seed": {
                "description": "Random seed number.",
                "key": "seed",
                "label": "seed",
                "type": "Random seed number"
            },
            "sigma": {
                "description": "Half-width of the random Gaussian displacement, normalized by the distance between points.",
                "key": "sigma",
                "label": "sigma",
                "type": "Float"
            }
        },
        "ports": {
            "input": {
                "caption": "input",
                "data_type": "Path",
                "description": "Input path.",
                "type": "input"
            },
            "output": {
                "caption": "output",
                "data_type": "Path",
                "description": "Output path.",
                "type": "output"
            }
        }
    },
    "PathFromCsv": {
        "category": "Geometry/Path",
        "description": "No description available",
        "label": "PathFromCsv",
        "parameters": {
            "fname": {
                "description": "No description",
                "key": "fname",
                "label": "fname",
                "type": "Filename"
            }
        },
        "ports": {
            "path": {
                "caption": "path",
                "data_type": "Path",
                "description": "No description",
                "type": "output"
            }
        }
    },
    "PathMeanderize": {
        "category": "Geometry/Path",
        "description": "PathMeanderize uses Bezier interpolation to add menaders to the input path.",
        "label": "PathMeanderize",
        "parameters": {
            "edge_divisions": {
                "description": "Edge sub-divisions of each edge. After the operation, the path is remeshed based on this new sub-division.",
                "key": "edge_divisions",
                "label": "edge_divisions",
                "type": "Integer"
            },
            "iterations": {
                "description": "Number of meandering iterations.",
                "key": "iterations",
                "label": "iterations",
                "type": "Integer"
            },
            "noise_ratio": {
                "description": "Randomness ratio.",
                "key": "noise_ratio",
                "label": "noise_ratio",
                "type": "Float"
            },
            "ratio": {
                "description": "Meander amplitude ratio.",
                "key": "ratio",
                "label": "ratio",
                "type": "Float"
            },
            "seed": {
                "description": "Random seed number",
                "key": "seed",
                "label": "seed",
                "type": "Random seed number"
            }
        },
        "ports": {
            "input": {
                "caption": "input",
                "data_type": "Path",
                "description": "Input path.",
                "type": "input"
            },
            "output": {
                "caption": "output",
                "data_type": "Path",
                "description": "Output path.",
                "type": "output"
            }
        }
    },
    "PathResample": {
        "category": "Geometry/Path",
        "description": "PathResample resamples the path based to get (approximately) a given distance between points.",
        "label": "PathResample",
        "parameters": {
            "delta": {
                "description": "Target distance between the points.",
                "key": "delta",
                "label": "delta",
                "type": "Float"
            }
        },
        "ports": {
            "input": {
                "caption": "input",
                "data_type": "Path",
                "description": "Input path.",
                "type": "input"
            },
            "output": {
                "caption": "output",
                "data_type": "Path",
                "description": "Output path.",
                "type": "output"
            }
        }
    },
    "PathSDF": {
        "category": "Geometry/Path",
        "description": "PathSDF evaluates the signed distance function of a polyline. It assigns a signed distance value to every point in space. For points outside the polyline, the distance is positive, while for points inside, it's negative. The zero level set of this function precisely defines the polyline's path Project path points to an heightmap.",
        "label": "PathSDF",
        "parameters": {
            "inverse": {
                "description": "Toggle inversion of the output values.",
                "key": "inverse",
                "label": "inverse",
                "type": "Bool"
            },
            "remap": {
                "description": "Remap the operator's output to a specified range, defaulting to [0, 1].",
                "key": "remap",
                "label": "remap",
                "type": "Bool"
            }
        },
        "ports": {
            "dx": {
                "caption": "dx",
                "data_type": "Heightmap",
                "description": "TODO",
                "type": "input"
            },
            "dy": {
                "caption": "dy",
                "data_type": "Heightmap",
                "description": "TODO",
                "type": "input"
            },
            "path": {
                "caption": "path",
                "data_type": "Path",
                "description": "Input path.",
                "type": "input"
            },
            "sdf": {
                "caption": "sdf",
                "data_type": "Heightmap",
                "description": "Signed distance as an heightmap.",
                "type": "output"
            }
        }
    },
    "PathShuffle": {
        "category": "Geometry/Path",
        "description": "No description available",
        "label": "PathShuffle",
        "parameters": {
            "dv": {
                "description": "No description",
                "key": "dv",
                "label": "dv",
                "type": "Float"
            },
            "dx": {
                "description": "No description",
                "key": "dx",
                "label": "dx",
                "type": "Float"
            },
            "dy": {
                "description": "No description",
                "key": "dy",
                "label": "dy",
                "type": "Float"
            },
            "seed": {
                "description": "No description",
                "key": "seed",
                "label": "seed",
                "type": "Random seed number"
            }
        },
        "ports": {
            "input": {
                "caption": "input",
                "data_type": "Path",
                "description": "No description",
                "type": "input"
            },
            "output": {
                "caption": "output",
                "data_type": "Path",
                "description": "No description",
                "type": "output"
            }
        }
    },
    "PathSmooth": {
        "category": "Geometry/Path",
        "description": "TODO",
        "label": "PathSmooth",
        "parameters": {
            "averaging_intensity": {
                "description": "TODO",
                "key": "averaging_intensity",
                "label": "averaging_intensity",
                "type": "Float"
            },
            "inertia": {
                "description": "TODO",
                "key": "inertia",
                "label": "inertia",
                "type": "Float"
            },
            "navg": {
                "description": "TODO",
                "key": "navg",
                "label": "navg",
                "type": "Integer"
            }
        },
        "ports": {
            "input": {
                "caption": "input",
                "data_type": "Path",
                "description": "TODO",
                "type": "input"
            },
            "output": {
                "caption": "output",
                "data_type": "Path",
                "description": "TODO",
                "type": "output"
            }
        }
    },
    "PathToCloud": {
        "category": "Geometry/Path",
        "description": "PathToCloud convert a Path to a set of points (Cloud).",
        "label": "PathToCloud",
        "parameters": null,
        "ports": {
            "cloud": {
                "caption": "cloud",
                "data_type": "Cloud",
                "description": "Output cloud.",
                "type": "output"
            },
            "path": {
                "caption": "path",
                "data_type": "Path",
                "description": "Input path.",
                "type": "input"
            }
        }
    },
    "PathToHeightmap": {
        "category": "Geometry/Path",
        "description": "PathToHeightmap Project path points to an heightmap.",
        "label": "PathToHeightmap",
        "parameters": {
            "filled": {
                "description": "Whether the resulting path contour is filled (input Path needs to be closed).",
                "key": "filled",
                "label": "filled",
                "type": "Bool"
            },
            "inverse": {
                "description": "Toggle inversion of the output values.",
                "key": "inverse",
                "label": "inverse",
                "type": "Bool"
            },
            "remap": {
                "description": "Remap the operator's output to a specified range, defaulting to [0, 1].",
                "key": "remap",
                "label": "remap",
                "type": "Bool"
            },
            "smoothing": {
                "description": "Enable or disable smoothing to reduce noise in the curvature computation.",
                "key": "smoothing",
                "label": "smoothing",
                "type": "Bool"
            },
            "smoothing_radius": {
                "description": "Specifies the radius for smoothing, determining how much the curvature is averaged over neighboring pixels.",
                "key": "smoothing_radius",
                "label": "smoothing_radius",
                "type": "Float"
            }
        },
        "ports": {
            "heightmap": {
                "caption": "heightmap",
                "data_type": "Heightmap",
                "description": "Output heightmap.",
                "type": "output"
            },
            "path": {
                "caption": "path",
                "data_type": "Path",
                "description": "Input path.",
                "type": "input"
            }
        }
    },
    "Plateau": {
        "category": "Filter/Recurve",
        "description": "Plateau node manipulates the elevation values to create flats, elevated regions surrounded by steep slopes.",
        "label": "Plateau",
        "parameters": {
            "GPU": {
                "description": "Toogle GPU acceleration on or off.",
                "key": "GPU",
                "label": "GPU",
                "type": "Bool"
            },
            "factor": {
                "description": "Influence the cliff elevation profile.",
                "key": "factor",
                "label": "factor",
                "type": "Float"
            },
            "radius": {
                "description": "Filter radius with respect to the domain size.",
                "key": "radius",
                "label": "radius",
                "type": "Float"
            }
        },
        "ports": {
            "input": {
                "caption": "input",
                "data_type": "Heightmap",
                "description": "Input heightmap.",
                "type": "input"
            },
            "mask": {
                "caption": "mask",
                "data_type": "Heightmap",
                "description": "Mask defining the filtering intensity (expected in [0, 1]).",
                "type": "input"
            },
            "output": {
                "caption": "output",
                "data_type": "Heightmap",
                "description": "Filtered heightmap.",
                "type": "output"
            }
        }
    },
    "PolygonField": {
        "category": "Primitive/Coherent",
        "description": "No description available",
        "label": "PolygonField",
        "parameters": {
            "clamping_dist": {
                "description": "No description",
                "key": "clamping_dist",
                "label": "clamping_dist",
                "type": "Float"
            },
            "clamping_k": {
                "description": "No description",
                "key": "clamping_k",
                "label": "clamping_k",
                "type": "Float"
            },
            "density": {
                "description": "No description",
                "key": "density",
                "label": "density",
                "type": "Float"
            },
            "jitter.x": {
                "description": "No description",
                "key": "jitter.x",
                "label": "jitter.x",
                "type": "Float"
            },
            "jitter.y": {
                "description": "No description",
                "key": "jitter.y",
                "label": "jitter.y",
                "type": "Float"
            },
            "kw": {
                "description": "No description",
                "key": "kw",
                "label": "kw",
                "type": "Wavenumber"
            },
            "n_vertices_max": {
                "description": "No description",
                "key": "n_vertices_max",
                "label": "n_vertices_max",
                "type": "Integer"
            },
            "n_vertices_min": {
                "description": "No description",
                "key": "n_vertices_min",
                "label": "n_vertices_min",
                "type": "Integer"
            },
            "post_gain": {
                "description": "Set the gain. Gain is a power law transformation altering the distribution of signal values, compressing or expanding certain regions of the signal depending on the exponent of the power law.",
                "key": "post_gain",
                "label": "post_gain",
                "type": "Float"
            },
            "post_inverse": {
                "description": "Inverts the output values after processing, flipping low and high values across the midrange.",
                "key": "post_inverse",
                "label": "post_inverse",
                "type": "Bool"
            },
            "post_remap": {
                "description": "Linearly remaps the output values to a specified target range (default is [0, 1]).",
                "key": "post_remap",
                "label": "post_remap",
                "type": "Value range"
            },
            "post_smoothing_radius": {
                "description": "Defines the radius for post-processing smoothing, determining the size of the neighborhood used to average local values and reduce high-frequency detail. A radius of 0 disables smoothing.",
                "key": "post_smoothing_radius",
                "label": "post_smoothing_radius",
                "type": "Float"
            },
            "rmax": {
                "description": "No description",
                "key": "rmax",
                "label": "rmax",
                "type": "Float"
            },
            "rmin": {
                "description": "No description",
                "key": "rmin",
                "label": "rmin",
                "type": "Float"
            },
            "seed": {
                "description": "Random seed number.",
                "key": "seed",
                "label": "seed",
                "type": "Random seed number"
            },
            "shift": {
                "description": "No description",
                "key": "shift",
                "label": "shift",
                "type": "Float"
            }
        },
        "ports": {
            "density": {
                "caption": "density",
                "data_type": "Heightmap",
                "description": "No description",
                "type": "input"
            },
            "dr": {
                "caption": "dr",
                "data_type": "Heightmap",
                "description": "No description",
                "type": "input"
            },
            "dx": {
                "caption": "dx",
                "data_type": "Heightmap",
                "description": "Displacement with respect to the domain size (x-direction).",
                "type": "input"
            },
            "dy": {
                "caption": "dy",
                "data_type": "Heightmap",
                "description": "Displacement with respect to the domain size (y-direction).",
                "type": "input"
            },
            "envelope": {
                "caption": "envelope",
                "data_type": "Heightmap",
                "description": "No description",
                "type": "input"
            },
            "output": {
                "caption": "output",
                "data_type": "Heightmap",
                "description": "No description",
                "type": "output"
            },
            "size": {
                "caption": "size",
                "data_type": "Heightmap",
                "description": "No description",
                "type": "input"
            }
        }
    },
    "PolygonFieldFbm": {
        "category": "Primitive/Coherent",
        "description": "No description available",
        "label": "PolygonFieldFbm",
        "parameters": {
            "clamping_dist": {
                "description": "No description",
                "key": "clamping_dist",
                "label": "clamping_dist",
                "type": "Float"
            },
            "clamping_k": {
                "description": "No description",
                "key": "clamping_k",
                "label": "clamping_k",
                "type": "Float"
            },
            "density": {
                "description": "No description",
                "key": "density",
                "label": "density",
                "type": "Float"
            },
            "jitter.x": {
                "description": "No description",
                "key": "jitter.x",
                "label": "jitter.x",
                "type": "Float"
            },
            "jitter.y": {
                "description": "No description",
                "key": "jitter.y",
                "label": "jitter.y",
                "type": "Float"
            },
            "kw": {
                "description": "No description",
                "key": "kw",
                "label": "kw",
                "type": "Wavenumber"
            },
            "lacunarity": {
                "description": "No description",
                "key": "lacunarity",
                "label": "lacunarity",
                "type": "Float"
            },
            "n_vertices_max": {
                "description": "No description",
                "key": "n_vertices_max",
                "label": "n_vertices_max",
                "type": "Integer"
            },
            "n_vertices_min": {
                "description": "No description",
                "key": "n_vertices_min",
                "label": "n_vertices_min",
                "type": "Integer"
            },
            "octaves": {
                "description": "No description",
                "key": "octaves",
                "label": "octaves",
                "type": "Integer"
            },
            "persistence": {
                "description": "No description",
                "key": "persistence",
                "label": "persistence",
                "type": "Float"
            },
            "post_gain": {
                "description": "Set the gain. Gain is a power law transformation altering the distribution of signal values, compressing or expanding certain regions of the signal depending on the exponent of the power law.",
                "key": "post_gain",
                "label": "post_gain",
                "type": "Float"
            },
            "post_inverse": {
                "description": "Inverts the output values after processing, flipping low and high values across the midrange.",
                "key": "post_inverse",
                "label": "post_inverse",
                "type": "Bool"
            },
            "post_remap": {
                "description": "Linearly remaps the output values to a specified target range (default is [0, 1]).",
                "key": "post_remap",
                "label": "post_remap",
                "type": "Value range"
            },
            "post_smoothing_radius": {
                "description": "Defines the radius for post-processing smoothing, determining the size of the neighborhood used to average local values and reduce high-frequency detail. A radius of 0 disables smoothing.",
                "key": "post_smoothing_radius",
                "label": "post_smoothing_radius",
                "type": "Float"
            },
            "rmax": {
                "description": "No description",
                "key": "rmax",
                "label": "rmax",
                "type": "Float"
            },
            "rmin": {
                "description": "No description",
                "key": "rmin",
                "label": "rmin",
                "type": "Float"
            },
            "seed": {
                "description": "Random seed number.",
                "key": "seed",
                "label": "seed",
                "type": "Random seed number"
            },
            "shift": {
                "description": "No description",
                "key": "shift",
                "label": "shift",
                "type": "Float"
            }
        },
        "ports": {
            "density": {
                "caption": "density",
                "data_type": "Heightmap",
                "description": "No description",
                "type": "input"
            },
            "dr": {
                "caption": "dr",
                "data_type": "Heightmap",
                "description": "No description",
                "type": "input"
            },
            "dx": {
                "caption": "dx",
                "data_type": "Heightmap",
                "description": "Displacement with respect to the domain size (x-direction).",
                "type": "input"
            },
            "dy": {
                "caption": "dy",
                "data_type": "Heightmap",
                "description": "Displacement with respect to the domain size (y-direction).",
                "type": "input"
            },
            "envelope": {
                "caption": "envelope",
                "data_type": "Heightmap",
                "description": "No description",
                "type": "input"
            },
            "output": {
                "caption": "output",
                "data_type": "Heightmap",
                "description": "No description",
                "type": "output"
            },
            "size": {
                "caption": "size",
                "data_type": "Heightmap",
                "description": "No description",
                "type": "input"
            }
        }
    },
    "PostProcess": {
        "category": "Filter",
        "description": "No description available",
        "label": "PostProcess",
        "parameters": {
            "post_gain": {
                "description": "No description",
                "key": "post_gain",
                "label": "post_gain",
                "type": "Float"
            },
            "post_inverse": {
                "description": "No description",
                "key": "post_inverse",
                "label": "post_inverse",
                "type": "Bool"
            },
            "post_remap": {
                "description": "No description",
                "key": "post_remap",
                "label": "post_remap",
                "type": "Value range"
            },
            "post_smoothing_radius": {
                "description": "No description",
                "key": "post_smoothing_radius",
                "label": "post_smoothing_radius",
                "type": "Float"
            }
        },
        "ports": {
            "in": {
                "caption": "in",
                "data_type": "Heightmap",
                "description": "No description",
                "type": "input"
            },
            "out": {
                "caption": "out",
                "data_type": "Heightmap",
                "description": "No description",
                "type": "output"
            }
        }
    },
    "Preview": {
        "category": "Debug",
        "description": "TODO",
        "label": "Preview",
        "parameters": null,
        "ports": {
            "cloud": {
                "caption": "cloud",
                "data_type": "Cloud",
                "description": "No description",
                "type": "input"
            },
            "elevation": {
                "caption": "elevation",
                "data_type": "Heightmap",
                "description": "TODO",
                "type": "input"
            },
            "normal map": {
                "caption": "normal map",
                "data_type": "HeightmapRGBA",
                "description": "TODO",
                "type": "input"
            },
            "path": {
                "caption": "path",
                "data_type": "Path",
                "description": "No description",
                "type": "input"
            },
            "scalar": {
                "caption": "scalar",
                "data_type": "Heightmap",
                "description": "TODO",
                "type": "input"
            },
            "texture": {
                "caption": "texture",
                "data_type": "HeightmapRGBA",
                "description": "TODO",
                "type": "input"
            },
            "water_depth": {
                "caption": "water_depth",
                "data_type": "Heightmap",
                "description": "No description",
                "type": "input"
            }
        }
    },
    "QuiltingBlend": {
        "category": "Operator/Resynthesis",
        "description": "TODO",
        "label": "QuiltingBlend",
        "parameters": {
            "filter_width_ratio": {
                "description": "TODO",
                "key": "filter_width_ratio",
                "label": "filter_width_ratio",
                "type": "Float"
            },
            "overlap": {
                "description": "TODO",
                "key": "overlap",
                "label": "overlap",
                "type": "Float"
            },
            "patch_flip": {
                "description": "TODO",
                "key": "patch_flip",
                "label": "patch_flip",
                "type": "Bool"
            },
            "patch_rotate": {
                "description": "TODO",
                "key": "patch_rotate",
                "label": "patch_rotate",
                "type": "Bool"
            },
            "patch_transpose": {
                "description": "TODO",
                "key": "patch_transpose",
                "label": "patch_transpose",
                "type": "Bool"
            },
            "patch_width": {
                "description": "TODO",
                "key": "patch_width",
                "label": "patch_width",
                "type": "Float"
            },
            "seed": {
                "description": "TODO",
                "key": "seed",
                "label": "seed",
                "type": "Random seed number"
            }
        },
        "ports": {
            "input 1": {
                "caption": "input 1",
                "data_type": "Heightmap",
                "description": "TODO",
                "type": "input"
            },
            "input 2": {
                "caption": "input 2",
                "data_type": "Heightmap",
                "description": "TODO",
                "type": "input"
            },
            "input 3": {
                "caption": "input 3",
                "data_type": "Heightmap",
                "description": "TODO",
                "type": "input"
            },
            "input 4": {
                "caption": "input 4",
                "data_type": "Heightmap",
                "description": "TODO",
                "type": "input"
            },
            "output": {
                "caption": "output",
                "data_type": "Heightmap",
                "description": "TODO",
                "type": "output"
            }
        }
    },
    "QuiltingExpand": {
        "category": "Operator/Resynthesis",
        "description": "QuiltingExpand is an operator based on quilting that changes the feature wavenumber of a heightmap by modifying the frequency or scale of features present in the heightmap using a quilting-like technique. This operator allows for the synthesis of heightmaps with different levels of detail or spatial frequency content.",
        "label": "QuiltingExpand",
        "parameters": {
            "expansion_ratio": {
                "description": "Determine the features expansion ratio of the new heightmap.",
                "key": "expansion_ratio",
                "label": "expansion_ratio",
                "type": "Float"
            },
            "filter_width_ratio": {
                "description": "Smooth filter width with respect the overlap length.",
                "key": "filter_width_ratio",
                "label": "filter_width_ratio",
                "type": "Float"
            },
            "overlap": {
                "description": "Overlap ratio between patches.",
                "key": "overlap",
                "label": "overlap",
                "type": "Float"
            },
            "patch_flip": {
                "description": "Allow patch flipping.",
                "key": "patch_flip",
                "label": "patch_flip",
                "type": "Bool"
            },
            "patch_rotate": {
                "description": "Allow patch 90 degree rotation.",
                "key": "patch_rotate",
                "label": "patch_rotate",
                "type": "Bool"
            },
            "patch_transpose": {
                "description": "Allow patch tranposition.",
                "key": "patch_transpose",
                "label": "patch_transpose",
                "type": "Bool"
            },
            "patch_width": {
                "description": "Decide on the size (with respect to the domain size) of the patches that will be used to create the new heightmap. This determines the level of detail and texture in the final result.",
                "key": "patch_width",
                "label": "patch_width",
                "type": "Float"
            },
            "seed": {
                "description": "Random seed number.",
                "key": "seed",
                "label": "seed",
                "type": "Random seed number"
            }
        },
        "ports": {
            "input": {
                "caption": "input",
                "data_type": "Heightmap",
                "description": "Input heightmap.",
                "type": "input"
            },
            "output": {
                "caption": "output",
                "data_type": "Heightmap",
                "description": "Synthetized heightmap.",
                "type": "output"
            }
        }
    },
    "QuiltingShuffle": {
        "category": "Operator/Resynthesis",
        "description": "QuiltingShuffle performs a quilting procedure and generates a new image by seamlessly stitching together patches from an existing image.",
        "label": "QuiltingShuffle",
        "parameters": {
            "filter_width_ratio": {
                "description": "Smooth filter width with respect the overlap length.",
                "key": "filter_width_ratio",
                "label": "filter_width_ratio",
                "type": "Float"
            },
            "overlap": {
                "description": "Overlap ratio between patches.",
                "key": "overlap",
                "label": "overlap",
                "type": "Float"
            },
            "patch_flip": {
                "description": "Allow patch flipping.",
                "key": "patch_flip",
                "label": "patch_flip",
                "type": "Bool"
            },
            "patch_rotate": {
                "description": "Allow patch 90 degree rotation.",
                "key": "patch_rotate",
                "label": "patch_rotate",
                "type": "Bool"
            },
            "patch_transpose": {
                "description": "Allow patch tranposition.",
                "key": "patch_transpose",
                "label": "patch_transpose",
                "type": "Bool"
            },
            "patch_width": {
                "description": "Decide on the size (with respect to the domain size) of the patches that will be used to create the new heightmap. This determines the level of detail and texture in the final result.",
                "key": "patch_width",
                "label": "patch_width",
                "type": "Float"
            },
            "seed": {
                "description": "Random seed number.",
                "key": "seed",
                "label": "seed",
                "type": "Random seed number"
            }
        },
        "ports": {
            "input": {
                "caption": "input",
                "data_type": "Heightmap",
                "description": "Input heightmap.",
                "type": "input"
            },
            "output": {
                "caption": "output",
                "data_type": "Heightmap",
                "description": "Synthetized heightmap.",
                "type": "output"
            }
        }
    },
    "RadialDisplacementToXy": {
        "category": "Math",
        "description": "RadialDisplacementToXy interprets the input array dr as a radial displacement and convert it to a pair of displacements dx and dy in cartesian coordinates.",
        "label": "RadialDisplacementToXy",
        "parameters": {
            "center": {
                "description": "Reference center within the heightmap.",
                "key": "center",
                "label": "center",
                "type": "Vec2Float"
            },
            "smoothing": {
                "description": "Smoothing parameter to avoid discontinuity at the origin.",
                "key": "smoothing",
                "label": "smoothing",
                "type": "Float"
            }
        },
        "ports": {
            "dr": {
                "caption": "dr",
                "data_type": "Heightmap",
                "description": "Radial displacement.",
                "type": "input"
            },
            "dx": {
                "caption": "dx",
                "data_type": "Heightmap",
                "description": "Displacement for  the x-direction.",
                "type": "output"
            },
            "dy": {
                "caption": "dy",
                "data_type": "Heightmap",
                "description": "Displacement for  the y-direction.",
                "type": "output"
            }
        }
    },
    "RecastCanyon": {
        "category": "Filter/Recast",
        "description": "TODO",
        "label": "RecastCanyon",
        "parameters": {
            "gamma": {
                "description": "TODO",
                "key": "gamma",
                "label": "gamma",
                "type": "Float"
            },
            "vcut": {
                "description": "TODO",
                "key": "vcut",
                "label": "vcut",
                "type": "Float"
            }
        },
        "ports": {
            "input": {
                "caption": "input",
                "data_type": "Heightmap",
                "description": "TODO",
                "type": "input"
            },
            "mask": {
                "caption": "mask",
                "data_type": "Heightmap",
                "description": "Mask defining the filtering intensity (expected in [0, 1]).",
                "type": "input"
            },
            "noise": {
                "caption": "noise",
                "data_type": "Heightmap",
                "description": "TODO",
                "type": "input"
            },
            "output": {
                "caption": "output",
                "data_type": "Heightmap",
                "description": "TODO",
                "type": "output"
            }
        }
    },
    "RecastCliff": {
        "category": "Filter/Recast",
        "description": "RecastCliff add cliffs in a heightmap by introducing sharp changes in elevation to simulate steep vertical terrain features such as cliffs or escarpments.",
        "label": "RecastCliff",
        "parameters": {
            "amplitude": {
                "description": "Cliff amplitude.",
                "key": "amplitude",
                "label": "amplitude",
                "type": "Float"
            },
            "gain": {
                "description": "Gain, influence the cliff elevation profile.",
                "key": "gain",
                "label": "gain",
                "type": "Float"
            },
            "radius": {
                "description": "Filter influence radius.",
                "key": "radius",
                "label": "radius",
                "type": "Float"
            },
            "talus_global": {
                "description": "Reference talus at which the cliff are added.",
                "key": "talus_global",
                "label": "talus_global",
                "type": "Float"
            }
        },
        "ports": {
            "input": {
                "caption": "input",
                "data_type": "Heightmap",
                "description": "Input heightmap.",
                "type": "input"
            },
            "mask": {
                "caption": "mask",
                "data_type": "Heightmap",
                "description": "Mask defining the filtering intensity (expected in [0, 1]).",
                "type": "input"
            },
            "output": {
                "caption": "output",
                "data_type": "Heightmap",
                "description": "Filtered heightmap.",
                "type": "output"
            }
        }
    },
    "RecastCliffDirectional": {
        "category": "Filter/Recast",
        "description": "TODO",
        "label": "RecastCliffDirectional",
        "parameters": {
            "amplitude": {
                "description": "TODO",
                "key": "amplitude",
                "label": "amplitude",
                "type": "Float"
            },
            "angle": {
                "description": "TODO",
                "key": "angle",
                "label": "angle",
                "type": "Float"
            },
            "gain": {
                "description": "TODO",
                "key": "gain",
                "label": "gain",
                "type": "Float"
            },
            "radius": {
                "description": "TODO",
                "key": "radius",
                "label": "radius",
                "type": "Float"
            },
            "talus_global": {
                "description": "TODO",
                "key": "talus_global",
                "label": "talus_global",
                "type": "Float"
            }
        },
        "ports": {
            "input": {
                "caption": "input",
                "data_type": "Heightmap",
                "description": "TODO",
                "type": "input"
            },
            "mask": {
                "caption": "mask",
                "data_type": "Heightmap",
                "description": "Mask defining the filtering intensity (expected in [0, 1]).",
                "type": "input"
            },
            "output": {
                "caption": "output",
                "data_type": "Heightmap",
                "description": "TODO",
                "type": "output"
            }
        }
    },
    "RecastCracks": {
        "category": "Filter/Recast",
        "description": "TODO",
        "label": "RecastCracks",
        "parameters": {
            "cut_max": {
                "description": "TODO",
                "key": "cut_max",
                "label": "cut_max",
                "type": "Float"
            },
            "cut_min": {
                "description": "TODO",
                "key": "cut_min",
                "label": "cut_min",
                "type": "Float"
            },
            "k_smoothing": {
                "description": "TODO",
                "key": "k_smoothing",
                "label": "k_smoothing",
                "type": "Float"
            }
        },
        "ports": {
            "input": {
                "caption": "input",
                "data_type": "Heightmap",
                "description": "TODO",
                "type": "input"
            },
            "output": {
                "caption": "output",
                "data_type": "Heightmap",
                "description": "TODO",
                "type": "output"
            }
        }
    },
    "RecastSag": {
        "category": "Filter/Recast",
        "description": "RecastSag add cliffs in a heightmap by introducing sinks, droops, or bends downward changes in elevation.",
        "label": "RecastSag",
        "parameters": {
            "k": {
                "description": "Smoothing parameter.",
                "key": "k",
                "label": "k",
                "type": "Float"
            },
            "vref": {
                "description": "Reference elevation for the folding.",
                "key": "vref",
                "label": "vref",
                "type": "Float"
            }
        },
        "ports": {
            "input": {
                "caption": "input",
                "data_type": "Heightmap",
                "description": "Input heightmap.",
                "type": "input"
            },
            "mask": {
                "caption": "mask",
                "data_type": "Heightmap",
                "description": "Mask defining the filtering intensity (expected in [0, 1]).",
                "type": "input"
            },
            "output": {
                "caption": "output",
                "data_type": "Heightmap",
                "description": "Filtered heightmap.",
                "type": "output"
            }
        }
    },
    "Receive": {
        "category": "Routing",
        "description": "Retrieves a heightmap broadcasted by another node using the specified tag.",
        "label": "Receive",
        "parameters": {
            "tag": {
                "description": "Tag identifying the broadcasted heightmap to receive.",
                "key": "tag",
                "label": "tag",
                "type": "Choice"
            }
        },
        "ports": {
            "output": {
                "caption": "output",
                "data_type": "Heightmap",
                "description": "The heightmap retrieved from the broadcast source.",
                "type": "output"
            }
        }
    },
    "Recurve": {
        "category": "Filter/Recurve",
        "description": "Applies a corrective curve to the heightmap values using a user-defined set of control points.",
        "label": "Recurve",
        "parameters": {
            "values": {
                "description": "List of control points defining the curve to remap height values (X = input, Y = output).",
                "key": "values",
                "label": "values",
                "type": "Vector of floats"
            }
        },
        "ports": {
            "input": {
                "caption": "input",
                "data_type": "Heightmap",
                "description": "Heightmap to be modified using the corrective curve.",
                "type": "input"
            },
            "mask": {
                "caption": "mask",
                "data_type": "Heightmap",
                "description": "Mask defining the filtering intensity (expected in [0, 1]).",
                "type": "input"
            },
            "output": {
                "caption": "output",
                "data_type": "Heightmap",
                "description": "Resulting heightmap after the curve has been applied.",
                "type": "output"
            }
        }
    },
    "RecurveKura": {
        "category": "Filter/Recurve",
        "description": "RecurveKura is an operator based on the Kumaraswamy distribution that can be used to adjust the amplitude levels of a dataset.",
        "label": "RecurveKura",
        "parameters": {
            "a": {
                "description": "Primarily controls the rightward skewness and tail behavior of the distribution.",
                "key": "a",
                "label": "a",
                "type": "Float"
            },
            "b": {
                "description": "Primarily controls the leftward skewness and tail behavior.",
                "key": "b",
                "label": "b",
                "type": "Float"
            }
        },
        "ports": {
            "input": {
                "caption": "input",
                "data_type": "Heightmap",
                "description": "Input heightmap.",
                "type": "input"
            },
            "mask": {
                "caption": "mask",
                "data_type": "Heightmap",
                "description": "Mask defining the filtering intensity (expected in [0, 1]).",
                "type": "input"
            },
            "output": {
                "caption": "output",
                "data_type": "Heightmap",
                "description": "Filtered heightmap.",
                "type": "output"
            }
        }
    },
    "RecurveS": {
        "category": "Filter/Recurve",
        "description": "RecurveS applied a curve adjustment filter using a smooth S-shape curve.",
        "label": "RecurveS",
        "parameters": null,
        "ports": {
            "input": {
                "caption": "input",
                "data_type": "Heightmap",
                "description": "Input heightmap.",
                "type": "input"
            },
            "mask": {
                "caption": "mask",
                "data_type": "Heightmap",
                "description": "Mask defining the filtering intensity (expected in [0, 1]).",
                "type": "input"
            },
            "output": {
                "caption": "output",
                "data_type": "Heightmap",
                "description": "Filtered heightmap.",
                "type": "output"
            }
        }
    },
    "RelativeDistanceFromSkeleton": {
        "category": "Operator/Morphology",
        "description": "No description available",
        "label": "RelativeDistanceFromSkeleton",
        "parameters": {
            "post_gain": {
                "description": "Set the gain. Gain is a power law transformation altering the distribution of signal values, compressing or expanding certain regions of the signal depending on the exponent of the power law.",
                "key": "post_gain",
                "label": "post_gain",
                "type": "Float"
            },
            "post_inverse": {
                "description": "Inverts the output values after processing, flipping low and high values across the midrange.",
                "key": "post_inverse",
                "label": "post_inverse",
                "type": "Bool"
            },
            "post_remap": {
                "description": "Linearly remaps the output values to a specified target range (default is [0, 1]).",
                "key": "post_remap",
                "label": "post_remap",
                "type": "Value range"
            },
            "post_smoothing_radius": {
                "description": "Defines the radius for post-processing smoothing, determining the size of the neighborhood used to average local values and reduce high-frequency detail. A radius of 0 disables smoothing.",
                "key": "post_smoothing_radius",
                "label": "post_smoothing_radius",
                "type": "Float"
            },
            "search_radius": {
                "description": "No description",
                "key": "search_radius",
                "label": "search_radius",
                "type": "Float"
            },
            "threshold": {
                "description": "No description",
                "key": "threshold",
                "label": "threshold",
                "type": "Float"
            }
        },
        "ports": {
            "input": {
                "caption": "input",
                "data_type": "Heightmap",
                "description": "No description",
                "type": "input"
            },
            "output": {
                "caption": "output",
                "data_type": "Heightmap",
                "description": "No description",
                "type": "output"
            }
        }
    },
    "RelativeElevation": {
        "category": "Features/Landform",
        "description": "RelativeElevation identifies heightmap relative elevation based on the surrounding heightmap values.",
        "label": "RelativeElevation",
        "parameters": {
            "GPU": {
                "description": "Toogle GPU acceleration on or off.",
                "key": "GPU",
                "label": "GPU",
                "type": "Bool"
            },
            "radius": {
                "description": "Filter radius with respect to the domain size.",
                "key": "radius",
                "label": "radius",
                "type": "Float"
            }
        },
        "ports": {
            "input": {
                "caption": "input",
                "data_type": "Heightmap",
                "description": "Input heightmap.",
                "type": "input"
            },
            "output": {
                "caption": "output",
                "data_type": "Heightmap",
                "description": "Relative elevation.",
                "type": "output"
            }
        }
    },
    "Remap": {
        "category": "Filter/Range",
        "description": "The Remap operator is used to adjust the elevation values across the entire dataset, effectively changing the range of elevation data to match a desired output scale or to normalize the data.",
        "label": "Remap",
        "parameters": {
            "remap": {
                "description": "Target range: define the new minimum and maximum values to remap the elevation values to.",
                "key": "remap",
                "label": "remap",
                "type": "Value range"
            }
        },
        "ports": {
            "input": {
                "caption": "input",
                "data_type": "Heightmap",
                "description": "Input heightmap.",
                "type": "input"
            },
            "output": {
                "caption": "output",
                "data_type": "Heightmap",
                "description": "Remapped heightmap.",
                "type": "output"
            }
        }
    },
    "Rescale": {
        "category": "Filter/Range",
        "description": "The Rescale operator involves adjusting each data point by multiplying it with a predetermined constant.",
        "label": "Rescale",
        "parameters": {
            "centered": {
                "description": "Determine whether a mean offset is applied to the values to center the scaling.",
                "key": "centered",
                "label": "centered",
                "type": "Bool"
            },
            "scaling": {
                "description": "Constant by which each elevation values will be multiplied.",
                "key": "scaling",
                "label": "scaling",
                "type": "Float"
            }
        },
        "ports": {
            "input": {
                "caption": "input",
                "data_type": "Heightmap",
                "description": "Input heightmap.",
                "type": "input"
            },
            "output": {
                "caption": "output",
                "data_type": "Heightmap",
                "description": "Rescaled heightmap.",
                "type": "output"
            }
        }
    },
    "Reverse": {
        "category": "Math/Base",
        "description": "TODO",
        "label": "Reverse",
        "parameters": null,
        "ports": {
            "input": {
                "caption": "input",
                "data_type": "Heightmap",
                "description": "TODO",
                "type": "input"
            },
            "output": {
                "caption": "output",
                "data_type": "Heightmap",
                "description": "TODO",
                "type": "output"
            }
        }
    },
    "ReverseAboveThreshold": {
        "category": "Filter/Recurve",
        "description": "No description available",
        "label": "ReverseAboveThreshold",
        "parameters": {
            "post_gain": {
                "description": "Set the gain. Gain is a power law transformation altering the distribution of signal values, compressing or expanding certain regions of the signal depending on the exponent of the power law.",
                "key": "post_gain",
                "label": "post_gain",
                "type": "Float"
            },
            "post_inverse": {
                "description": "Inverts the output values after processing, flipping low and high values across the midrange.",
                "key": "post_inverse",
                "label": "post_inverse",
                "type": "Bool"
            },
            "post_mix": {
                "description": "Mixing factor for blending input and output values. A value of 0 uses only the input, 1 uses only the output, and intermediate values perform a linear interpolation.",
                "key": "post_mix",
                "label": "post_mix",
                "type": "Float"
            },
            "post_mix_method": {
                "description": "Method used to combine input and output values. Options include linear interpolation (default), min, max, smooth min, smooth max, add, and subtract.",
                "key": "post_mix_method",
                "label": "post_mix_method",
                "type": "Enumeration"
            },
            "post_remap": {
                "description": "Linearly remaps the output values to a specified target range (default is [0, 1]).",
                "key": "post_remap",
                "label": "post_remap",
                "type": "Value range"
            },
            "post_smoothing_radius": {
                "description": "Defines the radius for post-processing smoothing, determining the size of the neighborhood used to average local values and reduce high-frequency detail. A radius of 0 disables smoothing.",
                "key": "post_smoothing_radius",
                "label": "post_smoothing_radius",
                "type": "Float"
            },
            "scaling": {
                "description": "No description",
                "key": "scaling",
                "label": "scaling",
                "type": "Float"
            },
            "threshold_value": {
                "description": "No description",
                "key": "threshold_value",
                "label": "threshold_value",
                "type": "Float"
            },
            "transition_extent": {
                "description": "No description",
                "key": "transition_extent",
                "label": "transition_extent",
                "type": "Float"
            }
        },
        "ports": {
            "input": {
                "caption": "input",
                "data_type": "Heightmap",
                "description": "No description",
                "type": "input"
            },
            "mask": {
                "caption": "mask",
                "data_type": "Heightmap",
                "description": "No description",
                "type": "input"
            },
            "output": {
                "caption": "output",
                "data_type": "Heightmap",
                "description": "No description",
                "type": "output"
            },
            "threshold": {
                "caption": "threshold",
                "data_type": "Heightmap",
                "description": "No description",
                "type": "input"
            }
        }
    },
    "ReverseMidpoint": {
        "category": "WIP",
        "description": "ReverseMidpoint generates an heightmap. It uses a polyline as a base, then recursively interpolate and displace midpoints to generate a terrain.",
        "label": "ReverseMidpoint",
        "parameters": {
            "inverse": {
                "description": "Toggle inversion of the output values.",
                "key": "inverse",
                "label": "inverse",
                "type": "Bool"
            },
            "noise_scale": {
                "description": "Added noise scaling.",
                "key": "noise_scale",
                "label": "noise_scale",
                "type": "Float"
            },
            "remap": {
                "description": "Remap the operator's output to a specified range, defaulting to [0, 1].",
                "key": "remap",
                "label": "remap",
                "type": "Bool"
            },
            "seed": {
                "description": "Random seed number.",
                "key": "seed",
                "label": "seed",
                "type": "Random seed number"
            }
        },
        "ports": {
            "heightmap": {
                "caption": "heightmap",
                "data_type": "Heightmap",
                "description": "Interpolated heightmap.",
                "type": "output"
            },
            "path": {
                "caption": "path",
                "data_type": "Path",
                "description": "Set of points (x, y) and elevations z.",
                "type": "input"
            }
        }
    },
    "Ridgelines": {
        "category": "Primitive/Authoring",
        "description": "Ridgelines generates an heightmap assuming the input path defines a ridgeline.",
        "label": "Ridgelines",
        "parameters": {
            "k_smoothing": {
                "description": "Smoothing intensity.",
                "key": "k_smoothing",
                "label": "k_smoothing",
                "type": "Float"
            },
            "talus_global": {
                "description": "Ridge slope.",
                "key": "talus_global",
                "label": "talus_global",
                "type": "Float"
            },
            "vmin": {
                "description": "Minimum value (lower values are clamped).",
                "key": "vmin",
                "label": "vmin",
                "type": "Float"
            },
            "width": {
                "description": "Ridge edge width.",
                "key": "width",
                "label": "width",
                "type": "Float"
            }
        },
        "ports": {
            "dx": {
                "caption": "dx",
                "data_type": "Heightmap",
                "description": "Displacement with respect to the domain size (x-direction).",
                "type": "input"
            },
            "dy": {
                "caption": "dy",
                "data_type": "Heightmap",
                "description": "Displacement with respect to the domain size (y-direction).",
                "type": "input"
            },
            "heightmap": {
                "caption": "heightmap",
                "data_type": "Heightmap",
                "description": "Interpolated heightmap.",
                "type": "output"
            },
            "path": {
                "caption": "path",
                "data_type": "Path",
                "description": "Set of points (x, y) and elevations z.",
                "type": "input"
            }
        }
    },
    "Rift": {
        "category": "Primitive/Function",
        "description": "Rift is function used to represent a conceptualized rift.",
        "label": "Rift",
        "parameters": {
            "angle": {
                "description": "Angle.",
                "key": "angle",
                "label": "angle",
                "type": "Float"
            },
            "center": {
                "description": "Reference center within the heightmap.",
                "key": "center",
                "label": "center",
                "type": "Vec2Float"
            },
            "post_gain": {
                "description": "No description",
                "key": "post_gain",
                "label": "post_gain",
                "type": "Float"
            },
            "post_inverse": {
                "description": "No description",
                "key": "post_inverse",
                "label": "post_inverse",
                "type": "Bool"
            },
            "post_remap": {
                "description": "No description",
                "key": "post_remap",
                "label": "post_remap",
                "type": "Value range"
            },
            "post_smoothing_radius": {
                "description": "No description",
                "key": "post_smoothing_radius",
                "label": "post_smoothing_radius",
                "type": "Float"
            },
            "sharp_bottom": {
                "description": "Decide whether the rift bottom is sharp or not.",
                "key": "sharp_bottom",
                "label": "sharp_bottom",
                "type": "Bool"
            },
            "slope": {
                "description": "Rift slope.",
                "key": "slope",
                "label": "slope",
                "type": "Float"
            },
            "width": {
                "description": "Rift width.",
                "key": "width",
                "label": "width",
                "type": "Float"
            }
        },
        "ports": {
            "control": {
                "caption": "control",
                "data_type": "Heightmap",
                "description": "Control parameter, acts as a multiplier for the width parameter.",
                "type": "input"
            },
            "dx": {
                "caption": "dx",
                "data_type": "Heightmap",
                "description": "Displacement with respect to the domain size (x-direction).",
                "type": "input"
            },
            "dy": {
                "caption": "dy",
                "data_type": "Heightmap",
                "description": "Displacement with respect to the domain size (y-direction).",
                "type": "input"
            },
            "envelope": {
                "caption": "envelope",
                "data_type": "Heightmap",
                "description": "No description",
                "type": "input"
            },
            "output": {
                "caption": "output",
                "data_type": "Heightmap",
                "description": "Rift heightmap.",
                "type": "output"
            }
        }
    },
    "Rifts": {
        "category": "Erosion/Hydraulic",
        "description": "No description available",
        "label": "Rifts",
        "parameters": {
            "amplitude": {
                "description": "No description",
                "key": "amplitude",
                "label": "amplitude",
                "type": "Float"
            },
            "angle": {
                "description": "No description",
                "key": "angle",
                "label": "angle",
                "type": "Float"
            },
            "apply_mask": {
                "description": "No description",
                "key": "apply_mask",
                "label": "apply_mask",
                "type": "Bool"
            },
            "center": {
                "description": "No description",
                "key": "center",
                "label": "center",
                "type": "Vec2Float"
            },
            "clamp_vmin": {
                "description": "No description",
                "key": "clamp_vmin",
                "label": "clamp_vmin",
                "type": "Float"
            },
            "elevation_noise_amp": {
                "description": "No description",
                "key": "elevation_noise_amp",
                "label": "elevation_noise_amp",
                "type": "Float"
            },
            "elevation_noise_shift": {
                "description": "No description",
                "key": "elevation_noise_shift",
                "label": "elevation_noise_shift",
                "type": "Float"
            },
            "k_smooth_bottom": {
                "description": "No description",
                "key": "k_smooth_bottom",
                "label": "k_smooth_bottom",
                "type": "Float"
            },
            "k_smooth_top": {
                "description": "No description",
                "key": "k_smooth_top",
                "label": "k_smooth_top",
                "type": "Float"
            },
            "kw": {
                "description": "No description",
                "key": "kw",
                "label": "kw",
                "type": "Wavenumber"
            },
            "mask_activate": {
                "description": "No description",
                "key": "mask_activate",
                "label": "mask_activate",
                "type": "Bool"
            },
            "mask_gain": {
                "description": "No description",
                "key": "mask_gain",
                "label": "mask_gain",
                "type": "Float"
            },
            "mask_gamma": {
                "description": "No description",
                "key": "mask_gamma",
                "label": "mask_gamma",
                "type": "Float"
            },
            "mask_inverse": {
                "description": "No description",
                "key": "mask_inverse",
                "label": "mask_inverse",
                "type": "Bool"
            },
            "mask_radius": {
                "description": "No description",
                "key": "mask_radius",
                "label": "mask_radius",
                "type": "Float"
            },
            "mask_type": {
                "description": "No description",
                "key": "mask_type",
                "label": "mask_type",
                "type": "Choice"
            },
            "post_gain": {
                "description": "No description",
                "key": "post_gain",
                "label": "post_gain",
                "type": "Float"
            },
            "post_inverse": {
                "description": "No description",
                "key": "post_inverse",
                "label": "post_inverse",
                "type": "Bool"
            },
            "post_mix": {
                "description": "No description",
                "key": "post_mix",
                "label": "post_mix",
                "type": "Float"
            },
            "post_mix_method": {
                "description": "No description",
                "key": "post_mix_method",
                "label": "post_mix_method",
                "type": "Enumeration"
            },
            "post_remap": {
                "description": "No description",
                "key": "post_remap",
                "label": "post_remap",
                "type": "Value range"
            },
            "post_smoothing_radius": {
                "description": "No description",
                "key": "post_smoothing_radius",
                "label": "post_smoothing_radius",
                "type": "Float"
            },
            "radial_spread_amp": {
                "description": "No description",
                "key": "radial_spread_amp",
                "label": "radial_spread_amp",
                "type": "Float"
            },
            "remap_vmin": {
                "description": "No description",
                "key": "remap_vmin",
                "label": "remap_vmin",
                "type": "Float"
            },
            "reverse_mask": {
                "description": "No description",
                "key": "reverse_mask",
                "label": "reverse_mask",
                "type": "Bool"
            },
            "seed": {
                "description": "No description",
                "key": "seed",
                "label": "seed",
                "type": "Random seed number"
            }
        },
        "ports": {
            "dx": {
                "caption": "dx",
                "data_type": "Heightmap",
                "description": "No description",
                "type": "input"
            },
            "dy": {
                "caption": "dy",
                "data_type": "Heightmap",
                "description": "No description",
                "type": "input"
            },
            "input": {
                "caption": "input",
                "data_type": "Heightmap",
                "description": "No description",
                "type": "input"
            },
            "mask": {
                "caption": "mask",
                "data_type": "Heightmap",
                "description": "No description",
                "type": "input"
            },
            "output": {
                "caption": "output",
                "data_type": "Heightmap",
                "description": "No description",
                "type": "output"
            }
        }
    },
    "Rotate": {
        "category": "Operator/Transform",
        "description": "No description available",
        "label": "Rotate",
        "parameters": {
            "angle": {
                "description": "No description",
                "key": "angle",
                "label": "angle",
                "type": "Float"
            },
            "zoom_in": {
                "description": "No description",
                "key": "zoom_in",
                "label": "zoom_in",
                "type": "Bool"
            }
        },
        "ports": {
            "input": {
                "caption": "input",
                "data_type": "Heightmap",
                "description": "No description",
                "type": "input"
            },
            "output": {
                "caption": "output",
                "data_type": "Heightmap",
                "description": "No description",
                "type": "output"
            }
        }
    },
    "RotateDisplacement": {
        "category": "Math",
        "description": "No description available",
        "label": "RotateDisplacement",
        "parameters": {
            "angle": {
                "description": "No description",
                "key": "angle",
                "label": "angle",
                "type": "Float"
            }
        },
        "ports": {
            "delta": {
                "caption": "delta",
                "data_type": "Heightmap",
                "description": "No description",
                "type": "input"
            },
            "dx": {
                "caption": "dx",
                "data_type": "Heightmap",
                "description": "No description",
                "type": "output"
            },
            "dy": {
                "caption": "dy",
                "data_type": "Heightmap",
                "description": "No description",
                "type": "output"
            }
        }
    },
    "Ruggedness": {
        "category": "Features",
        "description": "Measures the terrain roughness by computing the square root of the sum of squared elevation differences within a specified radius. Indicates how rough or smooth the terrain is by analyzing how much the elevation changes between neighboring areas. Higher values mean a more rugged, uneven surface, while lower values indicate a flatter, smoother landscape.",
        "label": "Ruggedness",
        "parameters": {
            "GPU": {
                "description": "Toogle GPU acceleration on or off.",
                "key": "GPU",
                "label": "GPU",
                "type": "Bool"
            },
            "inverse": {
                "description": "Toggle inversion of the output values.",
                "key": "inverse",
                "label": "inverse",
                "type": "Bool"
            },
            "radius": {
                "description": "Defines the neighborhood radius used for computing ruggedness. Larger values consider a wider area, capturing broader terrain variations.",
                "key": "radius",
                "label": "radius",
                "type": "Float"
            },
            "smoothing": {
                "description": "Enable or disable smoothing to reduce noise in the curvature computation.",
                "key": "smoothing",
                "label": "smoothing",
                "type": "Bool"
            },
            "smoothing_radius": {
                "description": "Specifies the radius for smoothing, determining how much the curvature is averaged over neighboring pixels.",
                "key": "smoothing_radius",
                "label": "smoothing_radius",
                "type": "Float"
            }
        },
        "ports": {
            "input": {
                "caption": "input",
                "data_type": "Heightmap",
                "description": "Heightmap input representing terrain elevations, used to calculate ruggedness.",
                "type": "input"
            },
            "output": {
                "caption": "output",
                "data_type": "Heightmap",
                "description": "Resulting heightmap where each pixel represents the calculated ruggedness value.",
                "type": "output"
            }
        }
    },
    "Rugosity": {
        "category": "Features",
        "description": "Rugosity identifies heightmap rugosity, i.e. the roughness or irregularity of the surface.",
        "label": "Rugosity",
        "parameters": {
            "GPU": {
                "description": "Toogle GPU acceleration on or off.",
                "key": "GPU",
                "label": "GPU",
                "type": "Bool"
            },
            "clamp_max": {
                "description": "Decides whether the rugosity values are clamped.",
                "key": "clamp_max",
                "label": "clamp_max",
                "type": "Bool"
            },
            "inverse": {
                "description": "Toggle inversion of the output values.",
                "key": "inverse",
                "label": "inverse",
                "type": "Bool"
            },
            "radius": {
                "description": "Filter radius with respect to the domain size.",
                "key": "radius",
                "label": "radius",
                "type": "Float"
            },
            "saturate": {
                "description": "A process that modifies the amplitude of elevations by first clamping them to a given interval and then scaling them so that the restricted interval matches the original input range. This enhances contrast in elevation variations while maintaining overall structure.",
                "key": "saturate",
                "label": "saturate",
                "type": "Value range"
            },
            "smoothing": {
                "description": "Enable or disable smoothing to reduce noise in the curvature computation.",
                "key": "smoothing",
                "label": "smoothing",
                "type": "Bool"
            },
            "smoothing_radius": {
                "description": "Specifies the radius for smoothing, determining how much the curvature is averaged over neighboring pixels.",
                "key": "smoothing_radius",
                "label": "smoothing_radius",
                "type": "Float"
            },
            "vc_max": {
                "description": "Rugosity clamping upper bound.",
                "key": "vc_max",
                "label": "vc_max",
                "type": "Float"
            }
        },
        "ports": {
            "input": {
                "caption": "input",
                "data_type": "Heightmap",
                "description": "Input heightmap.",
                "type": "input"
            },
            "output": {
                "caption": "output",
                "data_type": "Heightmap",
                "description": "Rugosity.",
                "type": "output"
            }
        }
    },
    "Saturate": {
        "category": "Filter/Recurve",
        "description": "A process that modifies the amplitude of elevations by first clamping them to a given interval and then scaling them so that the restricted interval matches the original input range. This enhances contrast in elevation variations while maintaining overall structure.",
        "label": "Saturate",
        "parameters": {
            "k_smoothing": {
                "description": "Smoothing intensity.",
                "key": "k_smoothing",
                "label": "k_smoothing",
                "type": "Float"
            },
            "post_gain": {
                "description": "Set the gain. Gain is a power law transformation altering the distribution of signal values, compressing or expanding certain regions of the signal depending on the exponent of the power law.",
                "key": "post_gain",
                "label": "post_gain",
                "type": "Float"
            },
            "post_inverse": {
                "description": "Inverts the output values after processing, flipping low and high values across the midrange.",
                "key": "post_inverse",
                "label": "post_inverse",
                "type": "Bool"
            },
            "post_mix": {
                "description": "Mixing factor for blending input and output values. A value of 0 uses only the input, 1 uses only the output, and intermediate values perform a linear interpolation.",
                "key": "post_mix",
                "label": "post_mix",
                "type": "Float"
            },
            "post_mix_method": {
                "description": "Method used to combine input and output values. Options include linear interpolation (default), min, max, smooth min, smooth max, add, and subtract.",
                "key": "post_mix_method",
                "label": "post_mix_method",
                "type": "Enumeration"
            },
            "post_remap": {
                "description": "Linearly remaps the output values to a specified target range (default is [0, 1]).",
                "key": "post_remap",
                "label": "post_remap",
                "type": "Value range"
            },
            "post_smoothing_radius": {
                "description": "Defines the radius for post-processing smoothing, determining the size of the neighborhood used to average local values and reduce high-frequency detail. A radius of 0 disables smoothing.",
                "key": "post_smoothing_radius",
                "label": "post_smoothing_radius",
                "type": "Float"
            },
            "range": {
                "description": "Saturation range: define the minimum and maximum values of the saturation process.",
                "key": "range",
                "label": "range",
                "type": "Value range"
            }
        },
        "ports": {
            "input": {
                "caption": "input",
                "data_type": "Heightmap",
                "description": "Input heightmap.",
                "type": "input"
            },
            "output": {
                "caption": "output",
                "data_type": "Heightmap",
                "description": "Saturated heightmap.",
                "type": "output"
            }
        }
    },
    "ScanMask": {
        "category": "Mask",
        "description": "ScanMask adjusts the brightness and contrast of an input mask.",
        "label": "ScanMask",
        "parameters": {
            "brightness": {
                "description": "Brightness adjustment.",
                "key": "brightness",
                "label": "brightness",
                "type": "Float"
            },
            "contrast": {
                "description": "Contrast adjustment.",
                "key": "contrast",
                "label": "contrast",
                "type": "Float"
            },
            "remap": {
                "description": "Remap the operator's output to a specified range, defaulting to [0, 1].",
                "key": "remap",
                "label": "remap",
                "type": "Bool"
            }
        },
        "ports": {
            "input": {
                "caption": "input",
                "data_type": "Heightmap",
                "description": "Input heightmap.",
                "type": "input"
            },
            "output": {
                "caption": "output",
                "data_type": "Heightmap",
                "description": "Adjusted heightmap.",
                "type": "output"
            }
        }
    },
    "SedimentDeposition": {
        "category": "WIP",
        "description": "TODO",
        "label": "SedimentDeposition",
        "parameters": {
            "iterations": {
                "description": "TODO",
                "key": "iterations",
                "label": "iterations",
                "type": "Integer"
            },
            "max_deposition": {
                "description": "TODO",
                "key": "max_deposition",
                "label": "max_deposition",
                "type": "Float"
            },
            "scale_talus_with_elevation": {
                "description": "Scales the talus amplitude based on heightmap elevation, reducing it at lower elevations and maintaining the nominal value at higher elevations.",
                "key": "scale_talus_with_elevation",
                "label": "scale_talus_with_elevation",
                "type": "Bool"
            },
            "talus_global": {
                "description": "TODO",
                "key": "talus_global",
                "label": "talus_global",
                "type": "Float"
            },
            "thermal_subiterations": {
                "description": "TODO",
                "key": "thermal_subiterations",
                "label": "thermal_subiterations",
                "type": "Integer"
            }
        },
        "ports": {
            "deposition": {
                "caption": "deposition",
                "data_type": "Heightmap",
                "description": "Deposition map (in [0, 1]).",
                "type": "output"
            },
            "input": {
                "caption": "input",
                "data_type": "Heightmap",
                "description": "TODO",
                "type": "input"
            },
            "mask": {
                "caption": "mask",
                "data_type": "Heightmap",
                "description": "Mask defining the filtering intensity (expected in [0, 1]).",
                "type": "input"
            },
            "output": {
                "caption": "output",
                "data_type": "Heightmap",
                "description": "TODO",
                "type": "output"
            }
        }
    },
    "SelectAngle": {
        "category": "Mask/Selector",
        "description": "SelectAngle is a thresholding operator. It selects angle values within a specified range defined by the shape of a Gaussian pulse.",
        "label": "SelectAngle",
        "parameters": {
            "angle": {
                "description": "Selection center value.",
                "key": "angle",
                "label": "angle",
                "type": "Float"
            },
            "post_gain": {
                "description": "Set the gain. Gain is a power law transformation altering the distribution of signal values, compressing or expanding certain regions of the signal depending on the exponent of the power law.",
                "key": "post_gain",
                "label": "post_gain",
                "type": "Float"
            },
            "post_inverse": {
                "description": "Inverts the output values after processing, flipping low and high values across the midrange.",
                "key": "post_inverse",
                "label": "post_inverse",
                "type": "Bool"
            },
            "post_remap": {
                "description": "Linearly remaps the output values to a specified target range (default is [0, 1]).",
                "key": "post_remap",
                "label": "post_remap",
                "type": "Value range"
            },
            "post_smoothing_radius": {
                "description": "Defines the radius for post-processing smoothing, determining the size of the neighborhood used to average local values and reduce high-frequency detail. A radius of 0 disables smoothing.",
                "key": "post_smoothing_radius",
                "label": "post_smoothing_radius",
                "type": "Float"
            },
            "radius": {
                "description": "Pre-filter radius.",
                "key": "radius",
                "label": "radius",
                "type": "Float"
            },
            "sigma": {
                "description": "Selection half-width.",
                "key": "sigma",
                "label": "sigma",
                "type": "Float"
            }
        },
        "ports": {
            "input": {
                "caption": "input",
                "data_type": "Heightmap",
                "description": "Input heightmap.",
                "type": "input"
            },
            "output": {
                "caption": "output",
                "data_type": "Heightmap",
                "description": "Mask heightmap (in [0, 1]).",
                "type": "output"
            }
        }
    },
    "SelectBlobLog": {
        "category": "Mask/Selector",
        "description": "SelectBlobLog performs 'blob' detection using oa Laplacian of Gaussian (log) method. Blobs are areas in an image that are either brighter or darker than the surrounding areas.",
        "label": "SelectBlobLog",
        "parameters": {
            "post_gain": {
                "description": "Set the gain. Gain is a power law transformation altering the distribution of signal values, compressing or expanding certain regions of the signal depending on the exponent of the power law.",
                "key": "post_gain",
                "label": "post_gain",
                "type": "Float"
            },
            "post_inverse": {
                "description": "Inverts the output values after processing, flipping low and high values across the midrange.",
                "key": "post_inverse",
                "label": "post_inverse",
                "type": "Bool"
            },
            "post_remap": {
                "description": "Linearly remaps the output values to a specified target range (default is [0, 1]).",
                "key": "post_remap",
                "label": "post_remap",
                "type": "Value range"
            },
            "post_smoothing_radius": {
                "description": "Defines the radius for post-processing smoothing, determining the size of the neighborhood used to average local values and reduce high-frequency detail. A radius of 0 disables smoothing.",
                "key": "post_smoothing_radius",
                "label": "post_smoothing_radius",
                "type": "Float"
            },
            "radius": {
                "description": "Detection radius with respect to the domain size.",
                "key": "radius",
                "label": "radius",
                "type": "Float"
            }
        },
        "ports": {
            "input": {
                "caption": "input",
                "data_type": "Heightmap",
                "description": "Input heightmap.",
                "type": "input"
            },
            "output": {
                "caption": "output",
                "data_type": "Heightmap",
                "description": "Mask heightmap (in [0, 1]).",
                "type": "output"
            }
        }
    },
    "SelectCavities": {
        "category": "Mask/Selector",
        "description": "SelectCavities analyzes the curvature of an heightmap to identify concave or convex features such as valleys, depressions, ridges, or peaks.",
        "label": "SelectCavities",
        "parameters": {
            "concave": {
                "description": "Decides whether concave or convex features are detected.",
                "key": "concave",
                "label": "concave",
                "type": "Bool"
            },
            "post_gain": {
                "description": "Set the gain. Gain is a power law transformation altering the distribution of signal values, compressing or expanding certain regions of the signal depending on the exponent of the power law.",
                "key": "post_gain",
                "label": "post_gain",
                "type": "Float"
            },
            "post_inverse": {
                "description": "Inverts the output values after processing, flipping low and high values across the midrange.",
                "key": "post_inverse",
                "label": "post_inverse",
                "type": "Bool"
            },
            "post_remap": {
                "description": "Linearly remaps the output values to a specified target range (default is [0, 1]).",
                "key": "post_remap",
                "label": "post_remap",
                "type": "Value range"
            },
            "post_smoothing_radius": {
                "description": "Defines the radius for post-processing smoothing, determining the size of the neighborhood used to average local values and reduce high-frequency detail. A radius of 0 disables smoothing.",
                "key": "post_smoothing_radius",
                "label": "post_smoothing_radius",
                "type": "Float"
            },
            "radius": {
                "description": "Detection radius with respect to the domain size.",
                "key": "radius",
                "label": "radius",
                "type": "Float"
            }
        },
        "ports": {
            "input": {
                "caption": "input",
                "data_type": "Heightmap",
                "description": "Input heightmap.",
                "type": "input"
            },
            "output": {
                "caption": "output",
                "data_type": "Heightmap",
                "description": "Mask heightmap (in [0, 1]).",
                "type": "output"
            }
        }
    },
    "SelectGt": {
        "category": "Mask/Selector",
        "description": "SelectGt is a thresholding operator. It transforms an input heightmap into a binary heightmap, where each pixel is assigned either a value of 0 or 1, depending on whether its intensity value surpasses a specified threshold value.",
        "label": "SelectGt",
        "parameters": {
            "post_gain": {
                "description": "Set the gain. Gain is a power law transformation altering the distribution of signal values, compressing or expanding certain regions of the signal depending on the exponent of the power law.",
                "key": "post_gain",
                "label": "post_gain",
                "type": "Float"
            },
            "post_inverse": {
                "description": "Inverts the output values after processing, flipping low and high values across the midrange.",
                "key": "post_inverse",
                "label": "post_inverse",
                "type": "Bool"
            },
            "post_remap": {
                "description": "Linearly remaps the output values to a specified target range (default is [0, 1]).",
                "key": "post_remap",
                "label": "post_remap",
                "type": "Value range"
            },
            "post_smoothing_radius": {
                "description": "Defines the radius for post-processing smoothing, determining the size of the neighborhood used to average local values and reduce high-frequency detail. A radius of 0 disables smoothing.",
                "key": "post_smoothing_radius",
                "label": "post_smoothing_radius",
                "type": "Float"
            },
            "value": {
                "description": "Selection value.",
                "key": "value",
                "label": "value",
                "type": "Float"
            }
        },
        "ports": {
            "input": {
                "caption": "input",
                "data_type": "Heightmap",
                "description": "Input heightmap.",
                "type": "input"
            },
            "output": {
                "caption": "output",
                "data_type": "Heightmap",
                "description": "Mask heightmap (in [0, 1]).",
                "type": "output"
            }
        }
    },
    "SelectInterval": {
        "category": "Mask/Selector",
        "description": "SelectInterval is a thresholding operator. It transforms an input heightmap into a binary heightmap, where each pixel is assigned either a value of 0 or 1, depending on whether its intensity value is within an interval of values.",
        "label": "SelectInterval",
        "parameters": {
            "post_gain": {
                "description": "Set the gain. Gain is a power law transformation altering the distribution of signal values, compressing or expanding certain regions of the signal depending on the exponent of the power law.",
                "key": "post_gain",
                "label": "post_gain",
                "type": "Float"
            },
            "post_inverse": {
                "description": "Inverts the output values after processing, flipping low and high values across the midrange.",
                "key": "post_inverse",
                "label": "post_inverse",
                "type": "Bool"
            },
            "post_remap": {
                "description": "Linearly remaps the output values to a specified target range (default is [0, 1]).",
                "key": "post_remap",
                "label": "post_remap",
                "type": "Value range"
            },
            "post_smoothing_radius": {
                "description": "Defines the radius for post-processing smoothing, determining the size of the neighborhood used to average local values and reduce high-frequency detail. A radius of 0 disables smoothing.",
                "key": "post_smoothing_radius",
                "label": "post_smoothing_radius",
                "type": "Float"
            },
            "value1": {
                "description": "Selection value, lower bound.",
                "key": "value1",
                "label": "value1",
                "type": "Float"
            },
            "value2": {
                "description": "Selection value, upper bound.",
                "key": "value2",
                "label": "value2",
                "type": "Float"
            }
        },
        "ports": {
            "input": {
                "caption": "input",
                "data_type": "Heightmap",
                "description": "Input heightmap.",
                "type": "input"
            },
            "output": {
                "caption": "output",
                "data_type": "Heightmap",
                "description": "Mask heightmap (in [0, 1]).",
                "type": "output"
            }
        }
    },
    "SelectInwardOutward": {
        "category": "Mask/Selector",
        "description": "SelectInwardOutward returns values > 0.5 if the slope is pointing to the center (slope is inward), and values < 0.5 otherwise (slope is outward).",
        "label": "SelectInwardOutward",
        "parameters": {
            "center": {
                "description": "Reference center within the heightmap.",
                "key": "center",
                "label": "center",
                "type": "Vec2Float"
            },
            "post_gain": {
                "description": "Set the gain. Gain is a power law transformation altering the distribution of signal values, compressing or expanding certain regions of the signal depending on the exponent of the power law.",
                "key": "post_gain",
                "label": "post_gain",
                "type": "Float"
            },
            "post_inverse": {
                "description": "Inverts the output values after processing, flipping low and high values across the midrange.",
                "key": "post_inverse",
                "label": "post_inverse",
                "type": "Bool"
            },
            "post_remap": {
                "description": "Linearly remaps the output values to a specified target range (default is [0, 1]).",
                "key": "post_remap",
                "label": "post_remap",
                "type": "Value range"
            },
            "post_smoothing_radius": {
                "description": "Defines the radius for post-processing smoothing, determining the size of the neighborhood used to average local values and reduce high-frequency detail. A radius of 0 disables smoothing.",
                "key": "post_smoothing_radius",
                "label": "post_smoothing_radius",
                "type": "Float"
            }
        },
        "ports": {
            "input": {
                "caption": "input",
                "data_type": "Heightmap",
                "description": "Input heightmap.",
                "type": "input"
            },
            "output": {
                "caption": "output",
                "data_type": "Heightmap",
                "description": "Mask heightmap (in [0, 1]).",
                "type": "output"
            }
        }
    },
    "SelectMidrange": {
        "category": "Mask/Selector",
        "description": "TODO",
        "label": "SelectMidrange",
        "parameters": {
            "gain": {
                "description": "TODO",
                "key": "gain",
                "label": "gain",
                "type": "Float"
            },
            "post_gain": {
                "description": "Set the gain. Gain is a power law transformation altering the distribution of signal values, compressing or expanding certain regions of the signal depending on the exponent of the power law.",
                "key": "post_gain",
                "label": "post_gain",
                "type": "Float"
            },
            "post_inverse": {
                "description": "Inverts the output values after processing, flipping low and high values across the midrange.",
                "key": "post_inverse",
                "label": "post_inverse",
                "type": "Bool"
            },
            "post_remap": {
                "description": "Linearly remaps the output values to a specified target range (default is [0, 1]).",
                "key": "post_remap",
                "label": "post_remap",
                "type": "Value range"
            },
            "post_smoothing_radius": {
                "description": "Defines the radius for post-processing smoothing, determining the size of the neighborhood used to average local values and reduce high-frequency detail. A radius of 0 disables smoothing.",
                "key": "post_smoothing_radius",
                "label": "post_smoothing_radius",
                "type": "Float"
            }
        },
        "ports": {
            "input": {
                "caption": "input",
                "data_type": "Heightmap",
                "description": "TODO",
                "type": "input"
            },
            "output": {
                "caption": "output",
                "data_type": "Heightmap",
                "description": "TODO",
                "type": "output"
            }
        }
    },
    "SelectMultiband3": {
        "category": "Mask/Selector",
        "description": "TODO",
        "label": "SelectMultiband3",
        "parameters": {
            "overlap": {
                "description": "TODO",
                "key": "overlap",
                "label": "overlap",
                "type": "Float"
            },
            "post_gain": {
                "description": "Set the gain. Gain is a power law transformation altering the distribution of signal values, compressing or expanding certain regions of the signal depending on the exponent of the power law.",
                "key": "post_gain",
                "label": "post_gain",
                "type": "Float"
            },
            "post_inverse": {
                "description": "Inverts the output values after processing, flipping low and high values across the midrange.",
                "key": "post_inverse",
                "label": "post_inverse",
                "type": "Bool"
            },
            "post_remap": {
                "description": "Linearly remaps the output values to a specified target range (default is [0, 1]).",
                "key": "post_remap",
                "label": "post_remap",
                "type": "Value range"
            },
            "post_smoothing_radius": {
                "description": "Defines the radius for post-processing smoothing, determining the size of the neighborhood used to average local values and reduce high-frequency detail. A radius of 0 disables smoothing.",
                "key": "post_smoothing_radius",
                "label": "post_smoothing_radius",
                "type": "Float"
            },
            "ratio1": {
                "description": "TODO",
                "key": "ratio1",
                "label": "ratio1",
                "type": "Float"
            },
            "ratio2": {
                "description": "TODO",
                "key": "ratio2",
                "label": "ratio2",
                "type": "Float"
            }
        },
        "ports": {
            "high": {
                "caption": "high",
                "data_type": "Heightmap",
                "description": "TODO",
                "type": "output"
            },
            "input": {
                "caption": "input",
                "data_type": "Heightmap",
                "description": "TODO",
                "type": "input"
            },
            "low": {
                "caption": "low",
                "data_type": "Heightmap",
                "description": "TODO",
                "type": "output"
            },
            "mid": {
                "caption": "mid",
                "data_type": "Heightmap",
                "description": "TODO",
                "type": "output"
            }
        }
    },
    "SelectPulse": {
        "category": "Mask/Selector",
        "description": "SelectPulse is a thresholding operator. It selects values within a specified range defined by the shape of a Gaussian pulse.",
        "label": "SelectPulse",
        "parameters": {
            "post_gain": {
                "description": "Set the gain. Gain is a power law transformation altering the distribution of signal values, compressing or expanding certain regions of the signal depending on the exponent of the power law.",
                "key": "post_gain",
                "label": "post_gain",
                "type": "Float"
            },
            "post_inverse": {
                "description": "Inverts the output values after processing, flipping low and high values across the midrange.",
                "key": "post_inverse",
                "label": "post_inverse",
                "type": "Bool"
            },
            "post_remap": {
                "description": "Linearly remaps the output values to a specified target range (default is [0, 1]).",
                "key": "post_remap",
                "label": "post_remap",
                "type": "Value range"
            },
            "post_smoothing_radius": {
                "description": "Defines the radius for post-processing smoothing, determining the size of the neighborhood used to average local values and reduce high-frequency detail. A radius of 0 disables smoothing.",
                "key": "post_smoothing_radius",
                "label": "post_smoothing_radius",
                "type": "Float"
            },
            "sigma": {
                "description": "Selection half-width.",
                "key": "sigma",
                "label": "sigma",
                "type": "Float"
            },
            "value": {
                "description": "Selection center value.",
                "key": "value",
                "label": "value",
                "type": "Float"
            }
        },
        "ports": {
            "input": {
                "caption": "input",
                "data_type": "Heightmap",
                "description": "Input heightmap.",
                "type": "input"
            },
            "output": {
                "caption": "output",
                "data_type": "Heightmap",
                "description": "Mask heightmap (in [0, 1]).",
                "type": "output"
            }
        }
    },
    "SelectRivers": {
        "category": "Mask/Selector",
        "description": "SelectRivers is a thresholding operator. It creates a mask for river systems based on a flow accumulation threshold.",
        "label": "SelectRivers",
        "parameters": {
            "clipping_ratio": {
                "description": "TODO",
                "key": "clipping_ratio",
                "label": "clipping_ratio",
                "type": "Float"
            },
            "post_gain": {
                "description": "Set the gain. Gain is a power law transformation altering the distribution of signal values, compressing or expanding certain regions of the signal depending on the exponent of the power law.",
                "key": "post_gain",
                "label": "post_gain",
                "type": "Float"
            },
            "post_inverse": {
                "description": "Inverts the output values after processing, flipping low and high values across the midrange.",
                "key": "post_inverse",
                "label": "post_inverse",
                "type": "Bool"
            },
            "post_remap": {
                "description": "Linearly remaps the output values to a specified target range (default is [0, 1]).",
                "key": "post_remap",
                "label": "post_remap",
                "type": "Value range"
            },
            "post_smoothing_radius": {
                "description": "Defines the radius for post-processing smoothing, determining the size of the neighborhood used to average local values and reduce high-frequency detail. A radius of 0 disables smoothing.",
                "key": "post_smoothing_radius",
                "label": "post_smoothing_radius",
                "type": "Float"
            },
            "talus_ref": {
                "description": "Reference talus, with small values of talus_ref leading to thinner flow streams.",
                "key": "talus_ref",
                "label": "talus_ref",
                "type": "Float"
            }
        },
        "ports": {
            "input": {
                "caption": "input",
                "data_type": "Heightmap",
                "description": "Input heightmap.",
                "type": "input"
            },
            "output": {
                "caption": "output",
                "data_type": "Heightmap",
                "description": "Mask heightmap (in [0, 1]).",
                "type": "output"
            }
        }
    },
    "SelectSlope": {
        "category": "Mask/Selector",
        "description": "TODO",
        "label": "SelectSlope",
        "parameters": {
            "GPU": {
                "description": "Toogle GPU acceleration on or off.",
                "key": "GPU",
                "label": "GPU",
                "type": "Bool"
            },
            "post_gain": {
                "description": "Set the gain. Gain is a power law transformation altering the distribution of signal values, compressing or expanding certain regions of the signal depending on the exponent of the power law.",
                "key": "post_gain",
                "label": "post_gain",
                "type": "Float"
            },
            "post_inverse": {
                "description": "Inverts the output values after processing, flipping low and high values across the midrange.",
                "key": "post_inverse",
                "label": "post_inverse",
                "type": "Bool"
            },
            "post_remap": {
                "description": "Linearly remaps the output values to a specified target range (default is [0, 1]).",
                "key": "post_remap",
                "label": "post_remap",
                "type": "Value range"
            },
            "post_smoothing_radius": {
                "description": "Defines the radius for post-processing smoothing, determining the size of the neighborhood used to average local values and reduce high-frequency detail. A radius of 0 disables smoothing.",
                "key": "post_smoothing_radius",
                "label": "post_smoothing_radius",
                "type": "Float"
            },
            "radius": {
                "description": "TODO",
                "key": "radius",
                "label": "radius",
                "type": "Float"
            }
        },
        "ports": {
            "input": {
                "caption": "input",
                "data_type": "Heightmap",
                "description": "TODO",
                "type": "input"
            },
            "output": {
                "caption": "output",
                "data_type": "Heightmap",
                "description": "TODO",
                "type": "output"
            }
        }
    },
    "SelectTransitions": {
        "category": "Mask/Selector",
        "description": "SelectTransitions returns a mask filled with 1 at the blending transition between two heightmaps, and 0 elsewhere.",
        "label": "SelectTransitions",
        "parameters": {
            "post_gain": {
                "description": "Set the gain. Gain is a power law transformation altering the distribution of signal values, compressing or expanding certain regions of the signal depending on the exponent of the power law.",
                "key": "post_gain",
                "label": "post_gain",
                "type": "Float"
            },
            "post_inverse": {
                "description": "Inverts the output values after processing, flipping low and high values across the midrange.",
                "key": "post_inverse",
                "label": "post_inverse",
                "type": "Bool"
            },
            "post_remap": {
                "description": "Linearly remaps the output values to a specified target range (default is [0, 1]).",
                "key": "post_remap",
                "label": "post_remap",
                "type": "Value range"
            },
            "post_smoothing_radius": {
                "description": "Defines the radius for post-processing smoothing, determining the size of the neighborhood used to average local values and reduce high-frequency detail. A radius of 0 disables smoothing.",
                "key": "post_smoothing_radius",
                "label": "post_smoothing_radius",
                "type": "Float"
            }
        },
        "ports": {
            "blend": {
                "caption": "blend",
                "data_type": "Heightmap",
                "description": "Blended heightmap.",
                "type": "input"
            },
            "input 1": {
                "caption": "input 1",
                "data_type": "Heightmap",
                "description": "Input heightmap 1.",
                "type": "input"
            },
            "input 2": {
                "caption": "input 2",
                "data_type": "Heightmap",
                "description": "Input heightmap 2.",
                "type": "input"
            },
            "output": {
                "caption": "output",
                "data_type": "Heightmap",
                "description": "Mask heightmap (in [0, 1]).",
                "type": "output"
            }
        }
    },
    "SelectValley": {
        "category": "Mask/Selector",
        "description": "Identifies and selects valley-like regions in the heightmap based on curvature analysis. The selection can be inverted, and additional parameters allow fine-tuning of the selection process. The output is a mask representing the relative width of the valley. The value is 1 at the valley center and decreases to 0 at the edges of the valley.",
        "label": "SelectValley",
        "parameters": {
            "GPU": {
                "description": "Enables or disables GPU acceleration for faster processing.",
                "key": "GPU",
                "label": "GPU",
                "type": "Bool"
            },
            "post_gain": {
                "description": "Set the gain. Gain is a power law transformation altering the distribution of signal values, compressing or expanding certain regions of the signal depending on the exponent of the power law.",
                "key": "post_gain",
                "label": "post_gain",
                "type": "Float"
            },
            "post_inverse": {
                "description": "Inverts the output values after processing, flipping low and high values across the midrange.",
                "key": "post_inverse",
                "label": "post_inverse",
                "type": "Bool"
            },
            "post_remap": {
                "description": "Linearly remaps the output values to a specified target range (default is [0, 1]).",
                "key": "post_remap",
                "label": "post_remap",
                "type": "Value range"
            },
            "post_smoothing_radius": {
                "description": "Defines the radius for post-processing smoothing, determining the size of the neighborhood used to average local values and reduce high-frequency detail. A radius of 0 disables smoothing.",
                "key": "post_smoothing_radius",
                "label": "post_smoothing_radius",
                "type": "Float"
            },
            "radius": {
                "description": "Defines the search radius for valley detection, controlling how localized or broad the selection is.",
                "key": "radius",
                "label": "radius",
                "type": "Float"
            },
            "ridge_select": {
                "description": "If enabled, selects ridges instead of valleys.",
                "key": "ridge_select",
                "label": "ridge_select",
                "type": "Bool"
            }
        },
        "ports": {
            "input": {
                "caption": "input",
                "data_type": "Heightmap",
                "description": "Heightmap data used as input for valley detection.",
                "type": "input"
            },
            "output": {
                "caption": "output",
                "data_type": "Heightmap",
                "description": "A mask representing the relative width of the valley. The value is 1 at the valley center and decreases to 0 at the edges of the valley.",
                "type": "output"
            }
        }
    },
    "SetAlpha": {
        "category": "Texture",
        "description": "SetAlpha adjusts the transparency of a texture based on an input alpha value, which can either be a single scalar or an array. When provided with a scalar alpha value, the function uniformly adjusts the transparency of the entire texture. Alternatively, when given an array of alpha values, it enables fine-grained control over the transparency of different parts of the texture, allowing for varied opacity across the texture's surface.",
        "label": "SetAlpha",
        "parameters": {
            "alpha": {
                "description": "Transparency as a scalar value (overriden if this alpha input is set).",
                "key": "alpha",
                "label": "alpha",
                "type": "Float"
            },
            "clamp": {
                "description": "TODO",
                "key": "clamp",
                "label": "clamp",
                "type": "Bool"
            },
            "reverse": {
                "description": "TODO",
                "key": "reverse",
                "label": "reverse",
                "type": "Bool"
            }
        },
        "ports": {
            "alpha": {
                "caption": "alpha",
                "data_type": "Heightmap",
                "description": "Transparency (expected to be in [0, 1]).",
                "type": "input"
            },
            "noise": {
                "caption": "noise",
                "data_type": "Heightmap",
                "description": "TODO",
                "type": "input"
            },
            "texture in": {
                "caption": "texture in",
                "data_type": "HeightmapRGBA",
                "description": "TODO",
                "type": "input"
            },
            "texture out": {
                "caption": "texture out",
                "data_type": "HeightmapRGBA",
                "description": "TODO",
                "type": "output"
            }
        }
    },
    "SetBorders": {
        "category": "Math/Boundaries",
        "description": "TODO",
        "label": "SetBorders",
        "parameters": {
            "radius": {
                "description": "TODO",
                "key": "radius",
                "label": "radius",
                "type": "Float"
            },
            "unique_border_value": {
                "description": "TODO",
                "key": "unique_border_value",
                "label": "unique_border_value",
                "type": "Bool"
            },
            "value_east": {
                "description": "TODO",
                "key": "value_east",
                "label": "value_east",
                "type": "Float"
            },
            "value_north": {
                "description": "TODO",
                "key": "value_north",
                "label": "value_north",
                "type": "Float"
            },
            "value_south": {
                "description": "TODO",
                "key": "value_south",
                "label": "value_south",
                "type": "Float"
            },
            "value_west": {
                "description": "TODO",
                "key": "value_west",
                "label": "value_west",
                "type": "Float"
            }
        },
        "ports": {
            "input": {
                "caption": "input",
                "data_type": "Heightmap",
                "description": "TODO",
                "type": "input"
            },
            "output": {
                "caption": "output",
                "data_type": "Heightmap",
                "description": "TODO",
                "type": "output"
            }
        }
    },
    "ShapeIndex": {
        "category": "Filter/Smoothing",
        "description": "ShapeIndex is a measure used to quantify the shape complexity of landforms in an heightmap. It is calculated based on the second derivatives of the elevation surface. The surface index is greater than 0.5 for convex surface and lower than 0.5 for concave surface.",
        "label": "ShapeIndex",
        "parameters": {
            "GPU": {
                "description": "TODO",
                "key": "GPU",
                "label": "GPU",
                "type": "Bool"
            },
            "inverse": {
                "description": "Toggle inversion of the output values.",
                "key": "inverse",
                "label": "inverse",
                "type": "Bool"
            },
            "radius": {
                "description": "Filter radius with respect to the domain size.",
                "key": "radius",
                "label": "radius",
                "type": "Float"
            },
            "smoothing": {
                "description": "Enable or disable smoothing to reduce noise in the curvature computation.",
                "key": "smoothing",
                "label": "smoothing",
                "type": "Bool"
            },
            "smoothing_radius": {
                "description": "Specifies the radius for smoothing, determining how much the curvature is averaged over neighboring pixels.",
                "key": "smoothing_radius",
                "label": "smoothing_radius",
                "type": "Float"
            }
        },
        "ports": {
            "input": {
                "caption": "input",
                "data_type": "Heightmap",
                "description": "Input heightmap.",
                "type": "input"
            },
            "output": {
                "caption": "output",
                "data_type": "Heightmap",
                "description": "Shape index.",
                "type": "output"
            }
        }
    },
    "SharpenCone": {
        "category": "Filter/Smoothing",
        "description": "SharpenCone is a cone kernel-based sharpen operator enhancing sharpness by emphasizing edges and fine details using a radial gradient shape.",
        "label": "SharpenCone",
        "parameters": {
            "radius": {
                "description": "Filter radius with respect to the domain size.",
                "key": "radius",
                "label": "radius",
                "type": "Float"
            },
            "scale": {
                "description": "Sharpening intensity.",
                "key": "scale",
                "label": "scale",
                "type": "Float"
            }
        },
        "ports": {
            "input": {
                "caption": "input",
                "data_type": "Heightmap",
                "description": "Input heightmap.",
                "type": "input"
            },
            "mask": {
                "caption": "mask",
                "data_type": "Heightmap",
                "description": "Mask defining the filtering intensity (expected in [0, 1]).",
                "type": "input"
            },
            "output": {
                "caption": "output",
                "data_type": "Heightmap",
                "description": "Filtered heightmap.",
                "type": "output"
            }
        }
    },
    "ShatteredPeak": {
        "category": "Primitive/Geological",
        "description": "No description available",
        "label": "ShatteredPeak",
        "parameters": {
            "add_deposition": {
                "description": "No description",
                "key": "add_deposition",
                "label": "add_deposition",
                "type": "Bool"
            },
            "angle": {
                "description": "No description",
                "key": "angle",
                "label": "angle",
                "type": "Float"
            },
            "base_noise_amp": {
                "description": "No description",
                "key": "base_noise_amp",
                "label": "base_noise_amp",
                "type": "Float"
            },
            "bulk_amp": {
                "description": "No description",
                "key": "bulk_amp",
                "label": "bulk_amp",
                "type": "Float"
            },
            "center": {
                "description": "No description",
                "key": "center",
                "label": "center",
                "type": "Vec2Float"
            },
            "elevation": {
                "description": "No description",
                "key": "elevation",
                "label": "elevation",
                "type": "Float"
            },
            "gamma": {
                "description": "No description",
                "key": "gamma",
                "label": "gamma",
                "type": "Float"
            },
            "k_smoothing": {
                "description": "No description",
                "key": "k_smoothing",
                "label": "k_smoothing",
                "type": "Float"
            },
            "octaves": {
                "description": "No description",
                "key": "octaves",
                "label": "octaves",
                "type": "Integer"
            },
            "peak_kw": {
                "description": "No description",
                "key": "peak_kw",
                "label": "peak_kw",
                "type": "Float"
            },
            "post_gain": {
                "description": "No description",
                "key": "post_gain",
                "label": "post_gain",
                "type": "Float"
            },
            "post_inverse": {
                "description": "No description",
                "key": "post_inverse",
                "label": "post_inverse",
                "type": "Bool"
            },
            "post_remap": {
                "description": "No description",
                "key": "post_remap",
                "label": "post_remap",
                "type": "Value range"
            },
            "post_smoothing_radius": {
                "description": "No description",
                "key": "post_smoothing_radius",
                "label": "post_smoothing_radius",
                "type": "Float"
            },
            "rugosity": {
                "description": "No description",
                "key": "rugosity",
                "label": "rugosity",
                "type": "Float"
            },
            "scale": {
                "description": "No description",
                "key": "scale",
                "label": "scale",
                "type": "Float"
            },
            "seed": {
                "description": "No description",
                "key": "seed",
                "label": "seed",
                "type": "Random seed number"
            }
        },
        "ports": {
            "dx": {
                "caption": "dx",
                "data_type": "Heightmap",
                "description": "No description",
                "type": "input"
            },
            "dy": {
                "caption": "dy",
                "data_type": "Heightmap",
                "description": "No description",
                "type": "input"
            },
            "envelope": {
                "caption": "envelope",
                "data_type": "Heightmap",
                "description": "No description",
                "type": "input"
            },
            "out": {
                "caption": "out",
                "data_type": "Heightmap",
                "description": "No description",
                "type": "output"
            }
        }
    },
    "ShiftElevation": {
        "category": "Filter/Range",
        "description": "The ShiftElevation operator involves adjusting each data point by adding it with a predetermined constant.",
        "label": "ShiftElevation",
        "parameters": {
            "shift": {
                "description": "Constant by which each elevation values will be added.",
                "key": "shift",
                "label": "shift",
                "type": "Float"
            }
        },
        "ports": {
            "input": {
                "caption": "input",
                "data_type": "Heightmap",
                "description": "Input heightmap.",
                "type": "input"
            },
            "output": {
                "caption": "output",
                "data_type": "Heightmap",
                "description": "Resulting heightmap after applying the shift.",
                "type": "output"
            }
        }
    },
    "Skeleton": {
        "category": "Operator/Morphology",
        "description": "No description available",
        "label": "Skeleton",
        "parameters": {
            "threshold": {
                "description": "No description",
                "key": "threshold",
                "label": "threshold",
                "type": "Float"
            }
        },
        "ports": {
            "input": {
                "caption": "input",
                "data_type": "Heightmap",
                "description": "No description",
                "type": "input"
            },
            "output": {
                "caption": "output",
                "data_type": "Heightmap",
                "description": "No description",
                "type": "output"
            }
        }
    },
    "Slope": {
        "category": "Primitive/Function",
        "description": "Slope is function used to represent continuous terrain slope.",
        "label": "Slope",
        "parameters": {
            "angle": {
                "description": "Angle.",
                "key": "angle",
                "label": "angle",
                "type": "Float"
            },
            "center": {
                "description": "Reference center within the heightmap.",
                "key": "center",
                "label": "center",
                "type": "Vec2Float"
            },
            "inverse": {
                "description": "Toggle inversion of the output values.",
                "key": "inverse",
                "label": "inverse",
                "type": "Bool"
            },
            "remap": {
                "description": "Remap the operator's output to a specified range, defaulting to [0, 1].",
                "key": "remap",
                "label": "remap",
                "type": "Value range"
            },
            "talus_global": {
                "description": "Slope slope...",
                "key": "talus_global",
                "label": "talus_global",
                "type": "Float"
            }
        },
        "ports": {
            "control": {
                "caption": "control",
                "data_type": "Heightmap",
                "description": "Control parameter, acts as a multiplier for the weight parameter.",
                "type": "input"
            },
            "dx": {
                "caption": "dx",
                "data_type": "Heightmap",
                "description": "Displacement with respect to the domain size (x-direction).",
                "type": "input"
            },
            "dy": {
                "caption": "dy",
                "data_type": "Heightmap",
                "description": "Displacement with respect to the domain size (y-direction).",
                "type": "input"
            },
            "output": {
                "caption": "output",
                "data_type": "Heightmap",
                "description": "Slope heightmap.",
                "type": "output"
            }
        }
    },
    "SmoothCpulse": {
        "category": "Filter/Smoothing",
        "description": "Smoothing using a cubic pulse kernel can be considered somewhat similar to Gaussian smoothing. This technique is used to reduce noise and smooth data. The cubic pulse kernel has a cubic decrease in influence with distance within a finite interval. It is zero beyond a certain radius, providing a compact support that affects only nearby points.",
        "label": "SmoothCpulse",
        "parameters": {
            "mask_activate": {
                "description": "Enables or disables the internal mask. If the node's 'mask' input is connected, this setting is bypassed and the input mask is used instead.",
                "key": "mask_activate",
                "label": "mask_activate",
                "type": "Bool"
            },
            "mask_gain": {
                "description": "Controls the intensity or influence of the internal mask. Bypassed if the 'mask' input is connected.",
                "key": "mask_gain",
                "label": "mask_gain",
                "type": "Float"
            },
            "mask_inverse": {
                "description": "Inverts the internal mask, applying the operator where the mask is low. Ignored if a 'mask' input is provided.",
                "key": "mask_inverse",
                "label": "mask_inverse",
                "type": "Bool"
            },
            "mask_radius": {
                "description": "Defines the smoothing radius for the internal mask. A value of 0 disables smoothing. This is bypassed if the 'mask' input is used.",
                "key": "mask_radius",
                "label": "mask_radius",
                "type": "Float"
            },
            "mask_type": {
                "description": "Specifies how the internal mask is computed: 'Elevation' uses height, 'Gradient Norm' uses slope, and 'Elevation mid-range' selects the middle portion of the height range. This parameter is ignored when a 'mask' input is connected.",
                "key": "mask_type",
                "label": "mask_type",
                "type": "Choice"
            },
            "post_gain": {
                "description": "Set the gain. Gain is a power law transformation altering the distribution of signal values, compressing or expanding certain regions of the signal depending on the exponent of the power law.",
                "key": "post_gain",
                "label": "post_gain",
                "type": "Float"
            },
            "post_inverse": {
                "description": "Inverts the output values after processing, flipping low and high values across the midrange.",
                "key": "post_inverse",
                "label": "post_inverse",
                "type": "Bool"
            },
            "post_mix": {
                "description": "Mixing factor for blending input and output values. A value of 0 uses only the input, 1 uses only the output, and intermediate values perform a linear interpolation.",
                "key": "post_mix",
                "label": "post_mix",
                "type": "Float"
            },
            "post_mix_method": {
                "description": "Method used to combine input and output values. Options include linear interpolation (default), min, max, smooth min, smooth max, add, and subtract.",
                "key": "post_mix_method",
                "label": "post_mix_method",
                "type": "Enumeration"
            },
            "post_remap": {
                "description": "Linearly remaps the output values to a specified target range (default is [0, 1]).",
                "key": "post_remap",
                "label": "post_remap",
                "type": "Value range"
            },
            "post_smoothing_radius": {
                "description": "Defines the radius for post-processing smoothing, determining the size of the neighborhood used to average local values and reduce high-frequency detail. A radius of 0 disables smoothing.",
                "key": "post_smoothing_radius",
                "label": "post_smoothing_radius",
                "type": "Float"
            },
            "radius": {
                "description": "Filter radius with respect to the domain size.",
                "key": "radius",
                "label": "radius",
                "type": "Float"
            }
        },
        "ports": {
            "input": {
                "caption": "input",
                "data_type": "Heightmap",
                "description": "Input heightmap.",
                "type": "input"
            },
            "mask": {
                "caption": "mask",
                "data_type": "Heightmap",
                "description": "Mask defining the filtering intensity (expected in [0, 1]).",
                "type": "input"
            },
            "output": {
                "caption": "output",
                "data_type": "Heightmap",
                "description": "Filtered heightmap.",
                "type": "output"
            }
        }
    },
    "SmoothFill": {
        "category": "Filter/Smoothing",
        "description": "SmoothFill is a smoothing technique that takes the maximum between the input and the filtered field to simulate a sediment deposition effect.",
        "label": "SmoothFill",
        "parameters": {
            "k": {
                "description": "Smoothing intensity of the maximum operator.",
                "key": "k",
                "label": "k",
                "type": "Float"
            },
            "mask_activate": {
                "description": "Enables or disables the internal mask. If the node's 'mask' input is connected, this setting is bypassed and the input mask is used instead.",
                "key": "mask_activate",
                "label": "mask_activate",
                "type": "Bool"
            },
            "mask_gain": {
                "description": "Controls the intensity or influence of the internal mask. Bypassed if the 'mask' input is connected.",
                "key": "mask_gain",
                "label": "mask_gain",
                "type": "Float"
            },
            "mask_inverse": {
                "description": "Inverts the internal mask, applying the operator where the mask is low. Ignored if a 'mask' input is provided.",
                "key": "mask_inverse",
                "label": "mask_inverse",
                "type": "Bool"
            },
            "mask_radius": {
                "description": "Defines the smoothing radius for the internal mask. A value of 0 disables smoothing. This is bypassed if the 'mask' input is used.",
                "key": "mask_radius",
                "label": "mask_radius",
                "type": "Float"
            },
            "mask_type": {
                "description": "Specifies how the internal mask is computed: 'Elevation' uses height, 'Gradient Norm' uses slope, and 'Elevation mid-range' selects the middle portion of the height range. This parameter is ignored when a 'mask' input is connected.",
                "key": "mask_type",
                "label": "mask_type",
                "type": "Choice"
            },
            "normalized_map": {
                "description": "Decides if the deposition map is normalized.",
                "key": "normalized_map",
                "label": "normalized_map",
                "type": "Bool"
            },
            "post_gain": {
                "description": "Set the gain. Gain is a power law transformation altering the distribution of signal values, compressing or expanding certain regions of the signal depending on the exponent of the power law.",
                "key": "post_gain",
                "label": "post_gain",
                "type": "Float"
            },
            "post_inverse": {
                "description": "Inverts the output values after processing, flipping low and high values across the midrange.",
                "key": "post_inverse",
                "label": "post_inverse",
                "type": "Bool"
            },
            "post_mix": {
                "description": "Mixing factor for blending input and output values. A value of 0 uses only the input, 1 uses only the output, and intermediate values perform a linear interpolation.",
                "key": "post_mix",
                "label": "post_mix",
                "type": "Float"
            },
            "post_mix_method": {
                "description": "Method used to combine input and output values. Options include linear interpolation (default), min, max, smooth min, smooth max, add, and subtract.",
                "key": "post_mix_method",
                "label": "post_mix_method",
                "type": "Enumeration"
            },
            "post_remap": {
                "description": "Linearly remaps the output values to a specified target range (default is [0, 1]).",
                "key": "post_remap",
                "label": "post_remap",
                "type": "Value range"
            },
            "post_smoothing_radius": {
                "description": "Defines the radius for post-processing smoothing, determining the size of the neighborhood used to average local values and reduce high-frequency detail. A radius of 0 disables smoothing.",
                "key": "post_smoothing_radius",
                "label": "post_smoothing_radius",
                "type": "Float"
            },
            "radius": {
                "description": "Filter radius with respect to the domain size.",
                "key": "radius",
                "label": "radius",
                "type": "Float"
            }
        },
        "ports": {
            "deposition": {
                "caption": "deposition",
                "data_type": "Heightmap",
                "description": "Deposition map (in [0, 1]).",
                "type": "output"
            },
            "input": {
                "caption": "input",
                "data_type": "Heightmap",
                "description": "Input heightmap.",
                "type": "input"
            },
            "mask": {
                "caption": "mask",
                "data_type": "Heightmap",
                "description": "Mask defining the filtering intensity (expected in [0, 1]).",
                "type": "input"
            },
            "output": {
                "caption": "output",
                "data_type": "Heightmap",
                "description": "Filtered heightmap.",
                "type": "output"
            }
        }
    },
    "SmoothFillHoles": {
        "category": "Filter/Smoothing",
        "description": "SmoothFillHoles is a smoothing technique that restricts smoothing effect to convex regions.",
        "label": "SmoothFillHoles",
        "parameters": {
            "mask_activate": {
                "description": "Enables or disables the internal mask. If the node's 'mask' input is connected, this setting is bypassed and the input mask is used instead.",
                "key": "mask_activate",
                "label": "mask_activate",
                "type": "Bool"
            },
            "mask_gain": {
                "description": "Controls the intensity or influence of the internal mask. Bypassed if the 'mask' input is connected.",
                "key": "mask_gain",
                "label": "mask_gain",
                "type": "Float"
            },
            "mask_inverse": {
                "description": "Inverts the internal mask, applying the operator where the mask is low. Ignored if a 'mask' input is provided.",
                "key": "mask_inverse",
                "label": "mask_inverse",
                "type": "Bool"
            },
            "mask_radius": {
                "description": "Defines the smoothing radius for the internal mask. A value of 0 disables smoothing. This is bypassed if the 'mask' input is used.",
                "key": "mask_radius",
                "label": "mask_radius",
                "type": "Float"
            },
            "mask_type": {
                "description": "Specifies how the internal mask is computed: 'Elevation' uses height, 'Gradient Norm' uses slope, and 'Elevation mid-range' selects the middle portion of the height range. This parameter is ignored when a 'mask' input is connected.",
                "key": "mask_type",
                "label": "mask_type",
                "type": "Choice"
            },
            "post_gain": {
                "description": "Set the gain. Gain is a power law transformation altering the distribution of signal values, compressing or expanding certain regions of the signal depending on the exponent of the power law.",
                "key": "post_gain",
                "label": "post_gain",
                "type": "Float"
            },
            "post_inverse": {
                "description": "Inverts the output values after processing, flipping low and high values across the midrange.",
                "key": "post_inverse",
                "label": "post_inverse",
                "type": "Bool"
            },
            "post_mix": {
                "description": "Mixing factor for blending input and output values. A value of 0 uses only the input, 1 uses only the output, and intermediate values perform a linear interpolation.",
                "key": "post_mix",
                "label": "post_mix",
                "type": "Float"
            },
            "post_mix_method": {
                "description": "Method used to combine input and output values. Options include linear interpolation (default), min, max, smooth min, smooth max, add, and subtract.",
                "key": "post_mix_method",
                "label": "post_mix_method",
                "type": "Enumeration"
            },
            "post_remap": {
                "description": "Linearly remaps the output values to a specified target range (default is [0, 1]).",
                "key": "post_remap",
                "label": "post_remap",
                "type": "Value range"
            },
            "post_smoothing_radius": {
                "description": "Defines the radius for post-processing smoothing, determining the size of the neighborhood used to average local values and reduce high-frequency detail. A radius of 0 disables smoothing.",
                "key": "post_smoothing_radius",
                "label": "post_smoothing_radius",
                "type": "Float"
            },
            "radius": {
                "description": "Filter radius with respect to the domain size.",
                "key": "radius",
                "label": "radius",
                "type": "Float"
            }
        },
        "ports": {
            "input": {
                "caption": "input",
                "data_type": "Heightmap",
                "description": "Input heightmap.",
                "type": "input"
            },
            "mask": {
                "caption": "mask",
                "data_type": "Heightmap",
                "description": "Mask defining the filtering intensity (expected in [0, 1]).",
                "type": "input"
            },
            "output": {
                "caption": "output",
                "data_type": "Heightmap",
                "description": "Filtered heightmap.",
                "type": "output"
            }
        }
    },
    "SmoothFillSmearPeaks": {
        "category": "Filter/Smoothing",
        "description": "SmoothFillSmearPeaks is a smoothing technique that restricts smoothing effect to concave regions.",
        "label": "SmoothFillSmearPeaks",
        "parameters": {
            "mask_activate": {
                "description": "Enables or disables the internal mask. If the node's 'mask' input is connected, this setting is bypassed and the input mask is used instead.",
                "key": "mask_activate",
                "label": "mask_activate",
                "type": "Bool"
            },
            "mask_gain": {
                "description": "Controls the intensity or influence of the internal mask. Bypassed if the 'mask' input is connected.",
                "key": "mask_gain",
                "label": "mask_gain",
                "type": "Float"
            },
            "mask_inverse": {
                "description": "Inverts the internal mask, applying the operator where the mask is low. Ignored if a 'mask' input is provided.",
                "key": "mask_inverse",
                "label": "mask_inverse",
                "type": "Bool"
            },
            "mask_radius": {
                "description": "Defines the smoothing radius for the internal mask. A value of 0 disables smoothing. This is bypassed if the 'mask' input is used.",
                "key": "mask_radius",
                "label": "mask_radius",
                "type": "Float"
            },
            "mask_type": {
                "description": "Specifies how the internal mask is computed: 'Elevation' uses height, 'Gradient Norm' uses slope, and 'Elevation mid-range' selects the middle portion of the height range. This parameter is ignored when a 'mask' input is connected.",
                "key": "mask_type",
                "label": "mask_type",
                "type": "Choice"
            },
            "post_gain": {
                "description": "Set the gain. Gain is a power law transformation altering the distribution of signal values, compressing or expanding certain regions of the signal depending on the exponent of the power law.",
                "key": "post_gain",
                "label": "post_gain",
                "type": "Float"
            },
            "post_inverse": {
                "description": "Inverts the output values after processing, flipping low and high values across the midrange.",
                "key": "post_inverse",
                "label": "post_inverse",
                "type": "Bool"
            },
            "post_mix": {
                "description": "Mixing factor for blending input and output values. A value of 0 uses only the input, 1 uses only the output, and intermediate values perform a linear interpolation.",
                "key": "post_mix",
                "label": "post_mix",
                "type": "Float"
            },
            "post_mix_method": {
                "description": "Method used to combine input and output values. Options include linear interpolation (default), min, max, smooth min, smooth max, add, and subtract.",
                "key": "post_mix_method",
                "label": "post_mix_method",
                "type": "Enumeration"
            },
            "post_remap": {
                "description": "Linearly remaps the output values to a specified target range (default is [0, 1]).",
                "key": "post_remap",
                "label": "post_remap",
                "type": "Value range"
            },
            "post_smoothing_radius": {
                "description": "Defines the radius for post-processing smoothing, determining the size of the neighborhood used to average local values and reduce high-frequency detail. A radius of 0 disables smoothing.",
                "key": "post_smoothing_radius",
                "label": "post_smoothing_radius",
                "type": "Float"
            },
            "radius": {
                "description": "Filter radius with respect to the domain size.",
                "key": "radius",
                "label": "radius",
                "type": "Float"
            }
        },
        "ports": {
            "input": {
                "caption": "input",
                "data_type": "Heightmap",
                "description": "Input heightmap.",
                "type": "input"
            },
            "mask": {
                "caption": "mask",
                "data_type": "Heightmap",
                "description": "Mask defining the filtering intensity (expected in [0, 1]).",
                "type": "input"
            },
            "output": {
                "caption": "output",
                "data_type": "Heightmap",
                "description": "Filtered heightmap.",
                "type": "output"
            }
        }
    },
    "Smoothstep": {
        "category": "Math/Base",
        "description": "Applies a smoothstep function to the input heightmap, creating a smooth transition between values.",
        "label": "Smoothstep",
        "parameters": {
            "order": {
                "description": "The order of the smoothstep function, determining the smoothness of the transition.",
                "key": "order",
                "label": "order",
                "type": "Choice"
            }
        },
        "ports": {
            "input": {
                "caption": "input",
                "data_type": "Heightmap",
                "description": "Input heightmap.",
                "type": "input"
            },
            "output": {
                "caption": "output",
                "data_type": "Heightmap",
                "description": "Output heightmap with the smoothstep function applied.",
                "type": "output"
            }
        }
    },
    "Stamping": {
        "category": "Primitive/Coherent",
        "description": "Stamping .",
        "label": "Stamping",
        "parameters": {
            "blend_method": {
                "description": "Blending method. Available values: add, maximum, minimum, multiply, substract.",
                "key": "blend_method",
                "label": "blend_method",
                "type": "Enumeration"
            },
            "inverse": {
                "description": "Toggle inversion of the output values.",
                "key": "inverse",
                "label": "inverse",
                "type": "Bool"
            },
            "k_smoothing": {
                "description": "Smoothing parameter (if any).",
                "key": "k_smoothing",
                "label": "k_smoothing",
                "type": "Float"
            },
            "kernel_flip": {
                "description": "Randomly flip, or not, the kernel before stamping (includes tranposing).",
                "key": "kernel_flip",
                "label": "kernel_flip",
                "type": "Bool"
            },
            "kernel_radius": {
                "description": "Kernel base radius, with respect a unit square domain.",
                "key": "kernel_radius",
                "label": "kernel_radius",
                "type": "Float"
            },
            "kernel_rotate": {
                "description": "Randomly rotate, or not, the kernel before stamping (can be any rotation angle, can also be ressource consuming).",
                "key": "kernel_rotate",
                "label": "kernel_rotate",
                "type": "Bool"
            },
            "kernel_scale_amplitude": {
                "description": "Determine whether the kernel amplitude is scaled with the point values.",
                "key": "kernel_scale_amplitude",
                "label": "kernel_scale_amplitude",
                "type": "Bool"
            },
            "kernel_scale_radius": {
                "description": "Determine whether the kernel radius is scaled with the point values.",
                "key": "kernel_scale_radius",
                "label": "kernel_scale_radius",
                "type": "Bool"
            },
            "remap": {
                "description": "Remap the operator's output to a specified range, defaulting to [0, 1].",
                "key": "remap",
                "label": "remap",
                "type": "Value range"
            },
            "seed": {
                "description": "Random seed number.",
                "key": "seed",
                "label": "seed",
                "type": "Random seed number"
            }
        },
        "ports": {
            "cloud": {
                "caption": "cloud",
                "data_type": "Cloud",
                "description": "Stamping locations and intensities (as a Cloud).",
                "type": "input"
            },
            "kernel": {
                "caption": "kernel",
                "data_type": "Array",
                "description": "Kernel to be stamped.",
                "type": "input"
            },
            "output": {
                "caption": "output",
                "data_type": "Heightmap",
                "description": "Output heightmap.",
                "type": "output"
            }
        }
    },
    "StdLocal": {
        "category": "Features",
        "description": "No description available",
        "label": "StdLocal",
        "parameters": {
            "post_gain": {
                "description": "Set the gain. Gain is a power law transformation altering the distribution of signal values, compressing or expanding certain regions of the signal depending on the exponent of the power law.",
                "key": "post_gain",
                "label": "post_gain",
                "type": "Float"
            },
            "post_inverse": {
                "description": "Inverts the output values after processing, flipping low and high values across the midrange.",
                "key": "post_inverse",
                "label": "post_inverse",
                "type": "Bool"
            },
            "post_remap": {
                "description": "Linearly remaps the output values to a specified target range (default is [0, 1]).",
                "key": "post_remap",
                "label": "post_remap",
                "type": "Value range"
            },
            "post_smoothing_radius": {
                "description": "Defines the radius for post-processing smoothing, determining the size of the neighborhood used to average local values and reduce high-frequency detail. A radius of 0 disables smoothing.",
                "key": "post_smoothing_radius",
                "label": "post_smoothing_radius",
                "type": "Float"
            },
            "radius": {
                "description": "No description",
                "key": "radius",
                "label": "radius",
                "type": "Float"
            }
        },
        "ports": {
            "input": {
                "caption": "input",
                "data_type": "Heightmap",
                "description": "No description",
                "type": "input"
            },
            "output": {
                "caption": "output",
                "data_type": "Heightmap",
                "description": "No description",
                "type": "output"
            }
        }
    },
    "SteepenConvective": {
        "category": "Filter/Recast",
        "description": "TODO",
        "label": "SteepenConvective",
        "parameters": {
            "angle": {
                "description": "TODO",
                "key": "angle",
                "label": "angle",
                "type": "Float"
            },
            "dt": {
                "description": "TODO",
                "key": "dt",
                "label": "dt",
                "type": "Float"
            },
            "iterations": {
                "description": "TODO",
                "key": "iterations",
                "label": "iterations",
                "type": "Integer"
            },
            "radius": {
                "description": "TODO",
                "key": "radius",
                "label": "radius",
                "type": "Float"
            }
        },
        "ports": {
            "input": {
                "caption": "input",
                "data_type": "Heightmap",
                "description": "TODO",
                "type": "input"
            },
            "mask": {
                "caption": "mask",
                "data_type": "Heightmap",
                "description": "Mask defining the filtering intensity (expected in [0, 1]).",
                "type": "input"
            },
            "output": {
                "caption": "output",
                "data_type": "Heightmap",
                "description": "TODO",
                "type": "output"
            }
        }
    },
    "Step": {
        "category": "Primitive/Function",
        "description": "Step is function used to represent a conceptualized escarpment, it serves as a tool for creating sharp, distinct changes in elevation.",
        "label": "Step",
        "parameters": {
            "angle": {
                "description": "Angle.",
                "key": "angle",
                "label": "angle",
                "type": "Float"
            },
            "center": {
                "description": "Reference center within the heightmap.",
                "key": "center",
                "label": "center",
                "type": "Vec2Float"
            },
            "post_gain": {
                "description": "No description",
                "key": "post_gain",
                "label": "post_gain",
                "type": "Float"
            },
            "post_inverse": {
                "description": "No description",
                "key": "post_inverse",
                "label": "post_inverse",
                "type": "Bool"
            },
            "post_remap": {
                "description": "No description",
                "key": "post_remap",
                "label": "post_remap",
                "type": "Value range"
            },
            "post_smoothing_radius": {
                "description": "No description",
                "key": "post_smoothing_radius",
                "label": "post_smoothing_radius",
                "type": "Float"
            },
            "slope": {
                "description": "Step slope.",
                "key": "slope",
                "label": "slope",
                "type": "Float"
            }
        },
        "ports": {
            "control": {
                "caption": "control",
                "data_type": "Heightmap",
                "description": "Control parameter, acts as a multiplier for the weight parameter.",
                "type": "input"
            },
            "dx": {
                "caption": "dx",
                "data_type": "Heightmap",
                "description": "Displacement with respect to the domain size (x-direction).",
                "type": "input"
            },
            "dy": {
                "caption": "dy",
                "data_type": "Heightmap",
                "description": "Displacement with respect to the domain size (y-direction).",
                "type": "input"
            },
            "envelope": {
                "caption": "envelope",
                "data_type": "Heightmap",
                "description": "No description",
                "type": "input"
            },
            "output": {
                "caption": "output",
                "data_type": "Heightmap",
                "description": "Step heightmap.",
                "type": "output"
            }
        }
    },
    "Strata": {
        "category": "Erosion/Stratify",
        "description": "No description available",
        "label": "Strata",
        "parameters": {
            "angle": {
                "description": "No description",
                "key": "angle",
                "label": "angle",
                "type": "Float"
            },
            "apply_elevation_mask": {
                "description": "No description",
                "key": "apply_elevation_mask",
                "label": "apply_elevation_mask",
                "type": "Bool"
            },
            "apply_ridge_mask": {
                "description": "No description",
                "key": "apply_ridge_mask",
                "label": "apply_ridge_mask",
                "type": "Bool"
            },
            "gamma": {
                "description": "No description",
                "key": "gamma",
                "label": "gamma",
                "type": "Float"
            },
            "gamma_noise_ratio": {
                "description": "No description",
                "key": "gamma_noise_ratio",
                "label": "gamma_noise_ratio",
                "type": "Float"
            },
            "kz": {
                "description": "No description",
                "key": "kz",
                "label": "kz",
                "type": "Float"
            },
            "lacunarity": {
                "description": "No description",
                "key": "lacunarity",
                "label": "lacunarity",
                "type": "Float"
            },
            "linear_gamma": {
                "description": "No description",
                "key": "linear_gamma",
                "label": "linear_gamma",
                "type": "Bool"
            },
            "mask_activate": {
                "description": "No description",
                "key": "mask_activate",
                "label": "mask_activate",
                "type": "Bool"
            },
            "mask_gain": {
                "description": "No description",
                "key": "mask_gain",
                "label": "mask_gain",
                "type": "Float"
            },
            "mask_gamma": {
                "description": "No description",
                "key": "mask_gamma",
                "label": "mask_gamma",
                "type": "Float"
            },
            "mask_inverse": {
                "description": "No description",
                "key": "mask_inverse",
                "label": "mask_inverse",
                "type": "Bool"
            },
            "mask_radius": {
                "description": "No description",
                "key": "mask_radius",
                "label": "mask_radius",
                "type": "Float"
            },
            "mask_type": {
                "description": "No description",
                "key": "mask_type",
                "label": "mask_type",
                "type": "Choice"
            },
            "noise_amp": {
                "description": "No description",
                "key": "noise_amp",
                "label": "noise_amp",
                "type": "Float"
            },
            "noise_kw": {
                "description": "No description",
                "key": "noise_kw",
                "label": "noise_kw",
                "type": "Wavenumber"
            },
            "octaves": {
                "description": "No description",
                "key": "octaves",
                "label": "octaves",
                "type": "Integer"
            },
            "post_gain": {
                "description": "No description",
                "key": "post_gain",
                "label": "post_gain",
                "type": "Float"
            },
            "post_inverse": {
                "description": "No description",
                "key": "post_inverse",
                "label": "post_inverse",
                "type": "Bool"
            },
            "post_mix": {
                "description": "No description",
                "key": "post_mix",
                "label": "post_mix",
                "type": "Float"
            },
            "post_mix_method": {
                "description": "No description",
                "key": "post_mix_method",
                "label": "post_mix_method",
                "type": "Enumeration"
            },
            "post_remap": {
                "description": "No description",
                "key": "post_remap",
                "label": "post_remap",
                "type": "Value range"
            },
            "post_smoothing_radius": {
                "description": "No description",
                "key": "post_smoothing_radius",
                "label": "post_smoothing_radius",
                "type": "Float"
            },
            "ridge_angle_shift": {
                "description": "No description",
                "key": "ridge_angle_shift",
                "label": "ridge_angle_shift",
                "type": "Float"
            },
            "ridge_clamp_vmin": {
                "description": "No description",
                "key": "ridge_clamp_vmin",
                "label": "ridge_clamp_vmin",
                "type": "Float"
            },
            "ridge_noise_amp": {
                "description": "No description",
                "key": "ridge_noise_amp",
                "label": "ridge_noise_amp",
                "type": "Float"
            },
            "ridge_noise_kw": {
                "description": "No description",
                "key": "ridge_noise_kw",
                "label": "ridge_noise_kw",
                "type": "Wavenumber"
            },
            "ridge_remap_vmin": {
                "description": "No description",
                "key": "ridge_remap_vmin",
                "label": "ridge_remap_vmin",
                "type": "Float"
            },
            "seed": {
                "description": "No description",
                "key": "seed",
                "label": "seed",
                "type": "Random seed number"
            },
            "slope": {
                "description": "No description",
                "key": "slope",
                "label": "slope",
                "type": "Float"
            }
        },
        "ports": {
            "input": {
                "caption": "input",
                "data_type": "Heightmap",
                "description": "No description",
                "type": "input"
            },
            "mask": {
                "caption": "mask",
                "data_type": "Heightmap",
                "description": "No description",
                "type": "input"
            },
            "output": {
                "caption": "output",
                "data_type": "Heightmap",
                "description": "No description",
                "type": "output"
            }
        }
    },
    "Stratify": {
        "category": "Erosion/Stratify",
        "description": "Stratify adds horizontal stratifications to the input heightmap.",
        "label": "Stratify",
        "parameters": {
            "gamma": {
                "description": "Reference value for the gamma correction applied to each strata, influence the cliff elevation profile.",
                "key": "gamma",
                "label": "gamma",
                "type": "Float"
            },
            "gamma_noise": {
                "description": "Noise range for the gamma value.",
                "key": "gamma_noise",
                "label": "gamma_noise",
                "type": "Float"
            },
            "n_strata": {
                "description": "Numbner of strata.",
                "key": "n_strata",
                "label": "n_strata",
                "type": "Integer"
            },
            "seed": {
                "description": "Random seed number.",
                "key": "seed",
                "label": "seed",
                "type": "Random seed number"
            },
            "strata_noise": {
                "description": "Noise range for the strata elevations.",
                "key": "strata_noise",
                "label": "strata_noise",
                "type": "Float"
            }
        },
        "ports": {
            "input": {
                "caption": "input",
                "data_type": "Heightmap",
                "description": "Input heightmap.",
                "type": "input"
            },
            "mask": {
                "caption": "mask",
                "data_type": "Heightmap",
                "description": "Mask defining the filtering intensity (expected in [0, 1]).",
                "type": "input"
            },
            "noise": {
                "caption": "noise",
                "data_type": "Heightmap",
                "description": "Local elevation noise, value range expected to be scaled with the one of the input heightmap.",
                "type": "input"
            },
            "output": {
                "caption": "output",
                "data_type": "Heightmap",
                "description": "Eroded heightmap.",
                "type": "output"
            }
        }
    },
    "StratifyMultiscale": {
        "category": "Erosion/Stratify",
        "description": "TODO",
        "label": "StratifyMultiscale",
        "parameters": {
            "gamma_list": {
                "description": "TODO",
                "key": "gamma_list",
                "label": "gamma_list",
                "type": "Vector of floats"
            },
            "gamma_noise": {
                "description": "TODO",
                "key": "gamma_noise",
                "label": "gamma_noise",
                "type": "Vector of floats"
            },
            "n_strata": {
                "description": "TODO",
                "key": "n_strata",
                "label": "n_strata",
                "type": "Vector of integers"
            },
            "seed": {
                "description": "TODO",
                "key": "seed",
                "label": "seed",
                "type": "Random seed number"
            },
            "strata_noise": {
                "description": "TODO",
                "key": "strata_noise",
                "label": "strata_noise",
                "type": "Vector of floats"
            }
        },
        "ports": {
            "input": {
                "caption": "input",
                "data_type": "Heightmap",
                "description": "TODO",
                "type": "input"
            },
            "mask": {
                "caption": "mask",
                "data_type": "Heightmap",
                "description": "Mask defining the filtering intensity (expected in [0, 1]).",
                "type": "input"
            },
            "noise": {
                "caption": "noise",
                "data_type": "Heightmap",
                "description": "TODO",
                "type": "input"
            },
            "output": {
                "caption": "output",
                "data_type": "Heightmap",
                "description": "TODO",
                "type": "output"
            }
        }
    },
    "StratifyOblique": {
        "category": "Erosion/Stratify",
        "description": "StratifyOblique adds oblique stratifications to the input heightmap.",
        "label": "StratifyOblique",
        "parameters": {
            "angle": {
                "description": "Angle in the horizontal plane.",
                "key": "angle",
                "label": "angle",
                "type": "Float"
            },
            "gamma": {
                "description": "Reference value for the gamma correction applied to each strata, influence the cliff elevation profile.",
                "key": "gamma",
                "label": "gamma",
                "type": "Float"
            },
            "gamma_noise": {
                "description": "Noise range for the gamma value.",
                "key": "gamma_noise",
                "label": "gamma_noise",
                "type": "Float"
            },
            "n_strata": {
                "description": "Numbner of strata.",
                "key": "n_strata",
                "label": "n_strata",
                "type": "Integer"
            },
            "seed": {
                "description": "Random seed number.",
                "key": "seed",
                "label": "seed",
                "type": "Random seed number"
            },
            "strata_noise": {
                "description": "Noise range for the strata elevations.",
                "key": "strata_noise",
                "label": "strata_noise",
                "type": "Float"
            },
            "talus_global": {
                "description": "Step slope.",
                "key": "talus_global",
                "label": "talus_global",
                "type": "Float"
            }
        },
        "ports": {
            "input": {
                "caption": "input",
                "data_type": "Heightmap",
                "description": "Input heightmap.",
                "type": "input"
            },
            "mask": {
                "caption": "mask",
                "data_type": "Heightmap",
                "description": "Mask defining the filtering intensity (expected in [0, 1]).",
                "type": "input"
            },
            "noise": {
                "caption": "noise",
                "data_type": "Heightmap",
                "description": "Local elevation noise, value range expected to be scaled with the one of the input heightmap.",
                "type": "input"
            },
            "output": {
                "caption": "output",
                "data_type": "Heightmap",
                "description": "Eroded heightmap.",
                "type": "output"
            }
        }
    },
    "Terrace": {
        "category": "Filter/Recurve",
        "description": "Applies a terracing effect to the input heightmap by quantizing elevation levels into discrete steps, optionally modulated by noise.",
        "label": "Terrace",
        "parameters": {
            "gain": {
                "description": "Controls the amplification of the terrace steps; higher values create steeper transitions between levels.",
                "key": "gain",
                "label": "gain",
                "type": "Float"
            },
            "mask_activate": {
                "description": "Enables or disables the internal mask. If the node's 'mask' input is connected, this setting is bypassed and the input mask is used instead.",
                "key": "mask_activate",
                "label": "mask_activate",
                "type": "Bool"
            },
            "mask_gain": {
                "description": "Controls the intensity or influence of the internal mask. Bypassed if the 'mask' input is connected.",
                "key": "mask_gain",
                "label": "mask_gain",
                "type": "Float"
            },
            "mask_inverse": {
                "description": "Inverts the internal mask, applying the operator where the mask is low. Ignored if a 'mask' input is provided.",
                "key": "mask_inverse",
                "label": "mask_inverse",
                "type": "Bool"
            },
            "mask_radius": {
                "description": "Defines the smoothing radius for the internal mask. A value of 0 disables smoothing. This is bypassed if the 'mask' input is used.",
                "key": "mask_radius",
                "label": "mask_radius",
                "type": "Float"
            },
            "mask_type": {
                "description": "Specifies how the internal mask is computed: 'Elevation' uses height, 'Gradient Norm' uses slope, and 'Elevation mid-range' selects the middle portion of the height range. This parameter is ignored when a 'mask' input is connected.",
                "key": "mask_type",
                "label": "mask_type",
                "type": "Choice"
            },
            "nlevels": {
                "description": "Number of discrete elevation steps (terraces) to apply to the input heightmap.",
                "key": "nlevels",
                "label": "nlevels",
                "type": "Integer"
            },
            "noise_ratio": {
                "description": "Ratio between deterministic and noisy placement of terrace levels; 0 uses only uniform levels, 1 uses full noise-based variation.",
                "key": "noise_ratio",
                "label": "noise_ratio",
                "type": "Float"
            },
            "seed": {
                "description": "Random seed used for generating noise when noise_ratio > 0.",
                "key": "seed",
                "label": "seed",
                "type": "Random seed number"
            }
        },
        "ports": {
            "input": {
                "caption": "input",
                "data_type": "Heightmap",
                "description": "The input heightmap to be transformed with terrace steps.",
                "type": "input"
            },
            "mask": {
                "caption": "mask",
                "data_type": "Heightmap",
                "description": "Mask defining the filtering intensity (expected in [0, 1]).",
                "type": "input"
            },
            "noise": {
                "caption": "noise",
                "data_type": "Heightmap",
                "description": "Optional noise map used to perturb the position of the terrace levels for a more natural look.",
                "type": "input"
            },
            "output": {
                "caption": "output",
                "data_type": "Heightmap",
                "description": "Resulting heightmap after applying the terracing effect.",
                "type": "output"
            }
        }
    },
    "TextureQuiltingExpand": {
        "category": "Texture",
        "description": "TODO",
        "label": "TextureQuiltingExpand",
        "parameters": {
            "expansion_ratio": {
                "description": "TODO",
                "key": "expansion_ratio",
                "label": "expansion_ratio",
                "type": "Float"
            },
            "filter_width_ratio": {
                "description": "TODO",
                "key": "filter_width_ratio",
                "label": "filter_width_ratio",
                "type": "Float"
            },
            "overlap": {
                "description": "TODO",
                "key": "overlap",
                "label": "overlap",
                "type": "Float"
            },
            "patch_flip": {
                "description": "TODO",
                "key": "patch_flip",
                "label": "patch_flip",
                "type": "Bool"
            },
            "patch_rotate": {
                "description": "TODO",
                "key": "patch_rotate",
                "label": "patch_rotate",
                "type": "Bool"
            },
            "patch_transpose": {
                "description": "TODO",
                "key": "patch_transpose",
                "label": "patch_transpose",
                "type": "Bool"
            },
            "patch_width": {
                "description": "TODO",
                "key": "patch_width",
                "label": "patch_width",
                "type": "Float"
            },
            "seed": {
                "description": "TODO",
                "key": "seed",
                "label": "seed",
                "type": "Random seed number"
            }
        },
        "ports": {
            "heightmap": {
                "caption": "heightmap",
                "data_type": "Heightmap",
                "description": "TODO",
                "type": "output"
            },
            "heightmap (guide)": {
                "caption": "heightmap (guide)",
                "data_type": "Heightmap",
                "description": "TODO",
                "type": "input"
            },
            "texture": {
                "caption": "texture",
                "data_type": "HeightmapRGBA",
                "description": "TODO",
                "type": "output"
            },
            "texture (guide)": {
                "caption": "texture (guide)",
                "data_type": "HeightmapRGBA",
                "description": "TODO",
                "type": "input"
            },
            "texture A": {
                "caption": "texture A",
                "data_type": "HeightmapRGBA",
                "description": "TODO",
                "type": "input"
            },
            "texture A out": {
                "caption": "texture A out",
                "data_type": "HeightmapRGBA",
                "description": "TODO",
                "type": "output"
            },
            "texture B": {
                "caption": "texture B",
                "data_type": "HeightmapRGBA",
                "description": "TODO",
                "type": "input"
            },
            "texture B out": {
                "caption": "texture B out",
                "data_type": "HeightmapRGBA",
                "description": "TODO",
                "type": "output"
            },
            "texture C": {
                "caption": "texture C",
                "data_type": "HeightmapRGBA",
                "description": "TODO",
                "type": "input"
            },
            "texture C out": {
                "caption": "texture C out",
                "data_type": "HeightmapRGBA",
                "description": "TODO",
                "type": "output"
            },
            "texture D": {
                "caption": "texture D",
                "data_type": "HeightmapRGBA",
                "description": "TODO",
                "type": "input"
            },
            "texture D out": {
                "caption": "texture D out",
                "data_type": "HeightmapRGBA",
                "description": "TODO",
                "type": "output"
            }
        }
    },
    "TextureQuiltingShuffle": {
        "category": "Texture",
        "description": "TODO",
        "label": "TextureQuiltingShuffle",
        "parameters": {
            "filter_width_ratio": {
                "description": "TODO",
                "key": "filter_width_ratio",
                "label": "filter_width_ratio",
                "type": "Float"
            },
            "overlap": {
                "description": "TODO",
                "key": "overlap",
                "label": "overlap",
                "type": "Float"
            },
            "patch_flip": {
                "description": "TODO",
                "key": "patch_flip",
                "label": "patch_flip",
                "type": "Bool"
            },
            "patch_rotate": {
                "description": "TODO",
                "key": "patch_rotate",
                "label": "patch_rotate",
                "type": "Bool"
            },
            "patch_transpose": {
                "description": "TODO",
                "key": "patch_transpose",
                "label": "patch_transpose",
                "type": "Bool"
            },
            "patch_width": {
                "description": "TODO",
                "key": "patch_width",
                "label": "patch_width",
                "type": "Float"
            },
            "seed": {
                "description": "TODO",
                "key": "seed",
                "label": "seed",
                "type": "Random seed number"
            }
        },
        "ports": {
            "heightmap": {
                "caption": "heightmap",
                "data_type": "Heightmap",
                "description": "TODO",
                "type": "output"
            },
            "heightmap (guide)": {
                "caption": "heightmap (guide)",
                "data_type": "Heightmap",
                "description": "TODO",
                "type": "input"
            },
            "texture": {
                "caption": "texture",
                "data_type": "HeightmapRGBA",
                "description": "TODO",
                "type": "output"
            },
            "texture (guide)": {
                "caption": "texture (guide)",
                "data_type": "HeightmapRGBA",
                "description": "TODO",
                "type": "input"
            },
            "texture A": {
                "caption": "texture A",
                "data_type": "HeightmapRGBA",
                "description": "TODO",
                "type": "input"
            },
            "texture A out": {
                "caption": "texture A out",
                "data_type": "HeightmapRGBA",
                "description": "TODO",
                "type": "output"
            },
            "texture B": {
                "caption": "texture B",
                "data_type": "HeightmapRGBA",
                "description": "TODO",
                "type": "input"
            },
            "texture B out": {
                "caption": "texture B out",
                "data_type": "HeightmapRGBA",
                "description": "TODO",
                "type": "output"
            },
            "texture C": {
                "caption": "texture C",
                "data_type": "HeightmapRGBA",
                "description": "TODO",
                "type": "input"
            },
            "texture C out": {
                "caption": "texture C out",
                "data_type": "HeightmapRGBA",
                "description": "TODO",
                "type": "output"
            },
            "texture D": {
                "caption": "texture D",
                "data_type": "HeightmapRGBA",
                "description": "TODO",
                "type": "input"
            },
            "texture D out": {
                "caption": "texture D out",
                "data_type": "HeightmapRGBA",
                "description": "TODO",
                "type": "output"
            }
        }
    },
    "TextureSplitChannels": {
        "category": "Texture",
        "description": "No description available",
        "label": "TextureSplitChannels",
        "parameters": null,
        "ports": {
            "A": {
                "caption": "A",
                "data_type": "Heightmap",
                "description": "No description",
                "type": "output"
            },
            "B": {
                "caption": "B",
                "data_type": "Heightmap",
                "description": "No description",
                "type": "output"
            },
            "G": {
                "caption": "G",
                "data_type": "Heightmap",
                "description": "No description",
                "type": "output"
            },
            "R": {
                "caption": "R",
                "data_type": "Heightmap",
                "description": "No description",
                "type": "output"
            },
            "texture": {
                "caption": "texture",
                "data_type": "HeightmapRGBA",
                "description": "No description",
                "type": "input"
            }
        }
    },
    "TextureToHeightmap": {
        "category": "Texture",
        "description": "No description available",
        "label": "TextureToHeightmap",
        "parameters": {
            "post_gain": {
                "description": "No description",
                "key": "post_gain",
                "label": "post_gain",
                "type": "Float"
            },
            "post_inverse": {
                "description": "No description",
                "key": "post_inverse",
                "label": "post_inverse",
                "type": "Bool"
            },
            "post_remap": {
                "description": "No description",
                "key": "post_remap",
                "label": "post_remap",
                "type": "Value range"
            },
            "post_smoothing_radius": {
                "description": "No description",
                "key": "post_smoothing_radius",
                "label": "post_smoothing_radius",
                "type": "Float"
            }
        },
        "ports": {
            "elevation": {
                "caption": "elevation",
                "data_type": "Heightmap",
                "description": "No description",
                "type": "output"
            },
            "texture": {
                "caption": "texture",
                "data_type": "HeightmapRGBA",
                "description": "No description",
                "type": "input"
            }
        }
    },
    "TextureUvChecker": {
        "category": "Texture",
        "description": "TODO",
        "label": "TextureUvChecker",
        "parameters": {
            "size": {
                "description": "TODO",
                "key": "size",
                "label": "size",
                "type": "Choice"
            }
        },
        "ports": {
            "texture": {
                "caption": "texture",
                "data_type": "HeightmapRGBA",
                "description": "TODO",
                "type": "output"
            }
        }
    },
    "Thermal": {
        "category": "Erosion/Thermal",
        "description": "Thermal is an erosion operator used to simulate the process of thermal erosion, which is a type of erosion that occurs due to temperature fluctuations causing the breakdown and movement of soil and rock materials.",
        "label": "Thermal",
        "parameters": {
            "GPU": {
                "description": "Toogle GPU acceleration on or off.",
                "key": "GPU",
                "label": "GPU",
                "type": "Bool"
            },
            "iterations": {
                "description": "Number of iterations.",
                "key": "iterations",
                "label": "iterations",
                "type": "Integer"
            },
            "scale_talus_with_elevation": {
                "description": "Scales the talus amplitude based on heightmap elevation, reducing it at lower elevations and maintaining the nominal value at higher elevations.",
                "key": "scale_talus_with_elevation",
                "label": "scale_talus_with_elevation",
                "type": "Bool"
            },
            "talus_global": {
                "description": "Repose slope.",
                "key": "talus_global",
                "label": "talus_global",
                "type": "Float"
            }
        },
        "ports": {
            "deposition": {
                "caption": "deposition",
                "data_type": "Heightmap",
                "description": "Deposition map (in [0, 1]).",
                "type": "output"
            },
            "input": {
                "caption": "input",
                "data_type": "Heightmap",
                "description": "Input heightmap.",
                "type": "input"
            },
            "mask": {
                "caption": "mask",
                "data_type": "Heightmap",
                "description": "Mask defining the filtering intensity (expected in [0, 1]).",
                "type": "input"
            },
            "output": {
                "caption": "output",
                "data_type": "Heightmap",
                "description": "Eroded heightmap.",
                "type": "output"
            }
        }
    },
    "ThermalAutoBedrock": {
        "category": "Erosion/Thermal",
        "description": "TODO",
        "label": "ThermalAutoBedrock",
        "parameters": {
            "GPU": {
                "description": "Toogle GPU acceleration on or off.",
                "key": "GPU",
                "label": "GPU",
                "type": "Bool"
            },
            "iterations": {
                "description": "TODO",
                "key": "iterations",
                "label": "iterations",
                "type": "Integer"
            },
            "scale_talus_with_elevation": {
                "description": "Scales the talus amplitude based on heightmap elevation, reducing it at lower elevations and maintaining the nominal value at higher elevations.",
                "key": "scale_talus_with_elevation",
                "label": "scale_talus_with_elevation",
                "type": "Bool"
            },
            "talus_global": {
                "description": "TODO",
                "key": "talus_global",
                "label": "talus_global",
                "type": "Float"
            }
        },
        "ports": {
            "deposition": {
                "caption": "deposition",
                "data_type": "Heightmap",
                "description": "Deposition map (in [0, 1]).",
                "type": "output"
            },
            "input": {
                "caption": "input",
                "data_type": "Heightmap",
                "description": "TODO",
                "type": "input"
            },
            "mask": {
                "caption": "mask",
                "data_type": "Heightmap",
                "description": "Mask defining the filtering intensity (expected in [0, 1]).",
                "type": "input"
            },
            "output": {
                "caption": "output",
                "data_type": "Heightmap",
                "description": "TODO",
                "type": "output"
            }
        }
    },
    "ThermalFlatten": {
        "category": "WIP",
        "description": "TODO",
        "label": "ThermalFlatten",
        "parameters": {
            "iterations": {
                "description": "TODO",
                "key": "iterations",
                "label": "iterations",
                "type": "Integer"
            },
            "post_filter_radius": {
                "description": "TODO",
                "key": "post_filter_radius",
                "label": "post_filter_radius",
                "type": "Float"
            },
            "scale_talus_with_elevation": {
                "description": "Scales the talus amplitude based on heightmap elevation, reducing it at lower elevations and maintaining the nominal value at higher elevations.",
                "key": "scale_talus_with_elevation",
                "label": "scale_talus_with_elevation",
                "type": "Bool"
            },
            "talus_global": {
                "description": "TODO",
                "key": "talus_global",
                "label": "talus_global",
                "type": "Float"
            }
        },
        "ports": {
            "input": {
                "caption": "input",
                "data_type": "Heightmap",
                "description": "TODO",
                "type": "input"
            },
            "output": {
                "caption": "output",
                "data_type": "Heightmap",
                "description": "TODO",
                "type": "output"
            }
        }
    },
    "ThermalInflate": {
        "category": "Erosion/Thermal",
        "description": "TODO",
        "label": "ThermalInflate",
        "parameters": {
            "iterations": {
                "description": "TODO",
                "key": "iterations",
                "label": "iterations",
                "type": "Integer"
            },
            "scale_talus_with_elevation": {
                "description": "Scales the talus amplitude based on heightmap elevation, reducing it at lower elevations and maintaining the nominal value at higher elevations.",
                "key": "scale_talus_with_elevation",
                "label": "scale_talus_with_elevation",
                "type": "Bool"
            },
            "talus_global": {
                "description": "TODO",
                "key": "talus_global",
                "label": "talus_global",
                "type": "Float"
            }
        },
        "ports": {
            "input": {
                "caption": "input",
                "data_type": "Heightmap",
                "description": "TODO",
                "type": "input"
            },
            "mask": {
                "caption": "mask",
                "data_type": "Heightmap",
                "description": "Mask defining the filtering intensity (expected in [0, 1]).",
                "type": "input"
            },
            "output": {
                "caption": "output",
                "data_type": "Heightmap",
                "description": "TODO",
                "type": "output"
            }
        }
    },
    "ThermalRib": {
        "category": "WIP",
        "description": "ThermalRib performs thermal erosion using a 'rib' algorithm (taken from Geomorph)",
        "label": "ThermalRib",
        "parameters": {
            "iterations": {
                "description": "Number of iterations.",
                "key": "iterations",
                "label": "iterations",
                "type": "Integer"
            }
        },
        "ports": {
            "bedrock": {
                "caption": "bedrock",
                "data_type": "Heightmap",
                "description": "Bedrock elevation, erosion process cannot carve the heightmap further down this point.",
                "type": "input"
            },
            "input": {
                "caption": "input",
                "data_type": "Heightmap",
                "description": "Input heightmap.",
                "type": "input"
            },
            "output": {
                "caption": "output",
                "data_type": "Heightmap",
                "description": "Eroded heightmap.",
                "type": "output"
            }
        }
    },
    "ThermalRidge": {
        "category": "Erosion/Thermal",
        "description": "Applies a thermal erosion effect that simulates the collapse of unstable slopes by moving material from steep areas to lower regions, generating ridged features.",
        "label": "ThermalRidge",
        "parameters": {
            "iterations": {
                "description": "Number of thermal erosion iterations to apply. More iterations result in more pronounced erosion and smoothing of steep slopes.",
                "key": "iterations",
                "label": "iterations",
                "type": "Integer"
            },
            "remap": {
                "description": "Remap the operator's output to a specified range, defaulting to [0, 1].",
                "key": "remap",
                "label": "remap",
                "type": "Value range"
            },
            "scale_talus_with_elevation": {
                "description": "Scales the talus threshold based on elevation, reducing it at lower heights and preserving it at higher altitudes, to simulate realistic slope behavior.",
                "key": "scale_talus_with_elevation",
                "label": "scale_talus_with_elevation",
                "type": "Bool"
            },
            "talus_global": {
                "description": "Global talus angle threshold controlling the maximum slope before material starts to move. Higher values result in steeper terrain preservation.",
                "key": "talus_global",
                "label": "talus_global",
                "type": "Float"
            }
        },
        "ports": {
            "deposition": {
                "caption": "deposition",
                "data_type": "Heightmap",
                "description": "Heightmap showing the amount of material deposited during erosion, scaled in the range [0, 1].",
                "type": "output"
            },
            "input": {
                "caption": "input",
                "data_type": "Heightmap",
                "description": "The input heightmap to which thermal erosion will be applied.",
                "type": "input"
            },
            "mask": {
                "caption": "mask",
                "data_type": "Heightmap",
                "description": "Mask defining the filtering intensity (expected in [0, 1]).",
                "type": "input"
            },
            "output": {
                "caption": "output",
                "data_type": "Heightmap",
                "description": "The resulting heightmap after thermal ridge erosion has been applied.",
                "type": "output"
            }
        }
    },
    "ThermalSchott": {
        "category": "WIP",
        "description": "TODO",
        "label": "ThermalSchott",
        "parameters": {
            "iterations": {
                "description": "TODO",
                "key": "iterations",
                "label": "iterations",
                "type": "Integer"
            },
            "scale_talus_with_elevation": {
                "description": "Scales the talus amplitude based on heightmap elevation, reducing it at lower elevations and maintaining the nominal value at higher elevations.",
                "key": "scale_talus_with_elevation",
                "label": "scale_talus_with_elevation",
                "type": "Bool"
            },
            "talus_global": {
                "description": "TODO",
                "key": "talus_global",
                "label": "talus_global",
                "type": "Float"
            }
        },
        "ports": {
            "input": {
                "caption": "input",
                "data_type": "Heightmap",
                "description": "TODO",
                "type": "input"
            },
            "mask": {
                "caption": "mask",
                "data_type": "Heightmap",
                "description": "Mask defining the filtering intensity (expected in [0, 1]).",
                "type": "input"
            },
            "output": {
                "caption": "output",
                "data_type": "Heightmap",
                "description": "TODO",
                "type": "output"
            }
        }
    },
    "ThermalScree": {
        "category": "Erosion/Thermal",
        "description": "TODO",
        "label": "ThermalScree",
        "parameters": {
            "iterations": {
                "description": "TODO",
                "key": "iterations",
                "label": "iterations",
                "type": "Integer"
            },
            "scale_talus_with_elevation": {
                "description": "Scales the talus amplitude based on heightmap elevation, reducing it at lower elevations and maintaining the nominal value at higher elevations.",
                "key": "scale_talus_with_elevation",
                "label": "scale_talus_with_elevation",
                "type": "Bool"
            },
            "talus_constraint": {
                "description": "TODO",
                "key": "talus_constraint",
                "label": "talus_constraint",
                "type": "Bool"
            },
            "talus_global": {
                "description": "TODO",
                "key": "talus_global",
                "label": "talus_global",
                "type": "Float"
            },
            "zmax": {
                "description": "TODO",
                "key": "zmax",
                "label": "zmax",
                "type": "Float"
            }
        },
        "ports": {
            "deposition": {
                "caption": "deposition",
                "data_type": "Heightmap",
                "description": "Deposition map (in [0, 1]).",
                "type": "output"
            },
            "input": {
                "caption": "input",
                "data_type": "Heightmap",
                "description": "TODO",
                "type": "input"
            },
            "mask": {
                "caption": "mask",
                "data_type": "Heightmap",
                "description": "Mask defining the filtering intensity (expected in [0, 1]).",
                "type": "input"
            },
            "output": {
                "caption": "output",
                "data_type": "Heightmap",
                "description": "TODO",
                "type": "output"
            },
            "zmax": {
                "caption": "zmax",
                "data_type": "Heightmap",
                "description": "TODO",
                "type": "input"
            }
        }
    },
    "Thru": {
        "category": "Routing",
        "description": "Passes the input heightmap directly to the output without modification.",
        "label": "Thru",
        "parameters": {
            "block_update": {
                "description": "No description",
                "key": "block_update",
                "label": "block_update",
                "type": "Bool"
            }
        },
        "ports": {
            "input": {
                "caption": "input",
                "data_type": "Heightmap",
                "description": "Input heightmap to be routed unchanged.",
                "type": "input"
            },
            "output": {
                "caption": "output",
                "data_type": "Heightmap",
                "description": "Output identical to the input heightmap.",
                "type": "output"
            }
        }
    },
    "Toggle": {
        "category": "Routing",
        "description": "A routing utility node that outputs either input A or input B based on the value of the 'toggle' parameter. Useful for manually switching between two sources to compare their effect on the final result.",
        "label": "Toggle",
        "parameters": {
            "toggle": {
                "description": "Determines which input is routed to the output.",
                "key": "toggle",
                "label": "toggle",
                "type": "Bool"
            }
        },
        "ports": {
            "input A": {
                "caption": "input A",
                "data_type": "Heightmap",
                "description": "First heightmap input. Used when the 'toggle' parameter is true (A).",
                "type": "input"
            },
            "input B": {
                "caption": "input B",
                "data_type": "Heightmap",
                "description": "Second heightmap input. Used when the 'toggle' parameter is false (B).",
                "type": "input"
            },
            "output": {
                "caption": "output",
                "data_type": "Heightmap",
                "description": "Selected input passed through: either input A or input B depending on the 'toggle' state.",
                "type": "output"
            }
        }
    },
    "Transfer": {
        "category": "Operator/Blend",
        "description": "Blends the high-frequency details of a source heightmap into a target heightmap. A high-pass filter is applied to the source, then its details are scaled and merged with the target, optionally after prefiltering the target for smoother integration.",
        "label": "Transfer",
        "parameters": {
            "amplitude": {
                "description": "Scales the strength of the high-frequency content taken from the source before it is added to the target.",
                "key": "amplitude",
                "label": "amplitude",
                "type": "Float"
            },
            "mask_activate": {
                "description": "Enables or disables the internal mask. If the node's 'mask' input is connected, this setting is bypassed and the input mask is used instead.",
                "key": "mask_activate",
                "label": "mask_activate",
                "type": "Bool"
            },
            "mask_gain": {
                "description": "Controls the intensity or influence of the internal mask. Bypassed if the 'mask' input is connected.",
                "key": "mask_gain",
                "label": "mask_gain",
                "type": "Float"
            },
            "mask_inverse": {
                "description": "Inverts the internal mask, applying the operator where the mask is low. Ignored if a 'mask' input is provided.",
                "key": "mask_inverse",
                "label": "mask_inverse",
                "type": "Bool"
            },
            "mask_radius": {
                "description": "Defines the smoothing radius for the internal mask. A value of 0 disables smoothing. This is bypassed if the 'mask' input is used.",
                "key": "mask_radius",
                "label": "mask_radius",
                "type": "Float"
            },
            "mask_type": {
                "description": "Specifies how the internal mask is computed: 'Elevation' uses height, 'Gradient Norm' uses slope, and 'Elevation mid-range' selects the middle portion of the height range. This parameter is ignored when a 'mask' input is connected.",
                "key": "mask_type",
                "label": "mask_type",
                "type": "Choice"
            },
            "post_gain": {
                "description": "Set the gain. Gain is a power law transformation altering the distribution of signal values, compressing or expanding certain regions of the signal depending on the exponent of the power law.",
                "key": "post_gain",
                "label": "post_gain",
                "type": "Float"
            },
            "post_inverse": {
                "description": "Inverts the output values after processing, flipping low and high values across the midrange.",
                "key": "post_inverse",
                "label": "post_inverse",
                "type": "Bool"
            },
            "post_remap": {
                "description": "Linearly remaps the output values to a specified target range (default is [0, 1]).",
                "key": "post_remap",
                "label": "post_remap",
                "type": "Value range"
            },
            "post_smoothing_radius": {
                "description": "Defines the radius for post-processing smoothing, determining the size of the neighborhood used to average local values and reduce high-frequency detail. A radius of 0 disables smoothing.",
                "key": "post_smoothing_radius",
                "label": "post_smoothing_radius",
                "type": "Float"
            },
            "radius": {
                "description": "Radius of the smoothing filter used to separate low and high frequencies when extracting details from the source.",
                "key": "radius",
                "label": "radius",
                "type": "Float"
            },
            "target_prefiltering": {
                "description": "If enabled, the target is smoothed before the source details are added, resulting in a softer blend between base and transferred features.",
                "key": "target_prefiltering",
                "label": "target_prefiltering",
                "type": "Bool"
            }
        },
        "ports": {
            "output": {
                "caption": "output",
                "data_type": "Heightmap",
                "description": "Resulting heightmap that combines the target’s base shape with the source’s high-frequency details.",
                "type": "output"
            },
            "source": {
                "caption": "source",
                "data_type": "Heightmap",
                "description": "Heightmap providing the high-frequency details to transfer.",
                "type": "input"
            },
            "target": {
                "caption": "target",
                "data_type": "Heightmap",
                "description": "Heightmap that serves as the base for blending the source details.",
                "type": "input"
            }
        }
    },
    "Translate": {
        "category": "Operator/Transform",
        "description": "Translates an heightmap by a specified amount along the x and y axes. This function shifts the contents of the input array by `dx` and `dy` units along the x and y axes, respectively. It supports both periodic boundary conditions, where the array wraps around, and non-periodic conditions.",
        "label": "Translate",
        "parameters": {
            "center": {
                "description": "No description",
                "key": "center",
                "label": "center",
                "type": "Vec2Float"
            },
            "periodic": {
                "description": "If set to `true`, the translation is periodic, meaning that elements that move out of one side of the array reappear on the opposite side.",
                "key": "periodic",
                "label": "periodic",
                "type": "Bool"
            }
        },
        "ports": {
            "dx": {
                "caption": "dx",
                "data_type": "Heightmap",
                "description": "Displacement with respect to the domain size (y-direction).",
                "type": "input"
            },
            "dy": {
                "caption": "dy",
                "data_type": "Heightmap",
                "description": "Control parameter, acts as a multiplier for the weight parameter.",
                "type": "input"
            },
            "input": {
                "caption": "input",
                "data_type": "Heightmap",
                "description": "Displacement with respect to the domain size (x-direction).",
                "type": "input"
            },
            "output": {
                "caption": "output",
                "data_type": "Heightmap",
                "description": "Translate heightmap.",
                "type": "output"
            }
        }
    },
    "Unsphericity": {
        "category": "Features/Landform",
        "description": "Unsphericity is a measure used to quantify the deviation of the heightmap shape from a perfect sphere. In other words, it indicates how much the terrain differs from being perfectly round or spherical.",
        "label": "Unsphericity",
        "parameters": {
            "GPU": {
                "description": "Toogle GPU acceleration on or off.",
                "key": "GPU",
                "label": "GPU",
                "type": "Bool"
            },
            "inverse": {
                "description": "Toggle inversion of the output values.",
                "key": "inverse",
                "label": "inverse",
                "type": "Bool"
            },
            "radius": {
                "description": "Filter radius with respect to the domain size.",
                "key": "radius",
                "label": "radius",
                "type": "Float"
            },
            "remap": {
                "description": "Remap the operator's output to a specified range, defaulting to [0, 1].",
                "key": "remap",
                "label": "remap",
                "type": "Bool"
            },
            "smoothing": {
                "description": "Enable or disable smoothing to reduce noise in the curvature computation.",
                "key": "smoothing",
                "label": "smoothing",
                "type": "Bool"
            },
            "smoothing_radius": {
                "description": "Specifies the radius for smoothing, determining how much the curvature is averaged over neighboring pixels.",
                "key": "smoothing_radius",
                "label": "smoothing_radius",
                "type": "Float"
            }
        },
        "ports": {
            "input": {
                "caption": "input",
                "data_type": "Heightmap",
                "description": "Input heightmap.",
                "type": "input"
            },
            "output": {
                "caption": "output",
                "data_type": "Heightmap",
                "description": "Shape index.",
                "type": "output"
            }
        }
    },
    "ValleyWidth": {
        "category": "Features/Landform",
        "description": "ValleyWidth identifies valley lines and measure the width of the valley at each cross-section.",
        "label": "ValleyWidth",
        "parameters": {
            "radius": {
                "description": "Filter radius with respect to the domain size.",
                "key": "radius",
                "label": "radius",
                "type": "Float"
            },
            "remap": {
                "description": "Remap the operator's output to a specified range, defaulting to [0, 1].",
                "key": "remap",
                "label": "remap",
                "type": "Value range"
            },
            "ridge_select": {
                "description": "If enabled, selects ridges instead of valleys.",
                "key": "ridge_select",
                "label": "ridge_select",
                "type": "Bool"
            }
        },
        "ports": {
            "input": {
                "caption": "input",
                "data_type": "Heightmap",
                "description": "Input heightmap.",
                "type": "input"
            },
            "output": {
                "caption": "output",
                "data_type": "Heightmap",
                "description": "Valley width heightmap.",
                "type": "output"
            }
        }
    },
    "Vorolines": {
        "category": "Primitive/Coherent",
        "description": "This function generates a Voronoi-like pattern based on the distance from each pixel to a set of randomly oriented lines. Each line is defined by a random point and a direction sampled from a uniform distribution around a given angle.",
        "label": "Vorolines",
        "parameters": {
            "angle": {
                "description": "No description",
                "key": "angle",
                "label": "angle",
                "type": "Float"
            },
            "angle_span": {
                "description": "No description",
                "key": "angle_span",
                "label": "angle_span",
                "type": "Float"
            },
            "density": {
                "description": "No description",
                "key": "density",
                "label": "density",
                "type": "Float"
            },
            "exp_sigma": {
                "description": "No description",
                "key": "exp_sigma",
                "label": "exp_sigma",
                "type": "Float"
            },
            "k_smoothing": {
                "description": "No description",
                "key": "k_smoothing",
                "label": "k_smoothing",
                "type": "Float"
            },
            "post_gain": {
                "description": "Set the gain. Gain is a power law transformation altering the distribution of signal values, compressing or expanding certain regions of the signal depending on the exponent of the power law.",
                "key": "post_gain",
                "label": "post_gain",
                "type": "Float"
            },
            "post_inverse": {
                "description": "Inverts the output values after processing, flipping low and high values across the midrange.",
                "key": "post_inverse",
                "label": "post_inverse",
                "type": "Bool"
            },
            "post_remap": {
                "description": "Linearly remaps the output values to a specified target range (default is [0, 1]).",
                "key": "post_remap",
                "label": "post_remap",
                "type": "Value range"
            },
            "post_smoothing_radius": {
                "description": "Defines the radius for post-processing smoothing, determining the size of the neighborhood used to average local values and reduce high-frequency detail. A radius of 0 disables smoothing.",
                "key": "post_smoothing_radius",
                "label": "post_smoothing_radius",
                "type": "Float"
            },
            "return_type": {
                "description": "No description",
                "key": "return_type",
                "label": "return_type",
                "type": "Enumeration"
            },
            "seed": {
                "description": "Random seed number.",
                "key": "seed",
                "label": "seed",
                "type": "Random seed number"
            },
            "sqrt_output": {
                "description": "No description",
                "key": "sqrt_output",
                "label": "sqrt_output",
                "type": "Bool"
            }
        },
        "ports": {
            "dx": {
                "caption": "dx",
                "data_type": "Heightmap",
                "description": "Displacement with respect to the domain size (x-direction).",
                "type": "input"
            },
            "dy": {
                "caption": "dy",
                "data_type": "Heightmap",
                "description": "Displacement with respect to the domain size (y-direction).",
                "type": "input"
            },
            "envelope": {
                "caption": "envelope",
                "data_type": "Heightmap",
                "description": "No description",
                "type": "input"
            },
            "out": {
                "caption": "out",
                "data_type": "Heightmap",
                "description": "No description",
                "type": "output"
            }
        }
    },
    "VorolinesFbm": {
        "category": "Primitive/Coherent",
        "description": "This function generates a Voronoi-like pattern based on the distance from each pixel to a set of randomly oriented lines. Each line is defined by a random point and a direction sampled from a uniform distribution around a given angle. Generates a fractal Voronoi pattern using fBm (fractal Brownian motion) based on distance fields and multiple noise layers.",
        "label": "VorolinesFbm",
        "parameters": {
            "angle": {
                "description": "No description",
                "key": "angle",
                "label": "angle",
                "type": "Float"
            },
            "angle_span": {
                "description": "No description",
                "key": "angle_span",
                "label": "angle_span",
                "type": "Float"
            },
            "density": {
                "description": "No description",
                "key": "density",
                "label": "density",
                "type": "Float"
            },
            "exp_sigma": {
                "description": "No description",
                "key": "exp_sigma",
                "label": "exp_sigma",
                "type": "Float"
            },
            "k_smoothing": {
                "description": "No description",
                "key": "k_smoothing",
                "label": "k_smoothing",
                "type": "Float"
            },
            "lacunarity": {
                "description": "No description",
                "key": "lacunarity",
                "label": "lacunarity",
                "type": "Float"
            },
            "octaves": {
                "description": "No description",
                "key": "octaves",
                "label": "octaves",
                "type": "Integer"
            },
            "persistence": {
                "description": "No description",
                "key": "persistence",
                "label": "persistence",
                "type": "Float"
            },
            "post_gain": {
                "description": "Set the gain. Gain is a power law transformation altering the distribution of signal values, compressing or expanding certain regions of the signal depending on the exponent of the power law.",
                "key": "post_gain",
                "label": "post_gain",
                "type": "Float"
            },
            "post_inverse": {
                "description": "Inverts the output values after processing, flipping low and high values across the midrange.",
                "key": "post_inverse",
                "label": "post_inverse",
                "type": "Bool"
            },
            "post_remap": {
                "description": "Linearly remaps the output values to a specified target range (default is [0, 1]).",
                "key": "post_remap",
                "label": "post_remap",
                "type": "Value range"
            },
            "post_smoothing_radius": {
                "description": "Defines the radius for post-processing smoothing, determining the size of the neighborhood used to average local values and reduce high-frequency detail. A radius of 0 disables smoothing.",
                "key": "post_smoothing_radius",
                "label": "post_smoothing_radius",
                "type": "Float"
            },
            "return_type": {
                "description": "No description",
                "key": "return_type",
                "label": "return_type",
                "type": "Enumeration"
            },
            "seed": {
                "description": "Random seed number.",
                "key": "seed",
                "label": "seed",
                "type": "Random seed number"
            },
            "sqrt_output": {
                "description": "No description",
                "key": "sqrt_output",
                "label": "sqrt_output",
                "type": "Bool"
            },
            "weight": {
                "description": "No description",
                "key": "weight",
                "label": "weight",
                "type": "Float"
            }
        },
        "ports": {
            "dx": {
                "caption": "dx",
                "data_type": "Heightmap",
                "description": "Displacement with respect to the domain size (x-direction).",
                "type": "input"
            },
            "dy": {
                "caption": "dy",
                "data_type": "Heightmap",
                "description": "Displacement with respect to the domain size (y-direction).",
                "type": "input"
            },
            "envelope": {
                "caption": "envelope",
                "data_type": "Heightmap",
                "description": "No description",
                "type": "input"
            },
            "out": {
                "caption": "out",
                "data_type": "Heightmap",
                "description": "No description",
                "type": "output"
            }
        }
    },
    "Voronoi": {
        "category": "Primitive/Coherent",
        "description": "Generates a Voronoi heightmap based on spatial cell distances, with optional jitter, warping, and control inputs.",
        "label": "Voronoi",
        "parameters": {
            "exp_sigma": {
                "description": "No description",
                "key": "exp_sigma",
                "label": "exp_sigma",
                "type": "Float"
            },
            "jitter.x": {
                "description": "Amount of random jitter along the X-axis applied to Voronoi seed positions.",
                "key": "jitter.x",
                "label": "jitter.x",
                "type": "Float"
            },
            "jitter.y": {
                "description": "Amount of random jitter along the Y-axis applied to Voronoi seed positions.",
                "key": "jitter.y",
                "label": "jitter.y",
                "type": "Float"
            },
            "k_smoothing": {
                "description": "No description",
                "key": "k_smoothing",
                "label": "k_smoothing",
                "type": "Float"
            },
            "kw": {
                "description": "Wavenumber controlling the spatial frequency (cell size) of the Voronoi pattern.",
                "key": "kw",
                "label": "kw",
                "type": "Wavenumber"
            },
            "post_gain": {
                "description": "Set the gain. Gain is a power law transformation altering the distribution of signal values, compressing or expanding certain regions of the signal depending on the exponent of the power law.",
                "key": "post_gain",
                "label": "post_gain",
                "type": "Float"
            },
            "post_inverse": {
                "description": "Inverts the output values after processing, flipping low and high values across the midrange.",
                "key": "post_inverse",
                "label": "post_inverse",
                "type": "Bool"
            },
            "post_remap": {
                "description": "Linearly remaps the output values to a specified target range (default is [0, 1]).",
                "key": "post_remap",
                "label": "post_remap",
                "type": "Value range"
            },
            "post_smoothing_radius": {
                "description": "Defines the radius for post-processing smoothing, determining the size of the neighborhood used to average local values and reduce high-frequency detail. A radius of 0 disables smoothing.",
                "key": "post_smoothing_radius",
                "label": "post_smoothing_radius",
                "type": "Float"
            },
            "return_type": {
                "description": "Determines the output type.",
                "key": "return_type",
                "label": "return_type",
                "type": "Enumeration"
            },
            "seed": {
                "description": "Seed value for the random generator affecting jitter and cell layout.",
                "key": "seed",
                "label": "seed",
                "type": "Random seed number"
            },
            "sqrt_output": {
                "description": "No description",
                "key": "sqrt_output",
                "label": "sqrt_output",
                "type": "Bool"
            }
        },
        "ports": {
            "control": {
                "caption": "control",
                "data_type": "Heightmap",
                "description": "Optional input to guide Voronoi jittering.",
                "type": "input"
            },
            "dx": {
                "caption": "dx",
                "data_type": "Heightmap",
                "description": "X-axis displacement map for directional warping of the Voronoi pattern.",
                "type": "input"
            },
            "dy": {
                "caption": "dy",
                "data_type": "Heightmap",
                "description": "Y-axis displacement map for directional warping of the Voronoi pattern.",
                "type": "input"
            },
            "envelope": {
                "caption": "envelope",
                "data_type": "Heightmap",
                "description": "Heightmap used to modulate the visibility or strength of the Voronoi pattern.",
                "type": "input"
            },
            "out": {
                "caption": "out",
                "data_type": "Heightmap",
                "description": "Resulting heightmap generated by the Voronoi algorithm.",
                "type": "output"
            }
        }
    },
    "VoronoiFbm": {
        "category": "Primitive/Coherent",
        "description": "Generates a fractal Voronoi pattern using fBm (fractal Brownian motion) based on distance fields and multiple noise layers.",
        "label": "VoronoiFbm",
        "parameters": {
            "exp_sigma": {
                "description": "No description",
                "key": "exp_sigma",
                "label": "exp_sigma",
                "type": "Float"
            },
            "jitter.x": {
                "description": "Amount of random jitter applied to seed points along the X-axis.",
                "key": "jitter.x",
                "label": "jitter.x",
                "type": "Float"
            },
            "jitter.y": {
                "description": "Amount of random jitter applied to seed points along the Y-axis.",
                "key": "jitter.y",
                "label": "jitter.y",
                "type": "Float"
            },
            "k_smoothing": {
                "description": "No description",
                "key": "k_smoothing",
                "label": "k_smoothing",
                "type": "Float"
            },
            "kw": {
                "description": "Base wavenumber that controls the frequency of the initial Voronoi pattern.",
                "key": "kw",
                "label": "kw",
                "type": "Wavenumber"
            },
            "lacunarity": {
                "description": "Frequency multiplier between successive octaves in the fBm process.",
                "key": "lacunarity",
                "label": "lacunarity",
                "type": "Float"
            },
            "octaves": {
                "description": "Number of fBm layers to combine for added detail and complexity.",
                "key": "octaves",
                "label": "octaves",
                "type": "Integer"
            },
            "persistence": {
                "description": "Amplitude scaling factor applied to each successive octave.",
                "key": "persistence",
                "label": "persistence",
                "type": "Float"
            },
            "post_gain": {
                "description": "Set the gain. Gain is a power law transformation altering the distribution of signal values, compressing or expanding certain regions of the signal depending on the exponent of the power law.",
                "key": "post_gain",
                "label": "post_gain",
                "type": "Float"
            },
            "post_inverse": {
                "description": "Inverts the output values after processing, flipping low and high values across the midrange.",
                "key": "post_inverse",
                "label": "post_inverse",
                "type": "Bool"
            },
            "post_remap": {
                "description": "Linearly remaps the output values to a specified target range (default is [0, 1]).",
                "key": "post_remap",
                "label": "post_remap",
                "type": "Value range"
            },
            "post_smoothing_radius": {
                "description": "Defines the radius for post-processing smoothing, determining the size of the neighborhood used to average local values and reduce high-frequency detail. A radius of 0 disables smoothing.",
                "key": "post_smoothing_radius",
                "label": "post_smoothing_radius",
                "type": "Float"
            },
            "return_type": {
                "description": "Defines the type of Voronoi information returned.",
                "key": "return_type",
                "label": "return_type",
                "type": "Enumeration"
            },
            "seed": {
                "description": "Seed for random generation, affecting jitter and point distribution.",
                "key": "seed",
                "label": "seed",
                "type": "Random seed number"
            },
            "sqrt_output": {
                "description": "No description",
                "key": "sqrt_output",
                "label": "sqrt_output",
                "type": "Bool"
            },
            "weight": {
                "description": "Weight multiplier applied to the final fBm result for scaling the output.",
                "key": "weight",
                "label": "weight",
                "type": "Float"
            }
        },
        "ports": {
            "control": {
                "caption": "control",
                "data_type": "Heightmap",
                "description": "Optional input to guide Voronoi jittering.",
                "type": "input"
            },
            "dx": {
                "caption": "dx",
                "data_type": "Heightmap",
                "description": "Displacement map along X-axis to warp the input coordinates.",
                "type": "input"
            },
            "dy": {
                "caption": "dy",
                "data_type": "Heightmap",
                "description": "Displacement map along Y-axis to warp the input coordinates.",
                "type": "input"
            },
            "envelope": {
                "caption": "envelope",
                "data_type": "Heightmap",
                "description": "Optional modulation map to attenuate or mask the fBm pattern locally.",
                "type": "input"
            },
            "output": {
                "caption": "output",
                "data_type": "Heightmap",
                "description": "Final heightmap result generated by the fBm Voronoi algorithm.",
                "type": "output"
            }
        }
    },
    "Voronoise": {
        "category": "Primitive/Coherent",
        "description": "TODO",
        "label": "Voronoise",
        "parameters": {
            "inverse": {
                "description": "Toggle inversion of the output values.",
                "key": "inverse",
                "label": "inverse",
                "type": "Bool"
            },
            "kw": {
                "description": "TODO",
                "key": "kw",
                "label": "kw",
                "type": "Wavenumber"
            },
            "remap": {
                "description": "Remap the operator's output to a specified range, defaulting to [0, 1].",
                "key": "remap",
                "label": "remap",
                "type": "Value range"
            },
            "seed": {
                "description": "TODO",
                "key": "seed",
                "label": "seed",
                "type": "Random seed number"
            },
            "u": {
                "description": "TODO",
                "key": "u",
                "label": "u",
                "type": "Float"
            },
            "v": {
                "description": "TODO",
                "key": "v",
                "label": "v",
                "type": "Float"
            }
        },
        "ports": {
            "dx": {
                "caption": "dx",
                "data_type": "Heightmap",
                "description": "TODO",
                "type": "input"
            },
            "dy": {
                "caption": "dy",
                "data_type": "Heightmap",
                "description": "TODO",
                "type": "input"
            },
            "envelope": {
                "caption": "envelope",
                "data_type": "Heightmap",
                "description": "Output noise amplitude envelope.",
                "type": "input"
            },
            "output": {
                "caption": "output",
                "data_type": "Heightmap",
                "description": "TODO",
                "type": "output"
            }
        }
    },
    "Vororand": {
        "category": "Primitive/Coherent",
        "description": "This function computes a Voronoi diagram or derived metric (such as F1, F2, or edge distances) on a grid of given shape. A set of random points is generated within an extended bounding box, based on the desired density and variability, to reduce edge artifacts. Optionally, per-pixel displacement can be applied through noise fields. Optionnaly, a user-defined set of points can be used instead of automatically generated random points.",
        "label": "Vororand",
        "parameters": {
            "density": {
                "description": "No description",
                "key": "density",
                "label": "density",
                "type": "Float"
            },
            "exp_sigma": {
                "description": "No description",
                "key": "exp_sigma",
                "label": "exp_sigma",
                "type": "Float"
            },
            "k_smoothing": {
                "description": "No description",
                "key": "k_smoothing",
                "label": "k_smoothing",
                "type": "Float"
            },
            "post_gain": {
                "description": "Set the gain. Gain is a power law transformation altering the distribution of signal values, compressing or expanding certain regions of the signal depending on the exponent of the power law.",
                "key": "post_gain",
                "label": "post_gain",
                "type": "Float"
            },
            "post_inverse": {
                "description": "Inverts the output values after processing, flipping low and high values across the midrange.",
                "key": "post_inverse",
                "label": "post_inverse",
                "type": "Bool"
            },
            "post_remap": {
                "description": "Linearly remaps the output values to a specified target range (default is [0, 1]).",
                "key": "post_remap",
                "label": "post_remap",
                "type": "Value range"
            },
            "post_smoothing_radius": {
                "description": "Defines the radius for post-processing smoothing, determining the size of the neighborhood used to average local values and reduce high-frequency detail. A radius of 0 disables smoothing.",
                "key": "post_smoothing_radius",
                "label": "post_smoothing_radius",
                "type": "Float"
            },
            "return_type": {
                "description": "No description",
                "key": "return_type",
                "label": "return_type",
                "type": "Enumeration"
            },
            "seed": {
                "description": "Random seed number.",
                "key": "seed",
                "label": "seed",
                "type": "Random seed number"
            },
            "sqrt_output": {
                "description": "No description",
                "key": "sqrt_output",
                "label": "sqrt_output",
                "type": "Bool"
            },
            "variability": {
                "description": "No description",
                "key": "variability",
                "label": "variability",
                "type": "Float"
            }
        },
        "ports": {
            "cloud": {
                "caption": "cloud",
                "data_type": "Cloud",
                "description": "No description",
                "type": "input"
            },
            "dx": {
                "caption": "dx",
                "data_type": "Heightmap",
                "description": "Displacement with respect to the domain size (x-direction).",
                "type": "input"
            },
            "dy": {
                "caption": "dy",
                "data_type": "Heightmap",
                "description": "Displacement with respect to the domain size (y-direction).",
                "type": "input"
            },
            "envelope": {
                "caption": "envelope",
                "data_type": "Heightmap",
                "description": "No description",
                "type": "input"
            },
            "out": {
                "caption": "out",
                "data_type": "Heightmap",
                "description": "No description",
                "type": "output"
            }
        }
    },
    "Warp": {
        "category": "Operator/Transform",
        "description": "The Warp node transforms a base heightmap by warping/pushing pixels as defined by the input displacements.",
        "label": "Warp",
        "parameters": {
            "post_gain": {
                "description": "Set the gain. Gain is a power law transformation altering the distribution of signal values, compressing or expanding certain regions of the signal depending on the exponent of the power law.",
                "key": "post_gain",
                "label": "post_gain",
                "type": "Float"
            },
            "post_inverse": {
                "description": "Inverts the output values after processing, flipping low and high values across the midrange.",
                "key": "post_inverse",
                "label": "post_inverse",
                "type": "Bool"
            },
            "post_mix": {
                "description": "Mixing factor for blending input and output values. A value of 0 uses only the input, 1 uses only the output, and intermediate values perform a linear interpolation.",
                "key": "post_mix",
                "label": "post_mix",
                "type": "Float"
            },
            "post_mix_method": {
                "description": "Method used to combine input and output values. Options include linear interpolation (default), min, max, smooth min, smooth max, add, and subtract.",
                "key": "post_mix_method",
                "label": "post_mix_method",
                "type": "Enumeration"
            },
            "post_remap": {
                "description": "Linearly remaps the output values to a specified target range (default is [0, 1]).",
                "key": "post_remap",
                "label": "post_remap",
                "type": "Value range"
            },
            "post_smoothing_radius": {
                "description": "Defines the radius for post-processing smoothing, determining the size of the neighborhood used to average local values and reduce high-frequency detail. A radius of 0 disables smoothing.",
                "key": "post_smoothing_radius",
                "label": "post_smoothing_radius",
                "type": "Float"
            },
            "scaling.x": {
                "description": "No description",
                "key": "scaling.x",
                "label": "scaling.x",
                "type": "Float"
            },
            "scaling.y": {
                "description": "No description",
                "key": "scaling.y",
                "label": "scaling.y",
                "type": "Float"
            }
        },
        "ports": {
            "dx": {
                "caption": "dx",
                "data_type": "Heightmap",
                "description": "Displacement with respect to the domain size (x-direction).",
                "type": "input"
            },
            "dy": {
                "caption": "dy",
                "data_type": "Heightmap",
                "description": "Displacement with respect to the domain size (y-direction).",
                "type": "input"
            },
            "input": {
                "caption": "input",
                "data_type": "Heightmap",
                "description": "Input heightmap.",
                "type": "input"
            },
            "output": {
                "caption": "output",
                "data_type": "Heightmap",
                "description": "Warped heightmap.",
                "type": "output"
            }
        }
    },
    "WarpDownslope": {
        "category": "WIP",
        "description": "Warp the heightmap with a direction and amount based on the local downslope.",
        "label": "WarpDownslope",
        "parameters": {
            "amount": {
                "description": "Warp scaling with respect to the gradient.",
                "key": "amount",
                "label": "amount",
                "type": "Float"
            },
            "radius": {
                "description": "Prefiltering radius for gradient computation.",
                "key": "radius",
                "label": "radius",
                "type": "Float"
            },
            "reverse": {
                "description": "Reverse warping direction (upslope if true and downslope otherwise).",
                "key": "reverse",
                "label": "reverse",
                "type": "Bool"
            }
        },
        "ports": {
            "input": {
                "caption": "input",
                "data_type": "Heightmap",
                "description": "Input heightmap.",
                "type": "input"
            },
            "mask": {
                "caption": "mask",
                "data_type": "Heightmap",
                "description": "Mask defining the filtering intensity (expected in [0, 1]).",
                "type": "input"
            },
            "output": {
                "caption": "output",
                "data_type": "Heightmap",
                "description": "Filtered heightmap.",
                "type": "output"
            }
        }
    },
    "WaterDepthDryOut": {
        "category": "Hydrology",
        "description": "No description available",
        "label": "WaterDepthDryOut",
        "parameters": {
            "dry_out_ratio": {
                "description": "No description",
                "key": "dry_out_ratio",
                "label": "dry_out_ratio",
                "type": "Float"
            }
        },
        "ports": {
            "depth": {
                "caption": "depth",
                "data_type": "Heightmap",
                "description": "No description",
                "type": "input"
            },
            "mask": {
                "caption": "mask",
                "data_type": "Heightmap",
                "description": "No description",
                "type": "input"
            },
            "water_depth": {
                "caption": "water_depth",
                "data_type": "Heightmap",
                "description": "No description",
                "type": "output"
            }
        }
    },
    "WaterDepthFromMask": {
        "category": "Hydrology",
        "description": "No description available",
        "label": "WaterDepthFromMask",
        "parameters": {
            "iterations": {
                "description": "No description",
                "key": "iterations",
                "label": "iterations",
                "type": "Integer"
            },
            "mask_threshold": {
                "description": "No description",
                "key": "mask_threshold",
                "label": "mask_threshold",
                "type": "Float"
            },
            "omega": {
                "description": "No description",
                "key": "omega",
                "label": "omega",
                "type": "Float"
            },
            "tolerance": {
                "description": "No description",
                "key": "tolerance",
                "label": "tolerance",
                "type": "Float"
            }
        },
        "ports": {
            "elevation": {
                "caption": "elevation",
                "data_type": "Heightmap",
                "description": "No description",
                "type": "input"
            },
            "water_depth": {
                "caption": "water_depth",
                "data_type": "Heightmap",
                "description": "No description",
                "type": "output"
            },
            "water_mask": {
                "caption": "water_mask",
                "data_type": "Heightmap",
                "description": "No description",
                "type": "input"
            }
        }
    },
    "WaterMask": {
        "category": "Hydrology",
        "description": "No description available",
        "label": "WaterMask",
        "parameters": {
            "additional_depth": {
                "description": "No description",
                "key": "additional_depth",
                "label": "additional_depth",
                "type": "Float"
            },
            "post_gain": {
                "description": "No description",
                "key": "post_gain",
                "label": "post_gain",
                "type": "Float"
            },
            "post_inverse": {
                "description": "No description",
                "key": "post_inverse",
                "label": "post_inverse",
                "type": "Bool"
            },
            "post_remap": {
                "description": "No description",
                "key": "post_remap",
                "label": "post_remap",
                "type": "Value range"
            },
            "post_smoothing_radius": {
                "description": "No description",
                "key": "post_smoothing_radius",
                "label": "post_smoothing_radius",
                "type": "Float"
            }
        },
        "ports": {
            "elevation": {
                "caption": "elevation",
                "data_type": "Heightmap",
                "description": "No description",
                "type": "input"
            },
            "mask": {
                "caption": "mask",
                "data_type": "Heightmap",
                "description": "No description",
                "type": "output"
            },
            "water_depth": {
                "caption": "water_depth",
                "data_type": "Heightmap",
                "description": "No description",
                "type": "input"
            }
        }
    },
    "WaveDune": {
        "category": "Primitive/Function",
        "description": "WaveDune mimics using a periodic function the formation and spatial distribution of transverse sand dunes on a terrain.",
        "label": "WaveDune",
        "parameters": {
            "angle": {
                "description": "Angle in the horizontal plane.",
                "key": "angle",
                "label": "angle",
                "type": "Float"
            },
            "kw": {
                "description": "Noise wavenumbers (kx, ky) for each directions.",
                "key": "kw",
                "label": "kw",
                "type": "Float"
            },
            "phase_shift": {
                "description": "Phase shift.",
                "key": "phase_shift",
                "label": "phase_shift",
                "type": "Float"
            },
            "post_gain": {
                "description": "No description",
                "key": "post_gain",
                "label": "post_gain",
                "type": "Float"
            },
            "post_inverse": {
                "description": "No description",
                "key": "post_inverse",
                "label": "post_inverse",
                "type": "Bool"
            },
            "post_remap": {
                "description": "No description",
                "key": "post_remap",
                "label": "post_remap",
                "type": "Value range"
            },
            "post_smoothing_radius": {
                "description": "No description",
                "key": "post_smoothing_radius",
                "label": "post_smoothing_radius",
                "type": "Float"
            },
            "xbottom": {
                "description": "Relative position of the dune bottom, in [0, 1].",
                "key": "xbottom",
                "label": "xbottom",
                "type": "Float"
            },
            "xtop": {
                "description": "Relative position of the dune top, in [0, 1].",
                "key": "xtop",
                "label": "xtop",
                "type": "Float"
            }
        },
        "ports": {
            "dr": {
                "caption": "dr",
                "data_type": "Heightmap",
                "description": "Displacement with respect to the domain size (normal direction).",
                "type": "input"
            },
            "envelope": {
                "caption": "envelope",
                "data_type": "Heightmap",
                "description": "No description",
                "type": "input"
            },
            "output": {
                "caption": "output",
                "data_type": "Heightmap",
                "description": "WaveDune heightmap.",
                "type": "output"
            }
        }
    },
    "WaveSine": {
        "category": "Primitive/Function",
        "description": "WaveSine generates sine waves.",
        "label": "WaveSine",
        "parameters": {
            "angle": {
                "description": "Angle in the horizontal plane.",
                "key": "angle",
                "label": "angle",
                "type": "Float"
            },
            "kw": {
                "description": "Noise wavenumbers (kx, ky) for each directions.",
                "key": "kw",
                "label": "kw",
                "type": "Float"
            },
            "phase_shift": {
                "description": "Phase shift.",
                "key": "phase_shift",
                "label": "phase_shift",
                "type": "Float"
            },
            "post_gain": {
                "description": "No description",
                "key": "post_gain",
                "label": "post_gain",
                "type": "Float"
            },
            "post_inverse": {
                "description": "No description",
                "key": "post_inverse",
                "label": "post_inverse",
                "type": "Bool"
            },
            "post_remap": {
                "description": "No description",
                "key": "post_remap",
                "label": "post_remap",
                "type": "Value range"
            },
            "post_smoothing_radius": {
                "description": "No description",
                "key": "post_smoothing_radius",
                "label": "post_smoothing_radius",
                "type": "Float"
            }
        },
        "ports": {
            "dr": {
                "caption": "dr",
                "data_type": "Heightmap",
                "description": "Displacement with respect to the domain size (normal direction).",
                "type": "input"
            },
            "envelope": {
                "caption": "envelope",
                "data_type": "Heightmap",
                "description": "No description",
                "type": "input"
            },
            "output": {
                "caption": "output",
                "data_type": "Heightmap",
                "description": "WaveSine heightmap.",
                "type": "output"
            }
        }
    },
    "WaveSquare": {
        "category": "Primitive/Function",
        "description": "WaveSquare generates square waves.",
        "label": "WaveSquare",
        "parameters": {
            "angle": {
                "description": "Angle in the horizontal plane.",
                "key": "angle",
                "label": "angle",
                "type": "Float"
            },
            "kw": {
                "description": "Noise wavenumbers (kx, ky) for each directions.",
                "key": "kw",
                "label": "kw",
                "type": "Float"
            },
            "phase_shift": {
                "description": "Phase shift.",
                "key": "phase_shift",
                "label": "phase_shift",
                "type": "Float"
            },
            "post_gain": {
                "description": "No description",
                "key": "post_gain",
                "label": "post_gain",
                "type": "Float"
            },
            "post_inverse": {
                "description": "No description",
                "key": "post_inverse",
                "label": "post_inverse",
                "type": "Bool"
            },
            "post_remap": {
                "description": "No description",
                "key": "post_remap",
                "label": "post_remap",
                "type": "Value range"
            },
            "post_smoothing_radius": {
                "description": "No description",
                "key": "post_smoothing_radius",
                "label": "post_smoothing_radius",
                "type": "Float"
            }
        },
        "ports": {
            "dr": {
                "caption": "dr",
                "data_type": "Heightmap",
                "description": "Displacement with respect to the domain size (normal direction).",
                "type": "input"
            },
            "envelope": {
                "caption": "envelope",
                "data_type": "Heightmap",
                "description": "No description",
                "type": "input"
            },
            "output": {
                "caption": "output",
                "data_type": "Heightmap",
                "description": "WaveSquare heightmap.",
                "type": "output"
            }
        }
    },
    "WaveTriangular": {
        "category": "Primitive/Function",
        "description": "WaveTriangular generates triangular waves.",
        "label": "WaveTriangular",
        "parameters": {
            "angle": {
                "description": "Angle in the horizontal plane.",
                "key": "angle",
                "label": "angle",
                "type": "Float"
            },
            "kw": {
                "description": "Noise wavenumbers (kx, ky) for each directions.",
                "key": "kw",
                "label": "kw",
                "type": "Float"
            },
            "phase_shift": {
                "description": "Phase shift.",
                "key": "phase_shift",
                "label": "phase_shift",
                "type": "Float"
            },
            "post_gain": {
                "description": "No description",
                "key": "post_gain",
                "label": "post_gain",
                "type": "Float"
            },
            "post_inverse": {
                "description": "No description",
                "key": "post_inverse",
                "label": "post_inverse",
                "type": "Bool"
            },
            "post_remap": {
                "description": "No description",
                "key": "post_remap",
                "label": "post_remap",
                "type": "Value range"
            },
            "post_smoothing_radius": {
                "description": "No description",
                "key": "post_smoothing_radius",
                "label": "post_smoothing_radius",
                "type": "Float"
            },
            "slant_ratio": {
                "description": "Decides on wave asymmetry, expected in [0, 1].",
                "key": "slant_ratio",
                "label": "slant_ratio",
                "type": "Float"
            }
        },
        "ports": {
            "dr": {
                "caption": "dr",
                "data_type": "Heightmap",
                "description": "Displacement with respect to the domain size (normal direction).",
                "type": "input"
            },
            "envelope": {
                "caption": "envelope",
                "data_type": "Heightmap",
                "description": "No description",
                "type": "input"
            },
            "output": {
                "caption": "output",
                "data_type": "Heightmap",
                "description": "WaveTriangular heightmap.",
                "type": "output"
            }
        }
    },
    "White": {
        "category": "Primitive/Random",
        "description": "White noise operator generates a random signal with a flat power spectral density.",
        "label": "White",
        "parameters": {
            "inverse": {
                "description": "Toggle inversion of the output values.",
                "key": "inverse",
                "label": "inverse",
                "type": "Bool"
            },
            "remap": {
                "description": "Remap the operator's output to a specified range, defaulting to [0, 1].",
                "key": "remap",
                "label": "remap",
                "type": "Value range"
            },
            "seed": {
                "description": "Random seed number.",
                "key": "seed",
                "label": "seed",
                "type": "Random seed number"
            }
        },
        "ports": {
            "envelope": {
                "caption": "envelope",
                "data_type": "Heightmap",
                "description": "Output noise amplitude envelope.",
                "type": "input"
            },
            "output": {
                "caption": "output",
                "data_type": "Heightmap",
                "description": "Generated noise.",
                "type": "output"
            }
        }
    },
    "WhiteDensityMap": {
        "category": "Primitive/Random",
        "description": "WhiteDensityMap noise operator generates a random signal with a flat power and a spatial density defined by an input heightmap.",
        "label": "WhiteDensityMap",
        "parameters": {
            "inverse": {
                "description": "Toggle inversion of the output values.",
                "key": "inverse",
                "label": "inverse",
                "type": "Bool"
            },
            "remap": {
                "description": "Remap the operator's output to a specified range, defaulting to [0, 1].",
                "key": "remap",
                "label": "remap",
                "type": "Value range"
            },
            "seed": {
                "description": "Random seed number.",
                "key": "seed",
                "label": "seed",
                "type": "Random seed number"
            }
        },
        "ports": {
            "density": {
                "caption": "density",
                "data_type": "Heightmap",
                "description": "Output noise amplitude envelope.",
                "type": "input"
            },
            "envelope": {
                "caption": "envelope",
                "data_type": "Heightmap",
                "description": "Output noise amplitude envelope.",
                "type": "input"
            },
            "output": {
                "caption": "output",
                "data_type": "Heightmap",
                "description": "Generated noise.",
                "type": "output"
            }
        }
    },
    "WhiteSparse": {
        "category": "Primitive/Random",
        "description": "WhiteSparse noise operator generates a random signal with a flat power spectral density, but with a sparse spatial density.",
        "label": "WhiteSparse",
        "parameters": {
            "density": {
                "description": "Noise density.",
                "key": "density",
                "label": "density",
                "type": "Float"
            },
            "inverse": {
                "description": "Toggle inversion of the output values.",
                "key": "inverse",
                "label": "inverse",
                "type": "Bool"
            },
            "remap": {
                "description": "Remap the operator's output to a specified range, defaulting to [0, 1].",
                "key": "remap",
                "label": "remap",
                "type": "Value range"
            },
            "seed": {
                "description": "Random seed number.",
                "key": "seed",
                "label": "seed",
                "type": "Random seed number"
            }
        },
        "ports": {
            "envelope": {
                "caption": "envelope",
                "data_type": "Heightmap",
                "description": "Output noise amplitude envelope.",
                "type": "input"
            },
            "output": {
                "caption": "output",
                "data_type": "Heightmap",
                "description": "Generated noise.",
                "type": "output"
            }
        }
    },
    "Wrinkle": {
        "category": "WIP",
        "description": "TODO",
        "label": "Wrinkle",
        "parameters": {
            "displacement_amplitude": {
                "description": "TODO",
                "key": "displacement_amplitude",
                "label": "displacement_amplitude",
                "type": "Float"
            },
            "kw": {
                "description": "TODO",
                "key": "kw",
                "label": "kw",
                "type": "Float"
            },
            "octaves": {
                "description": "TODO",
                "key": "octaves",
                "label": "octaves",
                "type": "Integer"
            },
            "radius": {
                "description": "TODO",
                "key": "radius",
                "label": "radius",
                "type": "Float"
            },
            "seed": {
                "description": "TODO",
                "key": "seed",
                "label": "seed",
                "type": "Random seed number"
            },
            "weight": {
                "description": "TODO",
                "key": "weight",
                "label": "weight",
                "type": "Float"
            },
            "wrinkle_amplitude": {
                "description": "TODO",
                "key": "wrinkle_amplitude",
                "label": "wrinkle_amplitude",
                "type": "Float"
            },
            "wrinkle_angle": {
                "description": "TODO",
                "key": "wrinkle_angle",
                "label": "wrinkle_angle",
                "type": "Float"
            }
        },
        "ports": {
            "input": {
                "caption": "input",
                "data_type": "Heightmap",
                "description": "TODO",
                "type": "input"
            },
            "mask": {
                "caption": "mask",
                "data_type": "Heightmap",
                "description": "Mask defining the filtering intensity (expected in [0, 1]).",
                "type": "input"
            },
            "output": {
                "caption": "output",
                "data_type": "Heightmap",
                "description": "TODO",
                "type": "output"
            }
        }
    },
    "ZScore": {
        "category": "Features",
        "description": "No description available",
        "label": "ZScore",
        "parameters": {
            "post_gain": {
                "description": "Set the gain. Gain is a power law transformation altering the distribution of signal values, compressing or expanding certain regions of the signal depending on the exponent of the power law.",
                "key": "post_gain",
                "label": "post_gain",
                "type": "Float"
            },
            "post_inverse": {
                "description": "Inverts the output values after processing, flipping low and high values across the midrange.",
                "key": "post_inverse",
                "label": "post_inverse",
                "type": "Bool"
            },
            "post_remap": {
                "description": "Linearly remaps the output values to a specified target range (default is [0, 1]).",
                "key": "post_remap",
                "label": "post_remap",
                "type": "Value range"
            },
            "post_smoothing_radius": {
                "description": "Defines the radius for post-processing smoothing, determining the size of the neighborhood used to average local values and reduce high-frequency detail. A radius of 0 disables smoothing.",
                "key": "post_smoothing_radius",
                "label": "post_smoothing_radius",
                "type": "Float"
            },
            "radius": {
                "description": "No description",
                "key": "radius",
                "label": "radius",
                "type": "Float"
            }
        },
        "ports": {
            "input": {
                "caption": "input",
                "data_type": "Heightmap",
                "description": "No description",
                "type": "input"
            },
            "output": {
                "caption": "output",
                "data_type": "Heightmap",
                "description": "No description",
                "type": "output"
            }
        }
    },
    "ZeroedEdges": {
        "category": "Math/Boundaries",
        "description": "An operator that enforces values close to zero at the domain edges.",
        "label": "ZeroedEdges",
        "parameters": {
            "distance_function": {
                "description": "Determines the method used for distance calculation. Options: Chebyshev, Euclidean, Euclidean/Chebyshev, Manhattan.",
                "key": "distance_function",
                "label": "distance_function",
                "type": "Enumeration"
            },
            "remap": {
                "description": "Specifies the output range for the operator. Defaults to [0, 1].",
                "key": "remap",
                "label": "remap",
                "type": "Value range"
            },
            "sigma": {
                "description": "Controls the shape power law.",
                "key": "sigma",
                "label": "sigma",
                "type": "Float"
            }
        },
        "ports": {
            "dr": {
                "caption": "dr",
                "data_type": "Heightmap",
                "description": "Displacement relative to the domain size (radial direction).",
                "type": "input"
            },
            "input": {
                "caption": "input",
                "data_type": "Heightmap",
                "description": "The input heightmap.",
                "type": "input"
            },
            "output": {
                "caption": "output",
                "data_type": "Heightmap",
                "description": "The filtered heightmap result.",
                "type": "output"
            }
        }
    },
    "Zoom": {
        "category": "Operator/Transform",
        "description": "Applies a zoom effect to an heightmap with an adjustable center. This function scales the input 2D array by a specified zoom factor, effectively resizing the array's contents. The zoom operation is centered around a specified point within the array, allowing for flexible zooming behavior.",
        "label": "Zoom",
        "parameters": {
            "center": {
                "description": "Reference center within the heightmap.",
                "key": "center",
                "label": "center",
                "type": "Vec2Float"
            },
            "periodic": {
                "description": "If set to `true`, the zoom is periodic.",
                "key": "periodic",
                "label": "periodic",
                "type": "Bool"
            },
            "remap": {
                "description": "Remap the operator's output to a specified range, defaulting to [0, 1].",
                "key": "remap",
                "label": "remap",
                "type": "Bool"
            },
            "zoom_factor": {
                "description": "The factor by which to zoom the heightmap.",
                "key": "zoom_factor",
                "label": "zoom_factor",
                "type": "Float"
            }
        },
        "ports": {
            "dx": {
                "caption": "dx",
                "data_type": "Heightmap",
                "description": "Displacement with respect to the domain size (y-direction).",
                "type": "input"
            },
            "dy": {
                "caption": "dy",
                "data_type": "Heightmap",
                "description": "Control parameter, acts as a multiplier for the weight parameter.",
                "type": "input"
            },
            "input": {
                "caption": "input",
                "data_type": "Heightmap",
                "description": "Displacement with respect to the domain size (x-direction).",
                "type": "input"
            },
            "output": {
                "caption": "output",
                "data_type": "Heightmap",
                "description": "Zoom heightmap.",
                "type": "output"
            }
        }
    }
}
